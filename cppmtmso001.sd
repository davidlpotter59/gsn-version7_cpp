%%
Screen
        Name            = "cppMTMSO001" ;
        Type            = "Detail" ;
        Padcharacter    = Space ;
        Highlight       = Underscore ;
        Screensize      = "dynamic" ;
        Domain          = "sfpMASTER" ;
        Windowtitle  = "%a     %s Liability Final Rating    Ver. 7.0 %m" ;
        iconline        = 0 ;

        Global String G_LIB[10],
                       g_inquiry[1] ;

        Global Unsigned Ascii Number G_POLICY_NO[9],
                                     G_YEAR[4],
                                     G_END_SEQUENCE[4],
                                     G_QUOTE_NO[8] ,
                                     G_PREM_NO[4] ,
                                     G_BUILD_NO[4] ,
                                     G_NEW_QUOTE_NO[8],
                                     G_LINE_OF_BUSINESS[4],
                                     G_STATE[2] ,
                                     G_CLASS_CODE[5] ,
                                     G_SUB_CODE[4] ;

        Global String G_COMPANY_ID[10] ,
                      G_QUE[10] ,
                      G_FOB[1] ,
                      G_FOB_DESCRIPTION[75] ;

        local signed ascii number l_end_premium[6]=0,
                                  l_subline_percent[10]=0/dec=4,
                                  l_misc_premium[6]=0 ;

        Local Unsigned Ascii Number L_TOTAL_1[8]=0,
                                    l_location_premium_10[8]=0,
                                    l_sfpmaster_total_10[8]=0,
                                    l_location_premium_11[8]=0,
                                    l_rate_type[2]=0,
                                    l_rating_territory_factor[5]=0/dec=3,
                                    l_county[3]=0,
                                    l_total_fac_limit[8]=0,
                                    l_percentage[8]=0/dec=4,
                                    l_protection[2]=0,
                                    l_force_to_subject[1]=0,
                                    L_TOTAL_2[8]=0,
                                    L_TOTAL_3[8]=0,
                                    L_TOTAL_4[8]=0,
                                    L_TOTAL_5[8]=0,
                                    L_TOTAL_6[8]=0,
                                    L_TOTAL_7[8]=0,
                                    L_TOTAL_8[8]=0,
                                    L_TOTAL_9[8]=0,
                                    l_total_10[8]=0,
                                    l_property_terror[8]=0,
                                    l_inland_terror[8]=0,
                                    l_business_terror[8]=0,
                                    l_glass_terror[8]=0,
                                    l_crime_terror[8]=0,
                                    l_difference[8]=0,
                                    l_liability_terror[8]=0,
                                    l_cppgeneral_total[8]=0,
                                    l_cppgeneral_total_1[8]=0,
                                    l_cppgeneral_total_2[8]=0,
                                    l_cppgeneral_total_3[8]=0,
                                    l_cppgeneral_total_4[8]=0,
                                    l_cppgeneral_total_5[8]=0,
                                    l_cppgeneral_total_6[8]=0,
                                    l_cppgeneral_total_7[8]=0,
                                    l_cppgeneral_total_8[8]=0,
                                    l_cppgeneral_total_9[8]=0,
                                    l_cppgeneral_total_10[8]=0,
                                    l_cppgeneral_total_11[8]=0,
                                    l_cppgeneral_total_12[8]=0,
                                    l_cppgeneral_total_13[8]=0,
                                    l_cppbusiness_total_1[8]=0,
                                    l_cppliability_total_1[8]=0,
                                    l_include_prop_opt_cov[1]=0,
                                    l_include_business_income[1]=0,
                                    l_include_glass[1]=0,
                                    l_include_crime[1]=0,
                                    l_include_inland_marine[1]=0,
                                    l_include_boiler[1]=0,
                                    l_include_irpm[1]=0,
                                    l_min_total[8]=0,
                                    l_premium_2[8]=0,
                                    l_premium_3[8]=0,
                                    l_premium_4[8]=0,
                                    l_line_of_business[4],
                                    l_irpm_deviation[5]=0/dec=3,
                                    l_property_deviation[5]=0/dec=3,
                                    l_property_deviation_1[5]=0/dec=3,
                                    l_liability_deviation[5]=0/dec=3,
                                    l_liability_deviation_1[5]=0/dec=3,
                                    l_mm[2]=0,
                                    l_dd[2]=0,
                                    l_yy[4]=0,
                                    L_PREM_TOTAL[8]=0,
                                    L_PROD_TOTAL[8]=0,
                                    L_LIABILITY_TOTAL[8]=0,
                                    l_minimum_premium[4]=0,
                                    L_PROPERTY_TOTAL[8]=0,
                                    L_PROPERTY_TOTAL_1[8]=0,
                                    L_BI_TOTAL[8]=0,
                                    L_BI_TOTAL_1[8]=0,
                                    L_FIRE_TOTAL[8]=0,
                                    l_reins_Fire_total[8]=0,
                                    l_reins_ecvmm_total[8]=0,
                                    l_reins_other_total[8]=0,
                                    L_EC_VMM_TOTAL[8]=0,
                                    l_short_rate[4]=0/dec=2,
                                    L_OTHER_TOTAL[8]=0,
                                    L_BOILER_TOTAL[8]=0,
                                    L_FARM_FIRE_TOTAL[8]=0,
                                    L_FARM_ALLIED_TOTAL[8]=0,
                                    L_FARM_INLAND_TOTAL[8]=0,
                                    l_end_sequence[4]=0,
                                    l_farm_prem_total[8]=0,
                                    l_farm_prod_total[8]=0,
                                    l_farm_liability_total[8]=0,
                                    l_reins_co[6]=0,
                                    l_crime_limit[8]=0,
                                    l_inland_limit[8]=0,
                                    l_glass_limit[8]=0,
                                    L_FARM_TOTAL[8]=0,
                                    l_farm_difference[3]=0,
                                    L_OPTION_1[1]=0,
                                    L_OPTION_2[1]=0,
                                    L_OPTION_3[1]=0,
                                    L_OPTION_4[1]=0,
                                    L_OPTION_5[1]=0,
                                    L_OPTION_6[1]=0,
                                    L_OPTION_7[1]=0,
                                    L_OPTION_8[1]=0,
                                    L_OPTION_9[1]=0,
                                    l_option_10[1]=0,
                                    L_TOTAL[8]=0,
                                    L_MINIMUM[4]=0,
                                    L_STATE[2]=0,
                                    L_BOILER_PREM_TOTAL[8]=0,
                                    L_SURCHARGE_FACTOR[8]=0/decimals=6,
                                    L_SURCHARGE_MINIMUM[2]=0,
                                    L_FINAL_TOTAL[8]=0,
                                    L_LOC_TOTAL[8]=0,
                                    L_SURCHARGE[6]=0 ,
                                    L_PREM_NO[4]=0,
                                    L_BUILD_NO[4]=0 ,
                                    L_LIMIT[8]=0,
                                    L_CSEXEC_NUMBER[12] ,
                                    I_CSEXEC_NUMBER[12],
                                    L_INSTALLMENT[4]=0,
                                    L_DAYS_RATE[8]=0/decimals=4,
                                    L_PRO_RATA_PREMIUM[8]=0;

        Local Signed Ascii Number L_DAYS ,
                                  l_previous_total[8]=0,
                                  l_location_new_total[8]=0,
                                  l_crime_premium[9]=0/dec=2,
                                  l_reins_irpm_total[8]=0,
                                  l_previous_installment[8]=0,
                                  l_previous_surcharge[8]=0 ,
                                  l_deviation[4]=0/dec=2,
                                  l_irpm_1[4]=0/dec=2,
                                  L_FINAL_TOTAL_1[8]=0,
                                  L_FINAL_TOTAL_2[8]=0,
                                  L_FINAL_TOTAL_3[8]=0,
                                  l_final_total_4[8]=0,
                                  l_package[4]=0/dec=2,
                                  l_optional_coverages[8]=0,
                                  L_IRPM_TOTAL[8]=0,
                                  l_irpm_property[8]=0,
                                  l_irpm_liability[8]=0,
                                  l_irpm_inland[8]=0,
                                  l_irpm_crime[8]=0,
                                  l_irpm_glass[8]=0,
                                  l_location_irpm_prop[8]=0,
                                  l_location_irpm_liab[8]=0,
                                  l_location_irpm_crime[8]=0,
                                  l_location_irpm_diff[8]=0,
                                  l_total_all_irpm[8]=0,
                                  l_irpm_difference[8]=0,
                                  l_irpm[8]=0/dec=4 ;

        Local String L_TYPE[1] ,
                     L_CSEXEC_APPLICATION[25]="" ,
                     l_str_state[2]="",
                     l_first_end[1]="Y",
                     l_zip_code_5[5]="",
                     l_continue_1[3]="",
                     L_COMMANDLINE[17],
                     l_commandline_1[27],
                     l_commandline_2[25],
                     l_lob_end_code[1]="",
                     l_policy_update_string[17],
                     l_cancellation_string[28],
                     L_APP[3]="cpp",
                     L_DEC[15],
                     l_mp_1[1]="N",
                     l_boiler_first[1]="Y",
                     l_key_risk[1]="N",
                     l_mp_2[1]="N",
                     l_mp_3[1]="N",
                     l_enter,
                     l_mp_4[1]="N",
                     l_mp_5[1]="N",
                     l_mp_6[1]="N",
                     l_first[1]="Y",
                     l_first_1[1]="Y",
                     l_pro_rata_wording[15]="Pro Rata Factor",
                     L_FORM_EDITION[25],
                     L_DESCRIPTION[75],
                     L_SCREEN[11] ,
                     l_first_misc[1]="Y",
                     l_screen_1[12],
                     L_CODE[7],
                     L_PRO_RATE="PRO RATA" ;

        Local Date L_EFF_DATE_1[8] ,
                   l_surcharge_date[8] ;

        Local Mmddyyyy Date L_CORRECT_DATE[8] ;
        Local String L_FIRST_TIME[1]="Y";
        Unsigned Ascii Number L_HOLD_PAYMENT_PLAN[4]=0;
        Signed Ascii Number L_SUB_TOTAL[9]=0/decimals=2;
        Local Unsigned Ascii Number L_OPT[1]=0 ;

        Unsigned Ascii Number L_TERRORISM_PREMIUM[8]/decimals =0;
        unsigned ascii number l_tpd6_terrorism_premium[8]/dec=0 ;
        Unsigned Ascii Number L_TERROR_PERCENTAGE[5]/decimals=4;
        Unsigned Ascii Number L_TERROR_MINIMUM[3];
        Wdate L_TERROR_EFF_DATE;
        Unsigned Ascii Number L_FOUND[1];
        Unsigned Ascii Number L_REMOVE_TERROR_FOUND[1] ;
        Unsigned Ascii Number L_SUB_CODE[4];

        Local Signed Ascii Number  l_reins_premium[9]=0 ,
                                   l_premium[9]=0 ,
                                   l_premium_1[9]=0 ,
                                   l_reins_total[9]=0,
                                   l_total_diff[5]=0,
                                   l_total_diff_1[5]=0,
                                   l_total_diff_2[5]=0,
                                   l_prop_pro_rata_diff[5]=0,
                                   l_liab_pro_rata_diff[5]=0,
                                   l_im_pro_rata_diff[5]=0,
                                   l_irpm_reins_total[9]=0 ;

        Local Unsigned Ascii Number l_reins_factor[5]=0/dec=4,
                                    l_reins_limit[8]=0,
                                    l_reins_limit1[8]=0 ,
                                    l_business_income_limit[8]=0,
                                    l_key_risk_limit[8]=0,
                                    l_key_risk_prem_no[4]=0,
                                    l_key_risk_build_no[4]=0,
                                    l_property_limit[8]=0;

        Include "print.var"

        Include "virtualdecs.var"

        include "amtdue.var"

        include "unbilled.var"

        include "update.var"

        include "prorata.var"

        Access sfpMASTER, Set sfpMASTER:policy_NO = G_policy_NO,
                              sfpmaster:pol_year = g_year,
                              sfpmaster:end_sequence = g_end_sequence, Generic

        Include "STDKEYS7.INC"

style definition

        include "styles.inc"

Functions
        "Date" sequence "J" tagged trans_eff_fn ;
        "IRPM" sequence "Down" tagged irpm_fn ;
        "Comm" sequence "O" tagged update_fn ;
        "State" sequence "dispState" tagged state_fn ;
        "busdesc" display "cppmtmso274" tagged busdesc_fn ;

        "Up" Display L_SCREEN ;
        "J" display "cppmtmso001a" ;
        "Down" continue begin
                        if sfpname:company_id = "FARMERS" then
                            error "Invalid Option Selected"
                        else
                            l_screen_1 = "cppmtmso001c"
                        function = "func1"
                        end ;
        "func1" display l_screen_1 ;

        "O" continue begin
                     l_continue_1 = dialog("UPDATE","warning.bmp","You are about to update your changes, do you wish to continue?","Yes", "No")
                     switch(l_continue_1)
                       case "Yes" : begin
                                    do update_files
                                    function = "SFP"
                                    end
                       end
                     end ;
        "SFP" screenlib "sfplib" ;

        "dispState" display "cppmtmso001d" ;

        "Commit" Continue Begin
                          Do REFRESH_WORK_FILES
                          End ;

        "redisplay" Display/noreturn "cppmtmso001" ;

--        "EXIT" screenlib g_lib tagged exit_fn ;
  --      "back" screenlib g_lib tagged back_fn ;

        "EXIT" sequence "mnt_inq" tagged exit_fn ;
        "back" sequence "mnt_inq" tagged back_fn ;

        "mnt_inq"  continue begin
                  if g_inquiry = "N" then
                        l_screen = "sfplib"
                  else
                        l_screen = "sfplibi"
                  function = "returntoscreen"
                  end ;
        "returntoscreen" screenlib l_screen ;

        Include "stdfunc7.inc"

        include "cppmsofinalfunc7.inc"

menu definition

        include "stdmenu7.inc"

        Include "cppmsofinalmenu7.inc"

}

toolbar definition

        include "stdtoolbar7.inc"

}

        include "stdblanktoolbar7.inc"

}

        include "cppmsoproptoolbar7.inc"
}

        include "stdblanktoolbar7.inc"

}

        include "stdupdatetoolbar7.inc"

}

screen entry
if g_end_sequence = 9999 then
disable(update_fn)  -- update function

g_state = sfpmaster:state

if g_inquiry = "Y" then
    begin
    disable(add_fn)
--    disable(change_fn)
    disable(delete_fn)
    disable(update_fn)
    end

if sfpname:company_Id = "FARMERS" then
    disable(irpm_fn)

Access Validation
If sfpMASTER:policy_NO    <> G_policy_NO or
   sfpmaster:pol_year     <> g_year or
   sfpmaster:end_sequence <> g_end_sequence Then
  {
    Error 1000
  };

screen at 1,1 to 20,80
Properties
        {
        Layouttype = column
        }
{
Panel
Properties
        {
        Borderstyle     = raised
        scrollbarpolicy = asneeded
        }
{
%%
                                                        ______________
*------------------------------------------------------------------------------*
| Policy No:    _________  ____  ____                                          |
|               ___________________________________________________            |
*-------------------------------------------*------*---------------------------*
| Property:              _____________      |  _   |       Previous Totals     |
| Business Income:       _____________      |  _   | Total:       ____________ |
| Glass:                 _____________      |  _   | Installment: ____________ |
| Crime:                 _____________      |  _   | Surcharge:   ____________ |
| Liability:             _____________      |  _   *---------------------------*
| Inland Marine:         _____________      |  _                               |
| Farm:                  _____________      |  _                               |
| Farm Liability:        _____________      |  _                               |
| IRPM:                  _____________      |                                  |
| Terrorism:             _____________      |                                  |
*-------------------------------------------*----------------------------------*
|                                                 _______________ ____________ |
|                                                      __________ ____________ |
| Total Policy Premium:  _____________  _________      __________ ____________ |
| Surcharge:             _____________          Unearned Premium: ____________ |
*------------------------------------------------------------------------------*
| State: __  _______________                                                   |
*------------------------------------------------------------------------------*

%%

components

Fields
101     FUNCTION/noecho/showasguidetext ;
301     begin
        if function = "ADD" then
            begin
            sfpmaster:policy_no = g_policy_no
            sfpmaster:pol_year = g_year
            sfpmaster:end_sequence = g_end_sequence
            end
        end
        sfpMASTER:policy_NO/displayonly  ;
302     sfpmaster:pol_year/displayonly ;
303     sfpmaster:end_sequence/displayonly;
401     sfpname:name[1]/displayonly ;

601     Begin
        access sfpname,
           set sfpname:policY_no    = g_policy_no,
               sfpname:pol_year     = g_year,
               sfpname:end_sequence = g_end_sequence, generic

        access sfscompany,
           set sfscompany:company_Id = sfpname:company_id, generic

        access sfsline,
           set sfsline:company_id       = sfpname:company_id,
               sfsline:line_of_business = sfpname:line_of_business,
               sfsline:lob_subline      = "00", generic

        l_line_of_business = sfsline:rating_line_of_business
        do check_state
        do cleanup_sfplocation
        if g_inquiry <> "Y" then
            begin
            if sfpmaster:trans_code one of 11, 16 then
                begin
                l_total_1 = sfpmaster:total[1]
                l_total_2 = sfpmaster:total[2]
                l_total_3 = sfpmaster:total[3]
                l_total_4 = sfpmaster:total[4]
                l_total_5 = sfpmaster:total[5]
                l_total_6 = sfpmaster:total[6]
                l_total_7 = sfpmaster:total[7]
                l_total_9 = sfpmaster:terrorism_premium
                l_final_total = sfpmaster:total[18]
                l_surcharge = sfpmaster:surcharge
                do amt_due
                if sfscompany:include_installment_rating = "Y" then
                    i_amt_due = i_amt_due + i_installment_amt_due +
                                i_surcharge_amt_due
                else
                    i_amt_due = i_amt_due + i_surcharge_amt_due
                end
            else
                begin
                Access sfpNAME,
                   Set sfpNAME:policy_NO    = sfpMASTER:policy_NO,
                       sfpname:pol_year     = sfpmaster:pol_year,
                       sfpname:end_sequence = sfpmaster:end_sequence, Generic

                if function not one of "CHANGE", "LINE_OF_BUSINESS_SCREEN" then
                    begin

                    do batch_programs

                    end

                Do TOTALS
                if sfpmaster:trans_code one of 10, 14 then
                    begin
                    do access_arspayplan
                    if arspayplan:manual_payment_plan = 0 then
                        Do INSTALLMENT
                    end
                Do FINAL_TOTAL
                do amt_due
                if sfscompany:include_installment_rating = "Y" then
                    i_amt_due = i_amt_due + i_installment_amt_due + i_surcharge_amt_due
                else
                    i_amt_due = i_amt_due + i_surcharge_amt_due
                end
            end
        else
            begin
            l_total_1     = sfpmaster:total[1]
            l_total_2     = sfpmaster:total[2]
            l_total_3     = sfpmaster:total[3]
            l_total_4     = sfpmaster:total[4]
            l_total_5     = sfpmaster:total[5]
            l_total_6     = sfpmaster:total[6]
            l_total_7     = sfpmaster:total[7]
            l_total_9     = sfpmaster:terrorism_premium
            l_total_10    = sfpmaster:total[10]
            l_final_total = sfpmaster:total[18]
            l_surcharge   = sfpmaster:surcharge
            i_amt_due     = sfpmaster:amt_due_total[20]
            l_irpm_total  = sfpmaster:total[8]
            end
        End
        L_TOTAL_1/displayonly/mask="ZZ,ZZZ,ZZZ.99";
701     L_TOTAL_2/displayonly/mask="ZZ,ZZZ,ZZZ.99";
801     L_TOTAL_3/displayonly/mask="ZZ,ZZZ,ZZZ.99";
901     L_TOTAL_4/displayonly/mask="ZZ,ZZZ,ZZZ.99";
1001    L_TOTAL_5/displayonly/mask="ZZ,ZZZ,ZZZ.99";
1101    L_TOTAL_6/displayonly/mask="ZZ,ZZZ,ZZZ.99";
1201    L_TOTAL_7/displayonly/mask="ZZ,ZZZ,ZZZ.99";
1301    l_total_10/displayonly/mask="ZZ,ZZZ,ZZZ.99" ;
1401    l_irpm_total/displayonly/mask="ZZ,ZZZ,ZZZ.99-" ;
1501    l_total_9/displayonly/mask="ZZ,ZZZ,ZZZ.99";

602     l_option_1/checkbox/values="0,1"
        if ((l_option_1 = 1 and
           sfpmaster:trans_code not one of 11, 16) or
           (l_option_1 = 1 and
           g_inquiry = "Y")) then
            begin
            if function one of "ADD" and
               sfpmaster:form_of_business = "" then
                begin
                display modal screen "cppmtmso210"
                with initial function "ADD"
                sfpmaster:form_of_business = g_fob
                sfpmaster:fob_description = g_fob_description
                end
            l_screen = "cppmtmso002"
            function = "Up"
            end
        hide if l_option_2 = 1 or
                l_option_3 = 1 or
                l_option_4 = 1 or
                l_option_5 = 1 or
                l_option_6 = 1 or
                l_option_7 = 1 or
                l_option_8 = 1 or
                l_option_9 = 1 ;
702     l_option_2/checkbox/values="0,1"
        if ((l_option_2 = 1 and
           sfpmaster:trans_code not one of 11, 16) or
           (l_option_2 = 1 and
           g_inquiry = "Y")) then
            begin
            if function one of "ADD" and
               sfpmaster:form_of_business = "" then
                begin
                display modal screen "cppmtmso210"
                with initial function "ADD"
                sfpmaster:form_of_business = g_fob
                sfpmaster:fob_description = g_fob_description
                end
            l_screen = "cppmtmso003"
            function = "Up"
            end
        hide if l_option_1 = 1 or
                l_option_3 = 1 or
                l_option_4 = 1 or
                l_option_5 = 1 or
                l_option_6 = 1 or
                l_option_7 = 1 or
                l_option_8 = 1 or
                l_option_9 = 1 ;
802     l_option_3/checkbox/values="0,1"
        if ((l_option_3 = 1 and
           sfpmaster:trans_code not one of 11, 16) or
           (l_option_3 = 1 and
           g_inquiry = "Y")) then
            begin
            if function one of "ADD" and
               sfpmaster:form_of_business = "" then
                begin
                display modal screen "cppmtmso210"
                with initial function "ADD"
                sfpmaster:form_of_business = g_fob
                sfpmaster:fob_description = g_fob_description
                end
            if sfpname:line_of_business one of 38 then
                l_screen_1 = "cppmtmso004a"
            else
                l_screen_1 = "cppmtmso004"
            function = "func1"
            end
        hide if l_option_1 = 1 or
                l_option_2 = 1 or
                l_option_4 = 1 or
                l_option_5 = 1 or
                l_option_6 = 1 or
                l_option_7 = 1 or
                l_option_8 = 1 or
                l_option_9 = 1 ;
902     l_option_4/checkbox/values="0,1"
        if ((l_option_4 = 1 and
           sfpmaster:trans_code not one of 11, 16) or
           (l_option_4 = 1 and
           g_inquiry = "Y")) then
            begin
            if function one of "ADD" and
               sfpmaster:form_of_business = "" then
                begin
                display modal screen "cppmtmso210"
                with initial function "ADD"
                sfpmaster:form_of_business = g_fob
                sfpmaster:fob_description = g_fob_description
                end
            l_screen = "cppmtmso005"
            function = "Up"
            end
        hide if l_option_1 = 1 or
                l_option_2 = 1 or
                l_option_3 = 1 or
                l_option_5 = 1 or
                l_option_6 = 1 or
                l_option_7 = 1 or
                l_option_8 = 1 or
                l_option_9 = 1 ;
1002    l_option_5/checkbox/values="0,1"
        if ((l_option_5 = 1 and
           sfpmaster:trans_code not one of 11, 16) or
           (l_option_5 = 1 and
           g_inquiry = "Y")) then
            begin
            if function one of "ADD" and
               sfpmaster:form_of_business = "" then
                begin
                display modal screen "cppmtmso210"
                with initial function "ADD"
                sfpmaster:form_of_business = g_fob
                sfpmaster:fob_description = g_fob_description
                end
            l_screen = "cppmtmso008"
            function = "Up"
            end
        hide if l_option_1 = 1 or
                l_option_2 = 1 or
                l_option_3 = 1 or
                l_option_4 = 1 or
                l_option_6 = 1 or
                l_option_7 = 1 or
                l_option_8 = 1 or
                l_option_9 = 1 ;
1102    l_option_6/checkbox/values="0,1"
        if ((l_option_6 = 1 and
           sfpmaster:trans_code not one of 11, 16) or
           (l_option_6 = 1 and
           g_inquiry = "Y")) then
            begin
            if function one of "ADD" and
               sfpmaster:form_of_business = "" then
                begin
                display modal screen "cppmtmso210"
                with initial function "ADD"
                sfpmaster:form_of_business = g_fob
                sfpmaster:fob_description = g_fob_description
                end
            l_screen = "cppmtmso007"
            function = "Up"
            end
        hide if l_option_1 = 1 or
                l_option_2 = 1 or
                l_option_3 = 1 or
                l_option_4 = 1 or
                l_option_5 = 1 or
                l_option_7 = 1 or
                l_option_8 = 1 or
                l_option_9 = 1 ;
1202    l_option_7/checkbox/values="0,1"
        if ((l_option_7 = 1 and
           sfpmaster:trans_code not one of 11, 16) or
           (l_option_7 = 1 and
           g_inquiry = "Y")) then
            begin
            if function one of "ADD" and
               sfpmaster:form_of_business = "" then
                begin
                display modal screen "cppmtmso210"
                with initial function "ADD"
                sfpmaster:form_of_business = g_fob
                sfpmaster:fob_description = g_fob_description
                end
            l_screen = "cppmtmso006"
            function = "Up"
            end
        hide if l_option_1 = 1 or
                l_option_2 = 1 or
                l_option_3 = 1 or
                l_option_4 = 1 or
                l_option_5 = 1 or
                l_option_6 = 1 or
                l_option_8 = 1 or
                l_option_9 = 1 ;
1302    l_option_10/checkbox/values="0,1"
        if ((l_option_10 = 1 and
           sfpmaster:trans_code not one of 11, 16) or
           (l_option_10 = 1 and
           g_inquiry = "Y")) then
            begin
            if function one of "ADD" and
               sfpmaster:form_of_business = "" then
                begin
                display modal screen "cppmtmso210"
                with initial function "ADD"
                sfpmaster:form_of_business = g_fob
                sfpmaster:fob_description = g_fob_description
                end
            l_screen = "cppmtmso697"
            function = "Up"
            end
        hide if l_option_1 = 1 or
                l_option_2 = 1 or
                l_option_3 = 1 or
                l_option_4 = 1 or
                l_option_5 = 1 or
                l_option_6 = 1 or
                l_option_8 = 1 or
                l_option_9 = 1 ;

1901    L_FINAL_TOTAL/displayonly/mask="ZZ,ZZZ,ZZZ.99";
1902    L_PRO_RATE/displayonly/showasguidetext
        Hide If L_EFF_DATE_1 = sfpNAME:EXP_DATE ;
2001    L_SURCHARGE/displayonly/mask="$$$$$$9.99";

703     L_PREVIOUS_TOTAL/displayonly/mask="$$$$$$9.99" ;
703     Begin
            L_END_SEQUENCE = G_END_SEQUENCE - 1
            Access SFPMASTER_alias, Set SFPMASTER_alias:POLICY_NO = sfpmaster:POLICY_NO,
                                        SFPMASTER_alias:POL_YEAR = sfpmaster:pol_YEAR,
                                        SFPMASTER_alias:END_SEQUENCE = L_END_SEQUENCE, Generic

            L_PREVIOUS_TOTAL = SFPMASTER_alias:TOTAL[1] +
                               SFPMASTER_alias:TOTAL[2] +
                               sfpmaster_alias:total[3] +
                               sfpmaster_alias:total[4] +
                               sfpmaster_alias:total[5] +
                               sfpmaster_alias:total[6] +
                               sfpmaster_alias:total[7] +
                               sfpmaster_alias:total[8] +
                               sfpmaster_alias:total[10] +
                               sfpmaster_alias:other_totals[17] +
                               sfpmaster_alias:other_totals[18] +
                               sfpmaster_alias:other_totals[19] +
                               sfpmaster_alias:terrorism_premium
            L_PREVIOUS_INSTALLMENT = SFPMASTER_alias:INSTALLMENT_CHARGE
            L_PREVIOUS_SURCHARGE = SFPMASTER_alias:SURCHARGE
        End
        L_PREVIOUS_TOTAL/mask="$$$$$$9.99"/displayonly ;
803     L_PREVIOUS_INSTALLMENT/displayonly/mask="$$$$$$9.99";
903     L_PREVIOUS_SURCHARGE/displayonly/mask="$$$$$$9.99" ;

1701    L_PRO_RATA_WORDING/displayonly/showasguidetext
        Hide If I_PRO_RATA = 0 ;
1702    I_PRO_RATA/displayonly/showasguidetext
        Hide If I_PRO_RATA = 0;
1801    Begin
        If SFPNAME:BILL_PLAN = "AC" And
           SFPMASTER:TOTAL[1] <> 0 Then
            I_BILLED = "Billed:"
        End
        I_BILLED/displayonly/showasguidetext ;
1802    Begin
        If SFPNAME:BILL_PLAN = "AC" And
           SFPMASTER:TOTAL[1] <> 0 Then
            I_UNBILLED = "Unbilled:"
        End
        I_UNBILLED/displayonly/showasguidetext  ;
1903    I_BILLED_PREMIUM/displayonly/mask="$$$$$$$9.99"/showasguidetext
        Hide If I_BILLED_PREMIUM = 0;
1904    I_UNBILLED_PREMIUM/displayonly/mask="$$$$$$$9.99"/showasguidetext
        Hide If I_UNBILLED_PREMIUM = 0 ;
2002    I_AMT_DUE/displayonly/mask="$$$$$$$9.99-";
2201    sfpmaster:state/displayonly ;
2202    sfsstate:description ;

}

}

screen exit
g_class_code = 0

if function not one of "SFP", "J", "O" and
   sfpmaster:trans_code one of 11, 16 and
   g_inquiry <> "Y" then
    function = "redisplay"

Procedure Definition

procedure check_state

begin
access cppgeneral,
   set cppgeneral:policy_no    = g_policy_no,
       cppgeneral:pol_year     = g_year,
       cppgeneral:end_sequence = g_end_sequence, generic

if cppgeneral:policy_no    = g_policy_no and
   cppgeneral:pol_Year     = g_year and
   cppgeneral:end_sequence = g_end_sequence then
  l_state = cppgeneral:state

access cppliability,
   set cppliability:policy_no    = g_policy_no,
       cppliability:pol_Year     = g_year,
       cppliability:end_sequence = g_end_sequence, generic

if cppliability:policy_no    = g_policy_no and
   cppliability:pol_year     = g_year and
   cppliability:end_sequence = g_end_sequence and
   l_state = 0 then
    l_state = cppliability:state

access cppinland, set cppinland:policy_no = g_policy_no,
                      cppinland:pol_year = g_year,
                      cppinland:end_sequence = g_end_sequence, generic

if cppinland:policy_no = g_policy_no and
   cppinland:pol_year = g_year and
   cppinland:end_sequence = g_end_sequence and
   l_state = 0 then
    l_state = cppinland:state

access cppfarm, set cppfarm:policy_no = g_policy_no,
                    cppfarm:pol_year = g_year,
                    cppfarm:end_sequence = g_end_sequence, generic

if cppfarm:policy_no = g_policy_no and
   cppfarm:pol_Year = g_year and
   cppfarm:end_sequence = g_end_sequence and
   l_state = 0 then
    l_state = cppfarm:state

access cppfarmliab, set cppfarmliab:policy_no = g_policy_no,
                        cppfarmliab:pol_year = g_year,
                        cppfarmliab:end_sequence = g_end_sequence, generic

if cppfarmliab:policy_no = g_policy_no and
   cppfarmliab:pol_Year = g_year and
   cppfarmliab:end_sequence = g_end_sequence and
   l_state = 0 then
    l_state = cppfarmliab:state

if sfpmaster:state = 0 or
   sfpmaster:state <> l_state then
    begin
    access sfpmaster_alias, set sfpmaster_alias:policy_no = g_policy_no,
                                sfpmaster_alias:pol_year = g_year,
                                sfpmaster_alias:end_Sequence = g_end_Sequence, exact

    if sfpmaster_alias:policy_no = g_policy_no and
       sfpmaster_alias:pol_year = g_year and
       sfpmaster_alias:end_sequence = g_End_sequence then
        begin
        change sfpmaster_alias
            begin
            sfpmaster_alias:state = l_state
            end
        end

    end

end

Procedure Batch_programs
Begin
message("Please Wait, Processing Occurring")

Access cppGENERAL, Set cppGENERAL:policy_NO = sfpMASTER:policy_NO,
                       cppgeneral:pol_year = sfpmaster:pol_year,
                       cppgeneral:end_sequence = sfpmaster:end_sequence, Generic

If cppGENERAL:policy_NO = sfpMASTER:policy_NO and
   cppgeneral:pol_year = sfpmaster:pol_year and
   cppgeneral:end_sequence = sfpmaster:end_sequence Then
    Begin
    L_COMMANDLINE = Str(sfpMASTER:policy_NO,9) + str(sfpmaster:pol_year,4) +
                    str(sfpmaster:end_sequence,4)
    Proc("cli csbatch cppup002 %s",L_COMMANDLINE)/noconsole
    Proc("cli csbatch cppup02a %s",L_COMMANDLINE)/noconsole
    Proc("cli csbatch cppup02b %s",L_COMMANDLINE)/noconsole
    if cppgeneral:blanket = 1 and
       sfscompany:boiler_rating <> 4 then
        begin
        Proc("cli csbatch cppup02d %s",L_COMMANDLINE)/noconsole
        Proc("cli csbatch cppup02e %s",L_COMMANDLINE)/noconsole
        end
    Do BOILER_MINIMUM
    do property_minimum
    L_STATE = cppGENERAL:STATE
    End

Access cppBUSINESS, Set cppBUSINESS:policy_NO = sfpMASTER:policy_NO,
                        cppbusiness:pol_year = sfpmaster:pol_year,
                        cppbusiness:end_sequence = sfpmaster:end_sequence, Generic

If cppBUSINESS:policy_NO = sfpMASTER:policy_NO and
   cppbusiness:pol_year = sfpmaster:pol_year and
   cppbusiness:end_sequence = sfpmaster:end_sequence Then
    Begin
    L_COMMANDLINE = Str(sfpMASTER:policy_NO,9) + str(sfpmaster:pol_year,4) +
                    str(sfpmaster:end_sequence,4)
    Proc("cli csbatch cppup003 %s",L_COMMANDLINE)/noconsole
    if cppbusiness:blanket = 1 then
        begin
        Proc("cli csbatch cppup03a %s",L_COMMANDLINE)/noconsole
        end
    End

if sfscompany:boiler_rating = 4 then
    begin
    L_COMMANDLINE = Str(sfpMASTER:policy_NO,9) + str(sfpmaster:pol_year,4) +
                    str(sfpmaster:end_sequence,4)
    proc("cli csbatch cppup02f %s",l_commandline)/noconsole
    Do BOILER_MINIMUM
    end

Access cppGLASS, Set cppGLASS:policy_NO = sfpMASTER:policy_NO,
                     cppglass:pol_year = sfpmaster:pol_year,
                     cppglass:end_sequence = sfpmaster:end_sequence, Generic

If cppGLASS:policy_NO = sfpMASTER:policy_NO and
   cppglass:pol_year = sfpmaster:pol_year and
   cppglass:end_sequence = sfpmaster:end_sequence Then
    Begin
    L_COMMANDLINE = Str(sfpMASTER:policy_NO,9) + str(sfpmaster:pol_year,4) +
                    str(sfpmaster:end_sequence,4)
    if sfpname:line_of_business one of 38 then
        Proc("cli csbatch cppup004a %s",L_COMMANDLINE)/noconsole
    else
        Proc("cli csbatch cppup004 %s",L_COMMANDLINE)/noconsole
    End

Access cppLIABILITY, Set cppLIABILITY:policy_NO = sfpMASTER:policy_NO,
                         cppliability:pol_year = sfpmaster:pol_year,
                         cppliability:end_sequence = sfpmaster:end_sequence, Generic

If cppLIABILITY:policy_NO = sfpMASTER:policy_NO and
   cppliability:pol_year = sfpmaster:pol_year and
   cppliability:end_sequence = sfpmaster:end_sequence Then
    Begin
    L_COMMANDLINE = Str(sfpMASTER:policy_NO,9) + str(sfpmaster:pol_year,4) +
                    str(sfpmaster:end_sequence,4)
    Proc("cli csbatch cppup008 %s",L_COMMANDLINE)/noconsole
    L_STATE = cppLIABILITY:STATE
    End

Access cppfarm, Set cppfarm:policy_NO = sfpMASTER:policy_NO,
                    cppfarm:pol_year = sfpmaster:pol_year,
                    cppfarm:end_sequence = sfpmaster:end_sequence, Generic

If cppfarm:policy_NO = sfpMASTER:policy_NO and
   cppfarm:pol_year = sfpmaster:pol_year and
   cppfarm:end_sequence = sfpmaster:end_sequence Then
    Begin
    L_COMMANDLINE = Str(sfpMASTER:policy_NO,9) + str(sfpmaster:pol_year,4) +
                    str(sfpmaster:end_sequence,4)
    Proc("cli csbatch cppup006 %s",L_COMMANDLINE)/noconsole
    End

access cppfarmliab, set cppfarmliab:policy_no = sfpmaster:policy_no,
                        cppfarmliab:pol_year = sfpmaster:pol_year,
                        cppfarmliab:end_sequence = sfpmaster:end_sequence, generic

if cppfarmliab:policy_no = sfpmaster:policy_no and
   cppfarmliab:pol_Year = sfpmaster:pol_Year and
   cppfarmliab:end_sequence = sfpmaster:end_sequence then
    begin
    -- farm liability
    L_COMMANDLINE = Str(SFPMASTER:policy_NO,9) + str(sfpmaster:pol_year,4) +
                    str(sfpmaster:end_sequence,4)
    Proc("cli csbatch cppup06a %s",L_COMMANDLINE)/noconsole
    End

if cppfarm:policy_no = sfpmaster:policy_no and
   cppfarm:pol_Year = sfpmaster:pol_Year and
   cppfarm:end_sequence = sfpmaster:end_sequence then
    begin
    l_state = cppfarm:state
    do farm_minimum
    end

message("                                              ")
end

procedure cleanup_sfplocation
begin
Access sfpLOCATION, Set sfpLOCATION:policy_NO = sfpMASTER:policy_NO,
                        sfplocation:pol_year = sfpmaster:pol_year ,
                        sfplocation:end_sequence = sfpmaster:End_sequence , generic

while sfplocation:policy_no = sfpmaster:policy_no and
      sfplocation:pol_year = sfpmaster:pol_year and
      sfplocation:end_sequence = sfpmaster:end_sequence
        begin
        change sfplocation
            begin
            sfplocation:premium[10] = 0
            end

        next sfplocation
        end

end

procedure totals
begin
  Access cppGENERAL,
     Set cppGENERAL:policy_NO    = sfpMASTER:policy_NO,
         cppgeneral:pol_year     = sfpmaster:pol_year,
         cppgeneral:end_sequence = sfpmaster:end_sequence, Generic

L_TOTAL_1 = 0
l_ec_vmm_total = 0
l_fire_total = 0
l_other_total = 0
l_boiler_total = 0
l_property_total_1 = 0
l_property_total = 0
l_optional_coverages = 0
l_location_premium_11 = 0
l_prem_no = cppgeneral:prem_no
l_build_no = cppgeneral:build_no
l_rate_type = cppgeneral:rate_type

While cppGENERAL:policy_NO    = sfpMASTER:policy_NO and
      cppgeneral:pol_year     = sfpmaster:pol_year and
      cppgeneral:end_sequence = sfpmaster:end_sequence
  Begin
    l_commandline_1 = str(cppgeneral:policy_no,9) + str(cppgeneral:pol_year,4) +
                      str(cppgeneral:end_sequence,4) + str(cppgeneral:prem_no,4) +
                      str(cppgeneral:build_no,4) + str(cppgeneral:rate_type,2)
    proc("cli csbatch cppup011c %s",l_commandline_1)/noconsole

    if cppgeneral:prem_no <> l_prem_no or
       cppgeneral:build_no <> l_build_no then
      begin
        l_prem_no = cppgeneral:prem_no
        l_build_no = cppgeneral:build_no
        l_rate_type = cppgeneral:rate_type
      end

    access sfpmaster_alias,
       set sfpmaster_alias:policy_no    = sfpmaster:policy_no,
           sfpmaster_alias:pol_year     = sfpmaster:pol_year,
           sfpmaster_alias:end_sequence = sfpmaster:end_sequence, generic

    if sfpmaster_alias:state = 0 then
      begin
      if sfpmaster_alias:policy_no = sfpmaster:policy_no and
         sfpmaster_alias:pol_year = sfpmaster:pol_Year and
         sfpmaster_alias:end_sequence = sfpmaster:end_sequence then
          begin
          change sfpmaster_alias
                begin
                sfpmaster_alias:state = cppgeneral:state
                end
          end
      end

    access cppproperty,
       set cppproperty:policy_no    = cppgeneral:policy_no,
           cppproperty:pol_year     = cppgeneral:pol_year,
           cppproperty:end_sequence = cppgeneral:end_sequence,
           cppproperty:prem_no      = cppgeneral:prem_no,
           cppproperty:build_no     = cppgeneral:build_no, generic

    if l_prem_no = cppgeneral:prem_no and
       l_build_no = cppgeneral:build_no and
       l_rate_type = cppgeneral:rate_type then
        begin
        L_OPTIONAL_COVERAGES = cppPROPERTY:AR_PREM +
                           cppPROPERTY:INFLATION_PREMIUM[1] +
                           cppproperty:inflation_premium[2] +
                           cppPROPERTY:PEAK_SEASON_PREM +
                           cppPROPERTY:GLASS_PREM +
                           cppPROPERTY:SIGNS_ATTACHED_PREM +
                           cppPROPERTY:SIGNS_NOT_ATTACHED_PREM +
                           cppPROPERTY:BUILDING_CODE_PREM +
                           cppPROPERTY:LOSS_UTILITY_PREM +
                           cppPROPERTY:MECHANICAL_BREAKDOWN_PREM +
                           cppPROPERTY:DEBRIS_REMOVAL_PREM +
                           cppPROPERTY:OFF_PREM_OTHER_LOC_PREM +
                           cppPROPERTY:OFF_PREM_IN_TRANSIT_PREM +
                           cppPROPERTY:OUTDOOR_PROPERTY_PREM +
                           cppPROPERTY:PERSONAL_EFFECTS_PREM +
                           cppPROPERTY:PERSONAL_PROPERTY_OTHER_PREM +
                           cppPROPERTY:VALUABLE_PAPERS_PREM +
                           cppPROPERTY:PRECIOUS_METALS_PREM +
                           cppPROPERTY:WATER_BACKUP_PREMIUM +
                           cppproperty:loss_assessment_prem +
                           cppproperty:mcp505_premium
        end
    else
      begin
        l_optional_coverages = 0
      end

    if cppproperty:policy_no    = cppgeneral:policy_no and
       cppproperty:pol_year     = cppgeneral:pol_year and
       cppproperty:end_sequence = cppgeneral:end_sequence and
       cppproperty:prem_no      = cppgeneral:prem_no and
       cppproperty:build_no     = cppgeneral:build_no then
      {
        change cppproperty
          begin
            cppproperty:total_premium = l_optional_coverages
          end
      }

    l_end_premium = 0
    l_lob_end_code = "P"
    l_prem_no = cppgeneral:prem_no
    l_build_no = cppgeneral:build_no
    if sfscompany:boiler_rating = 4 then
        do access_sfpend_1
    else
        begin
        if l_first_end = "Y" then
            begin
            l_first_end = "N"
            l_prem_no = 0
            l_build_no = 0
            do access_sfpend
            l_prem_no = cppgeneral:prem_no
            l_build_no = cppgeneral:build_no
            do access_sfpend
            end
        else
            begin
            l_prem_no = cppgeneral:prem_no
            l_build_no = cppgeneral:build_no
            do access_sfpend
            end
        end

--    do access_sfpmisc

    L_TOTAL_1 = cppGENERAL:TOTAL_PREMIUM[1] +
                cppGENERAL:TOTAL_PREMIUM[2] +
                L_TOTAL_1 +
                l_optional_coverages +
                l_end_premium
    l_fire_total = l_fire_total +
                   cppgeneral:premium[1] +
                   cppgeneral:premium[7] +
                   l_optional_coverages +
                   l_end_premium
    l_ec_vmm_total = l_ec_vmm_total +
                     cppgeneral:premium[2] +
                     cppgeneral:premium[3] +
                     cppgeneral:premium[8] +
                     cppgeneral:premium[9]
    if sfscompany:boiler_rating <> 4 then
        l_boiler_total = l_boiler_total +
                         cppproperty:boiler_premium[1] +
                         cppproperty:boiler_premium[2]
    else
        begin
        if l_prem_no = cppgeneral:prem_no and
           l_build_no = cppgeneral:build_no and
           l_rate_type = cppgeneral:rate_type then
            begin
            l_boiler_total = l_boiler_total +
                             cppproperty:boiler_premium[1] +
                             cppproperty:boiler_premium[2]
            end
        end

    if sfscompany:boiler_rating = 4 then
        begin
        if l_prem_no = cppgeneral:prem_no and
           l_build_no = cppgeneral:build_no and
           l_rate_type = cppgeneral:rate_type then
            begin
            l_total_1 = l_total_1 +
                        cppproperty:boiler_premium[1] +
                        cppproperty:boiler_premium[2]
            end
        end

    l_county = cppgeneral:county
    l_prem_no = cppgeneral:prem_no
    l_build_no = cppgeneral:build_no
    l_location_premium_11 = ((cppgeneral:total_premium[1] -
                            cppproperty:boiler_premium[1]) +
                            (cppgeneral:total_premium[2] -
                            cppproperty:boiler_premium[2]) +
                            l_optional_coverages)
    do update_sfplocation
    l_other_total = l_other_total +
                    cppgeneral:premium[4] +
                    cppgeneral:premium[5] +
                    cppgeneral:premium[6] +
                    cppgeneral:premium[10] +
                    cppgeneral:premium[11] +
                    cppgeneral:premium[12]
    l_property_total_1 = l_property_total_1 +
                         cppgeneral:premium[2] +
                         cppgeneral:premium[3] +
                         cppgeneral:premium[4] +
                         cppgeneral:premium[5] +
                         cppgeneral:premium[6] +
                         cppgeneral:premium[8] +
                         cppgeneral:premium[9] +
                         cppgeneral:premium[10] +
                         cppgeneral:premium[11] +
                         cppgeneral:premium[12]

    l_property_total = l_property_total +
                       l_ec_vmm_total +
                       l_other_total +
                       l_boiler_total +
                       l_fire_total

--    if l_property_total <> l_total_1 then
--        l_fire_total = (l_fire_total + (l_total_1 - l_property_total))

    Next cppGENERAL
    End



l_lob_end_code = "P"
do access_sfpmisc
L_TOTAL_1 = L_TOTAL_1 +
            l_misc_premium
l_fire_total = l_fire_total +
               l_misc_premium

Access cppBUSINESS, Set cppBUSINESS:policy_NO = sfpMASTER:policy_NO,
                        cppbusiness:pol_year = sfpmaster:pol_year,
                        cppbusiness:end_sequence = sfpmaster:end_sequence, Generic

L_TOTAL_2 = 0
l_bi_total = l_total_1
l_bi_total_1 = 0
l_location_premium_11 = 0
While cppBUSINESS:policy_NO = sfpMASTER:policy_NO and
      cppbusiness:pol_year = sfpmaster:pol_year and
      cppbusiness:end_sequence = sfpmaster:end_sequence
    Begin
    l_lob_end_code = "B"
    l_prem_no = cppbusiness:prem_no
    l_build_no = cppbusiness:build_no
    l_end_premium = 0
    do access_sfpend
--    do access_sfpmisc

    L_TOTAL_2 = cppBUSINESS:TOTAL_PREMIUM + L_TOTAL_2 + l_end_premium-- +
--                l_misc_premium
    l_prem_no = cppbusiness:prem_no
    l_build_no = cppbusiness:build_no
    l_location_premium_11 = cppbusiness:total_premium -
                            cppbusiness:boiler_premium
    do update_sfplocation
    l_bi_total = l_bi_total + cppbusiness:total_premium
    l_ec_vmm_total = l_ec_vmm_total +
                     cppbusiness:bi_premium[2] +
                     cppbusiness:bi_premium[3]
    l_other_total = l_other_total +
                    cppbusiness:bi_premium[4] +
                    cppbusiness:bi_premium[5] +
                    cppbusiness:bi_premium[6]
    l_boiler_total = l_boiler_total +
                     cppbusiness:boiler_premium
    l_bi_total_1 = l_bi_total_1 +
                   cppbusiness:bi_premium[2] +
                   cppbusiness:bi_premium[3] +
                   cppbusiness:bi_premium[4] +
                   cppbusiness:bi_premium[5] +
                   cppbusiness:bi_premium[6] +
                   cppbusiness:boiler_premium
    l_fire_total = l_fire_total +
                   cppbusiness:bi_premium[1]
    l_property_total = l_property_total +
                       l_ec_vmm_total +
                       l_other_total +
                       l_boiler_total +
                       l_fire_total
--    if l_property_total <> l_bi_total then
--        l_fire_total = (l_fire_total + (l_bi_total - l_property_total))

    Next cppBUSINESS
    End

l_lob_end_code = "B"
do access_sfpmisc
L_TOTAL_2 = L_TOTAL_2 +
            l_misc_premium

Access cppGLASS, Set cppGLASS:policy_NO = sfpMASTER:policy_NO,
                     cppglass:pol_year = sfpmaster:pol_year,
                     cppglass:end_sequence = sfpmaster:end_sequence, Generic

L_TOTAL_3 = 0
l_location_premium_11 = 0
While cppGLASS:policy_NO = sfpMASTER:policy_NO and
      cppglass:poL_year = sfpmaster:pol_year and
      cppglass:end_sequence = sfpmaster:end_sequence
    Begin
    l_lob_end_code = "G"
    l_prem_no = cppglass:prem_no
    l_build_no = cppglass:build_no
    l_end_premium = 0
    do access_sfpend
--    do access_sfpmisc

    L_TOTAL_3 = cppGLASS:GLASS_PREMIUM + L_TOTAL_3 + l_end_premium --+
--                l_misc_premium
    l_prem_no = cppglass:prem_no
    l_build_no = cppglass:build_no
    l_location_premium_11 = cppglass:glass_premium
    do update_sfplocation

    Next cppGLASS
    End

l_lob_end_code = "G"
do access_sfpmisc
L_TOTAL_3 = L_TOTAL_3 +
            l_misc_premium

Access cppCRIME1, Set cppCRIME1:policy_NO = sfpMASTER:policy_NO,
                      cppcrime1:pol_year = sfpmaster:pol_year,
                      cppcrime1:end_sequence = sfpmaster:end_sequence, Generic

L_TOTAL_4 = 0
l_location_premium_11 = 0
While cppCRIME1:policy_NO = sfpMASTER:policy_NO and
      cppcrime1:pol_year = sfpmaster:pol_year and
      cppcrime1:end_sequence = sfpmaster:end_sequence
    Begin
    l_lob_end_code = "C"
    l_prem_no = cppcrime1:prem_no
    l_build_no = cppcrime1:build_no
    l_end_premium = 0
    do access_sfpend
--    do access_sfpmisc

    L_TOTAL_4 = cppCRIME1:PREMIUM +
                L_TOTAL_4 +
                l_end_premium --+
--                l_misc_premium
    l_prem_no = cppcrime1:prem_no
    l_build_no = cppcrime1:build_no
    l_location_premium_11 = cppcrime1:premium
    do update_sfplocation

    Next cppCRIME1
    End

l_lob_end_code = "C"
do access_sfpmisc
L_TOTAL_4 = L_TOTAL_4 +
            l_misc_premium

Access cppLIABILITY, Set cppLIABILITY:policy_NO = sfpMASTER:policy_NO,
                         cppliability:pol_year = sfpmaster:pol_year,
                         cppliability:end_sequence = sfpmaster:end_sequence, Generic

l_total_5 = 0
l_prem_total = 0
l_prod_total = 0
l_liability_total = 0
l_location_premium_11 = 0
While cppLIABILITY:policy_NO = sfpMASTER:policy_NO and
      cppliability:pol_year = sfpmaster:pol_year and
      cppliability:end_sequence = sfpmaster:end_sequence
    Begin
    access sfpmaster_alias, set sfpmaster_alias:policy_no = sfpmaster:policy_no,
                                sfpmaster_alias:pol_year = sfpmaster:pol_year,
                                sfpmaster_alias:end_sequence = sfpmaster:end_sequence, generic

    if sfpmaster_alias:state = 0 then
        begin
        change sfpmaster_alias
            begin
            sfpmaster_alias:state = cppliability:state
            end
        end
    if cppliability:minimum_premium[1] = 0 then
        begin
        l_total_5 = l_total_5 + cppliability:prem[1] + cppliability:prem[2] +
                    cppliability:total_endorsements + cppliability:total_misc +
                    cppliability:independent_contractor_premium
        l_prem_total = cppliability:prem[1] + l_prem_total
        l_prod_total = cppliability:prem[2] + l_prod_total
        l_mp_5 = "N"
        end
    else
        begin
        l_prem_total = cppliability:prem[1] + l_prem_total
        l_prod_total = cppliability:prem[2] + l_prod_total
        l_total_5 = cppliability:minimum_premium[1]
        l_mp_5 = "Y"
        end

    l_prem_total = l_prem_total + cppliability:total_endorsements +
                   cppliability:total_misc +
                   cppliability:independent_contractor_premium

    l_liability_total = l_liability_total +
                        l_prem_total +
                        l_prod_total

    l_county = cppliability:county
    l_prem_no = cppliability:prem_no
    l_build_no = cppliability:build_no
    l_location_premium_11 = l_prem_total + l_prod_total
    do update_sfplocation
    if cppliability:policy_no = g_policy_no and
       cppliability:pol_year = g_year and
       cppliability:end_sequence = g_end_sequence then
        begin
        change cppliability
            begin
            cppliability:total_premium = l_total_5 + cppliability:total_premium
            end
        end

    Next cppLIABILITY
    End

if l_mp_5 = "Y" then
    begin
    l_min_total = l_prem_total + l_prod_total
    l_prem_total = ((l_total_5 - l_min_total) + l_prem_total)
    end

/*l_lob_end_code = "L"
do access_sfpmisc
L_TOTAL_5    = l_total_5 + l_misc_premium
l_prem_total = l_prem_total + l_misc_premium*/

Access cppFARM, Set cppFARM:policy_NO = sfpMASTER:policy_NO,
                    cppfarm:pol_year = sfpmaster:pol_year,
                    cppfarm:end_sequence = sfpmaster:end_sequence, Generic

L_TOTAL_7 = 0
l_farm_allied_total = 0
l_farm_inland_total = 0
l_farm_fire_total = 0
l_farm_total = 0
l_location_premium_11 = 0
While cppFARM:policy_NO = sfpMASTER:policy_NO and
      cppfarm:pol_year = sfpmaster:pol_year and
      cppfarm:end_sequence = sfpmaster:end_sequence
    Begin
    l_commandline_2 = str(cppgeneral:policy_no,9) + str(cppgeneral:pol_year,4) +
                      str(cppgeneral:end_sequence,4) + str(cppgeneral:prem_no,4) +
                      str(cppgeneral:build_no,4)
    proc("cli csbatch cppup011d %s",l_commandline_2)/noconsole

    L_TOTAL_7 = cppFARM:TOTAL_PREMIUM +
                L_TOTAL_7
    l_county = cppfarm:county
    l_prem_no = cppfarm:prem_no
    l_build_no = cppfarm:build_no
    l_location_premium_11 = cppfarm:total_premium
    do update_sfplocation
    l_farm_allied_total = l_farm_allied_total +
                          cppfarm:coverage_b_premium +
                          cppfarm:coverage_c_premium +
                          cppfarm:misc_premium
    l_farm_inland_total = l_farm_inland_total +
                          cppfarm:coverage_d_premium +
                          cppfarm:coverage_e_premium +
                          cppfarm:endorsement_total
    l_farm_fire_total = l_farm_fire_total +
                        cppfarm:coverage_a_premium
    l_farm_total = l_farm_allied_total +
                   l_farm_inland_total +
                   l_farm_fire_total
--    if l_farm_total <> l_total_7 then
--        l_farm_fire_total = (l_farm_fire_total +
--                            (l_total_7 - l_farm_total))

    Next cppFARM
    End

Access cppfarmliab, Set cppfarmliab:policy_NO = sfpMASTER:policy_NO,
                        cppfarmliab:pol_year = sfpmaster:pol_year,
                        cppfarmliab:end_sequence = sfpmaster:end_Sequence, Generic

l_total_10             = 0
l_farm_prem_total      = 0
l_farm_prod_total      = 0
l_farm_liability_total = 0
While cppfarmliab:policy_NO = sfpMASTER:policy_NO and
      cppfarmliab:pol_year = sfpmaster:pol_year and
      cppfarmliab:end_Sequence = sfpmaster:end_sequence
    Begin
    access sfpmaster_alias, set sfpmaster_alias:policy_no = sfpmaster:policy_no,
                                sfpmaster_alias:pol_year = sfpmaster:pol_year,
                                sfpmaster_alias:end_sequence = sfpmaster:end_sequence, generic

/*    if sfpmaster_alias:state = 0 then
        begin
        change sfpmaster_alias
           begin
           sfpmaster_alias:state = cppfarmliab:state
           end
        end*/

    if cppfarmliab:rating_territory_factor <> 0 then
        l_rating_territory_factor = cppfarmliab:rating_territory_factor
    else
        l_rating_territory_factor = 1.00
    if cppfarmliab:minimum_premium[1] = 0 then
        begin
        l_total_10        = l_total_10 + cppfarmliab:prem[1] + cppfarmliab:prem[2] +
                            cppfarmliab:total_endorsements + cppfarmliab:total_misc +
                            cppfarmliab:optional_premium
        l_farm_prem_total = cppfarmliab:prem[1] + l_farm_prem_total
        l_farm_prod_total = cppfarmliab:prem[2] + l_farm_prod_total
        end
    else
        begin
        l_farm_prem_total = cppfarmliab:minimum_premium[1] + l_farm_prem_total
        l_farm_prod_total = cppfarmliab:minimum_premium[2] + l_farm_prod_total
        l_total_10        = cppfarmliab:minimum_premium[1]
        end

    l_farm_prem_total = l_farm_prem_total + cppfarmliab:total_endorsements +
                        cppfarmliab:total_misc + cppfarmliab:optional_premium

    l_farm_liability_total = l_farm_liability_total +
                             l_farm_prem_total +
                             l_farm_prod_total

    l_county   = cppfarmliab:county
    l_prem_no  = cppfarmliab:prem_no
    l_build_no = cppfarmliab:build_no

    Next cppFARMLIAB
    End

access cppfarm, set cppfarm:policy_no = g_policy_no,
                    cppfarm:pol_year = g_year,
                    cppfarm:end_sequence = g_end_sequence, generic

if cppfarm:policy_no = g_policy_no and
   cppfarm:pol_Year = g_year and
   cppfarm:end_sequence = g_end_sequence then
    begin
    l_state = sfpmaster:state
    access sfscontrol, set sfscontrol:company_id = sfpname:company_id,
                           sfscontrol:state = l_state,
                           sfscontrol:line_of_business = sfpname:line_of_business, generic

    while sfscontrol:company_id = sfpname:company_id and
          sfscontrol:state = l_state and
          sfscontrol:line_of_business = sfpname:line_of_business
        begin
        if sfpname:eff_date >= sfscontrol:eff_date then
            l_minimum_premium = sfscontrol:minimum_premium

        next sfscontrol
        end

    if l_farm_total < l_minimum_premium then
        begin
        l_total_7 = l_minimum_premium
        l_farm_difference = l_minimum_premium - l_farm_total
        if l_farm_fire_total <> 0 then
            l_farm_fire_total = l_farm_fire_total + l_farm_difference
        else
        if l_farm_allied_total <> 0 then
            l_farm_allied_total = l_farm_allied_total + l_farm_difference
        else
        if l_farm_inland_total <> 0 then
            l_farm_inland_total = l_farm_inland_total + l_farm_difference

        l_farm_total = l_minimum_premium
        access cppfarm, set cppfarm:policy_no = g_policy_no,
                            cppfarm:pol_year = g_year,
                            cppfarm:end_sequence = g_end_sequence, generic

        if cppfarm:policy_no = g_policy_no and
           cppfarm:pol_year = g_Year and
           cppfarm:end_sequence = g_end_sequence then
            begin
            change cppfarm
                begin
                cppfarm:total_premium = l_farm_total
                end
            end
        end
    end

Access cppinland, Set cppinland:policy_NO = sfpMASTER:policy_NO,
                      cppinland:pol_year = sfpmaster:pol_year,
                      cppinland:end_sequence = sfpmaster:end_sequence, Generic

L_TOTAL_6 = 0
l_location_premium_11 = 0
l_first = "Y"
While cppinland:policy_NO = sfpMASTER:policy_NO and
      cppinland:pol_year = sfpmaster:pol_year and
      cppinland:end_sequence = sfpmaster:end_sequence
    Begin
    if cppinland:premium <> 0 and
       cppinland:code[1,3] = "MCL" then
        l_total_6 = l_total_6 + cppinland:premium
    else
        begin
        access cppendorse, set cppendorse:policy_no = cppinland:policy_no,
                               cppendorse:pol_year = cppinland:pol_Year,
                               cppendorse:end_sequence = cppinland:end_sequence,
                               cppendorse:prem_no = cppinland:prem_no,
                               cppendorse:build_no = cppinland:build_no,
                               cppendorse:code = cppinland:code, generic

        l_first_1 = "Y"
        while cppendorse:policy_no = cppinland:policy_no and
              cppendorse:pol_Year = cppinland:pol_year and
              cppendorse:end_sequence = cppinland:end_sequence and
              cppendorse:prem_no = cppinland:prem_no and
              cppendorse:build_no = cppinland:build_no and
              cppendorse:code = cppinland:code
            begin
            change cppinland
                begin
                if l_first_1 = "Y" then
                    begin
                    l_first_1 = "N"
                    cppinland:premium = 0
                    cppinland:total_premium = 0
                    end
                access cpsdefault, set cpsdefault:company_id = sfpname:company_id,
                                       cpsdefault:line_of_business = l_line_of_business, generic

                If CPSDEFAULT:DEVIATION_NUMBER_NOT_FACTOR = 1 And
                   cppinland:COMPANY_DEVIATION <> 1.00 Then
                    L_DEVIATION = (1 + (cppinland:COMPANY_DEVIATION * 0.01))
                Else
                    L_DEVIATION = cppinland:COMPANY_DEVIATION
                If CPSDEFAULT:DEVIATION_NUMBER_NOT_FACTOR = 1 And
                   cppinland:PACKAGE_MOD <> 1.00 Then
                    L_PACKAGE = (1 + (cppinland:PACKAGE_MOD * 0.01))
                Else
                    L_PACKAGE = cppinland:PACKAGE_MOD
                If CPSDEFAULT:DEVIATION_NUMBER_NOT_FACTOR = 1 And
                   cppinland:irpm <> 1.00 Then
                    l_irpm_1 = (1 + (cppinland:irpm * 0.01))
                Else
                    l_irpm_1 = cppinland:irpm

                if l_irpm_1 = 0 then
                    l_irpm_1 = 1.00
                if cppendorse:code not one of "IM7011" then
                    begin
                    l_premium = (((cppendorse:premium[1] +
                                cppendorse:premium[2] +
                                cppendorse:premium[3] +
                                cppendorse:premium[4] +
                                cppendorse:premium[5] +
                                cppendorse:premium[6] +
                                cppendorse:premium[7] +
                                cppendorse:premium[8] +
                                cppendorse:premium[9] +
                                cppendorse:premium[10]) *
                                l_deviation *
                                l_package *
                                l_irpm_1)  +
                                cppinland:premium)
                    end
                else
                    l_premium = ((cppendorse:premium[5] *
                                l_deviation *
                                l_package *
                                l_irpm_1) +
                                cppinland:premium)
                cppinland:premium = l_premium
                if cppendorse:code not one of "IM7011" then
                    begin
                    cppinland:total_premium = cppendorse:premium[1] +
                                              cppendorse:premium[2] +
                                              cppendorse:premium[3] +
                                              cppendorse:premium[4] +
                                              cppendorse:premium[5] +
                                              cppendorse:premium[6] +
                                              cppendorse:premium[7] +
                                              cppendorse:premium[8] +
                                              cppendorse:premium[9] +
                                              cppendorse:premium[10] +
                                              cppinland:total_premium
                    end
                else
                    cppinland:total_premium = cppendorse:premium[5] +
                                              cppinland:total_premium
                if cppendorse:code not one of "IM7011" then
                    begin
                    l_total_6 = (((cppendorse:premium[1] +
                                cppendorse:premium[2] +
                                cppendorse:premium[3] +
                                cppendorse:premium[4] +
                                cppendorse:premium[5] +
                                cppendorse:premium[6] +
                                cppendorse:premium[7] +
                                cppendorse:premium[8] +
                                cppendorse:premium[9] +
                                cppendorse:premium[10]) *
                                l_deviation *
                                l_package *
                                l_irpm_1) +
                                l_total_6)
                    end
                else
                    l_total_6 = ((cppendorse:premium[5] *
                                l_deviation *
                                l_package *
                                l_irpm_1) +
                                l_total_6)
                end

            next cppendorse
            end
        end

    l_county = cppinland:county
    l_prem_no = cppinland:prem_no
    l_build_no = cppinland:build_no
    l_location_premium_11 = cppinland:premium
    do update_sfplocation

    Next cppinland
    End

L_TOTAL = L_TOTAL_1 +
          L_TOTAL_2 +
          L_TOTAL_3 +
          L_TOTAL_4 +
          L_TOTAL_5 +
          L_TOTAL_6 +
          L_TOTAL_7 +
          l_total_10

if sfpmaster:irpm = 0 then
    l_irpm = 1.00
else
    begin
    access cpsdefault, set cpsdefault:company_id = sfpname:company_id,
                           cpsdefault:line_of_business = l_line_of_business, generic

    if cpsdefault:deviation_number_not_factor = 1 and
       sfpmaster:irpm <> 1.00 then
        l_irpm = (1 + (sfpmaster:irpm * 0.01))
    else
        l_irpm = sfpmaster:irpm
    end

If L_IRPM <> 0 Then
    Begin
    L_IRPM_TOTAL = ((L_TOTAL * L_IRPM) - l_total)
    l_irpm_property = l_total_1 +
                      l_total_2 +
                      l_total_7
    if l_irpm_property <> 0 then
        begin
        l_irpm_property = ((l_irpm_property * l_irpm) - l_irpm_property)
        access cppgeneral, set cppgeneral:policy_no    = sfpmaster:policy_no,
                               cppgeneral:pol_year     = sfpmaster:pol_year,
                               cppgeneral:end_sequence = sfpmaster:end_sequence, generic

        l_location_irpm_prop = 0
        while cppgeneral:policy_no    = sfpmaster:policy_no and
              cppgeneral:pol_year     = sfpmaster:pol_year and
              cppgeneral:end_sequence = sfpmaster:end_sequence
            begin
            change cppgeneral
                begin
                cppgeneral:total_irpm[1] = ((cppgeneral:total_premium[1] *
                                           l_irpm) -
                                           cppgeneral:total_premium[1])
                cppgeneral:total_irpm[2] = ((cppgeneral:total_premium[2] *
                                           l_irpm) -
                                           cppgeneral:total_premium[2])
                l_location_irpm_prop = l_location_irpm_prop +
                                       cppgeneral:total_irpm[1] +
                                       cppgeneral:total_irpm[2]
                end

            next cppgeneral
            end

        access cppbusiness, set cppbusiness:policy_no    = sfpmaster:policy_no,
                                cppbusiness:pol_year     = sfpmaster:pol_year,
                                cppbusiness:end_sequence = sfpmaster:end_sequence, generic

        while cppbusiness:policy_no    = sfpmaster:policy_no and
              cppbusiness:pol_Year     = sfpmaster:pol_year and
              cppbusiness:end_sequence = sfpmaster:end_sequence
            begin
            change cppbusiness
                begin
                cppbusiness:total_irpm = ((cppbusiness:total_premium *
                                           l_irpm) -
                                           cppbusiness:total_premium)
                end
                l_location_irpm_prop = l_location_irpm_prop +
                                       cppbusiness:total_irpm
            next cppbusiness
            end

        access cppfarm, set cppfarm:policy_no    = sfpmaster:policy_no,
                            cppfarm:pol_year     = sfpmaster:pol_year,
                            cppfarm:end_sequence = sfpmaster:end_sequence, generic

        while cppfarm:policy_no    = sfpmaster:policy_no and
              cppfarm:pol_Year     = sfpmaster:pol_year and
              cppfarm:end_Sequence = sfpmaster:end_sequence
            begin
            change cppfarm
                begin
                cppfarm:total_irpm = ((cppfarm:total_premium *
                                       l_irpm) -
                                       cppfarm:total_premium)
                end
                l_location_irpm_prop = l_location_irpm_prop +
                                       cppfarm:total_irpm
            next cppfarm
            end

        access cppproperty, set cppproperty:policy_no    = sfpmaster:policy_no,
                                cppproperty:pol_year     = sfpmaster:pol_year,
                                cppproperty:end_sequence = sfpmaster:end_sequence, generic

        while cppproperty:policy_no    = sfpmaster:policy_no and
              cppproperty:pol_year     = sfpmaster:pol_year and
              cppproperty:end_sequence = sfpmaster:end_sequence
            begin
            change cppproperty
                begin
                cppproperty:total_irpm = ((cppproperty:total_premium *
                                           l_irpm) -
                                           cppproperty:total_premium)
                end
                l_location_irpm_prop = l_location_irpm_prop +
                                       cppproperty:total_irpm
            next cppproperty
            end

        end

    l_irpm_liability = l_total_5 +
                       l_total_10
    if l_irpm_liability <> 0 then
        begin
        l_irpm_liability = ((l_irpm_liability * l_irpm) - l_irpm_liability)
        access cppliability, set cppliability:policy_no    = sfpmaster:policy_no,
                                 cppliability:pol_year     = sfpmaster:pol_year,
                                 cppliability:end_sequence = sfpmaster:end_sequence, generic

        l_location_irpm_liab = 0
        while cppliability:policy_no    = sfpmaster:policy_no and
              cppliability:pol_year     = sfpmaster:pol_year and
              cppliability:end_sequence = sfpmaster:end_sequence
            begin
            change cppliability
                begin
                cppliability:total_irpm[1] = ((cppliability:prem[1] *
                                               l_irpm) -
                                               cppliability:prem[1])
                cppliability:total_irpm[2] = ((cppliability:prem[2] *
                                               l_irpm) -
                                               cppliability:prem[2])
                cppliability:total_irpm[3] = ((cppliability:total_endorsements *
                                               l_irpm) -
                                               cppliability:total_endorsements)
                cppliability:total_irpm[4] = ((cppliability:total_misc *
                                               l_irpm) -
                                               cppliability:total_misc)
                l_location_irpm_liab = l_location_irpm_liab +
                                       cppliability:total_irpm[1] +
                                       cppliability:total_irpm[2] +
                                       cppliability:total_irpm[3] +
                                       cppliability:total_irpm[4]
                end

            next cppliability
            end

        access cppfarmliab, set cppfarmliab:policy_no    = sfpmaster:policy_no,
                                 cppfarmliab:pol_year     = sfpmaster:pol_year,
                                 cppfarmliab:end_sequence = sfpmaster:end_sequence, generic

--        l_location_irpm_liab = 0
        while cppfarmliab:policy_no    = sfpmaster:policy_no and
              cppfarmliab:pol_year     = sfpmaster:pol_year and
              cppfarmliab:end_sequence = sfpmaster:end_sequence
            begin
            change cppfarmliab
                begin
                cppfarmliab:total_irpm[1] = ((cppfarmliab:prem[1] *
                                               l_irpm) -
                                               cppfarmliab:prem[1])
                cppfarmliab:total_irpm[2] = ((cppfarmliab:prem[2] *
                                               l_irpm) -
                                               cppfarmliab:prem[2])
                cppfarmliab:total_irpm[3] = ((cppfarmliab:total_endorsements *
                                               l_irpm) -
                                               cppfarmliab:total_endorsements)
                cppfarmliab:total_irpm[4] = ((cppfarmliab:total_misc *
                                               l_irpm) -
                                               cppfarmliab:total_misc)
                l_location_irpm_liab = l_location_irpm_liab +
                                       cppfarmliab:total_irpm[1] +
                                       cppfarmliab:total_irpm[2] +
                                       cppfarmliab:total_irpm[3] +
                                       cppfarmliab:total_irpm[4]
                end

            next cppfarmliab
            end

        end

    l_irpm_inland = l_total_6
    if l_irpm_inland <> 0 then
        l_irpm_inland = ((l_irpm_inland * l_irpm) - l_irpm_inland)

    l_irpm_crime = l_total_4
    if l_irpm_crime <> 0 then
        begin
        l_irpm_crime = ((l_irpm_crime * l_irpm) - l_irpm_crime)
        access cppcrime, set cppcrime:policy_no    = sfpmaster:policy_no,
                             cppcrime:pol_year     = sfpmaster:pol_year,
                             cppcrime:end_sequence = sfpmaster:end_sequence, generic

        l_location_irpm_crime = 0
        while cppcrime:policy_no    = sfpmaster:policy_no and
              cppcrime:pol_year     = sfpmaster:pol_year and
              cppcrime:end_sequence = sfpmaster:end_sequence
            begin
            change cppcrime
                begin
                cppcrime:total_irpm[1] = ((cppcrime:crime_total[1] *
                                           l_irpm) -
                                           cppcrime:crime_total[1])
                if cppcrime:crime_total[1] = 0 then
                    begin
                    cppcrime:total_irpm[1] = ((cppcrime:crime_premium *
                                               l_irpm) -
                                               cppcrime:crime_premium)
                    end
                l_location_irpm_crime = l_location_irpm_crime +
                                        cppcrime:total_irpm[1]
                cppcrime:total_irpm[2] = ((cppcrime:crime_total[2] *
                                           l_irpm) -
                                           cppcrime:crime_total[2])
                l_location_irpm_crime = l_location_irpm_crime +
                                        cppcrime:total_irpm[2]
                end

            next cppcrime
            end
        end

    l_irpm_glass = l_total_3
    if l_irpm_glass <> 0 then
        l_irpm_glass = ((l_irpm_glass * l_irpm) - l_irpm_glass)

    l_total_all_irpm = l_irpm_property +
                       l_irpm_liability +
                       l_irpm_inland +
                       l_irpm_crime +
                       l_irpm_glass
    if l_total_all_irpm <> l_irpm_total then
        begin
        l_irpm_difference = l_irpm_total - l_total_all_irpm
        if l_irpm_property <> 0 then
            l_irpm_property = l_irpm_property + l_irpm_difference
        else
        if l_irpm_liability <> 0 then
            l_irpm_liability = l_irpm_liability + l_irpm_difference
        else
        if l_irpm_inland <> 0 then
            l_irpm_inland = l_irpm_inland + l_irpm_difference
        else
        if l_irpm_crime <> 0 then
            l_irpm_crime = l_irpm_crime + l_irpm_difference
        else
        if l_irpm_glass <> 0 then
            l_irpm_glass = l_irpm_glass + l_irpm_difference
        end

    if l_location_irpm_prop <> l_irpm_property then
        begin
        access cppgeneral, set cppgeneral:policy_no    = sfpmaster:policy_no,
                               cppgeneral:pol_year     = sfpmaster:pol_year,
                               cppgeneral:end_sequence = sfpmaster:end_sequence, generic

        if cppgeneral:policy_no = sfpmaster:policy_no and
           cppgeneral:pol_year  = sfpmaster:pol_Year and
           cppgeneral:end_sequence = sfpmaster:end_sequence then
            begin
            l_location_irpm_diff = l_irpm_property - l_location_irpm_prop
            change cppgeneral
                begin
                if cppgeneral:total_premium[1] <> 0 then
                    cppgeneral:total_irpm[1] = cppgeneral:total_irpm[1] +
                                               l_location_irpm_diff
                else
                if cppgeneral:total_premium[2] <> 0 then
                    cppgeneral:total_irpm[2] = cppgeneral:total_irpm[2] +
                                               l_location_irpm_diff
                end
            end

        access cppfarm, set cppfarm:policy_no    = sfpmaster:policy_no,
                            cppfarm:pol_year     = sfpmaster:pol_year,
                            cppfarm:end_sequence = sfpmaster:end_sequence, generic

        if cppfarm:policy_no = sfpmaster:policy_no and
           cppfarm:pol_year  = sfpmaster:pol_Year and
           cppfarm:end_sequence = sfpmaster:end_sequence then
            begin
            l_location_irpm_diff = l_irpm_property - l_location_irpm_prop
            change cppfarm
                begin
                cppfarm:total_irpm = cppfarm:total_irpm +
                                     l_location_irpm_diff
                end
            end

        end

    if l_location_irpm_liab <> l_irpm_liability then
        begin
        access cppliability, set cppliability:policy_no    = sfpmaster:policy_no,
                                 cppliability:pol_year     = sfpmaster:pol_year,
                                 cppliability:end_sequence = sfpmaster:end_sequence, generic

        if cppliability:policy_no = sfpmaster:policy_no and
           cppliability:pol_Year = sfpmaster:pol_Year and
           cppliability:end_Sequence = sfpmaster:end_sequence then
            begin
            l_location_irpm_diff = l_irpm_liability - l_location_irpm_liab
            change cppliability
                begin
                if cppliability:prem[1] <> 0 then
                    cppliability:total_irpm[1] = cppliability:total_irpm[1] +
                                                 l_location_irpm_diff
                else
                if cppliability:prem[2] <> 0 then
                    cppliability:total_irpm[2] = cppliability:total_irpm[2] +
                                                 l_location_irpm_diff
                end
            end

        access cppfarmliab, set cppfarmliab:policy_no    = sfpmaster:policy_no,
                                 cppfarmliab:pol_year     = sfpmaster:pol_year,
                                 cppfarmliab:end_sequence = sfpmaster:end_sequence, generic

        if cppfarmliab:policy_no = sfpmaster:policy_no and
           cppfarmliab:pol_Year = sfpmaster:pol_Year and
           cppfarmliab:end_Sequence = sfpmaster:end_sequence then
            begin
            l_location_irpm_diff = l_irpm_liability - l_location_irpm_liab
            change cppfarmliab
                begin
                if cppfarmliab:prem[1] <> 0 then
                    cppfarmliab:total_irpm[1] = cppfarmliab:total_irpm[1] +
                                                 l_location_irpm_diff
                else
                if cppfarmliab:prem[2] <> 0 then
                    cppfarmliab:total_irpm[2] = cppfarmliab:total_irpm[2] +
                                                 l_location_irpm_diff
                end
            end

        end

    if l_location_irpm_crime <> l_irpm_crime then
        begin
        access cppcrime, set cppcrime:policy_no    = sfpmaster:policy_no,
                             cppcrime:pol_year     = sfpmaster:pol_year,
                             cppcrime:end_sequence = sfpmaster:end_sequence, generic

        l_location_irpm_diff = l_irpm_crime - l_location_irpm_crime
        if cppcrime:policy_no = sfpmaster:policy_no and
           cppcrime:pol_year = sfpmaster:pol_year and
           cppcrime:end_sequence = sfpmaster:end_sequence then
            begin
            change cppcrime
            begin
            if cppcrime:crime_total[1] <> 0 or
               cppcrime:crime_premium <> 0 then
                cppcrime:total_irpm[1] = cppcrime:total_irpm[1] +
                                         l_location_irpm_diff
            else
            if cppcrime:crime_total[2] <> 0 then
                cppcrime:total_irpm[2] = cppcrime:total_irpm[2] +
                                         l_location_irpm_diff
            end
            end
        end

    End -- end of irpm

l_total = l_total + l_irpm_total

-- terrorism
if l_total_1 <> 0 or
   l_total_2 <> 0 or
   l_total_3 <> 0 or
   l_total_4 <> 0 or
   l_total_5 <> 0 or
   l_total_6 <> 0 or
   l_total_7 <> 0 or
   l_total_10 <> 0 then
    begin
    if sfpmaster:remove_terrorism_form = 0 then
        begin
        do get_terrorism_premium
        do remove_terrorism_exclusion
        access sfpmaster_alias, set sfpmaster_alias:policy_no = g_policy_no,
                                    sfpmaster_alias:pol_year = g_year,
                                    sfpmaster_alias:end_sequence = g_end_sequence, generic

        if sfpmaster_alias:policy_no = g_policy_no and
           sfpmaster_alias:pol_year = g_year and
           sfpmaster_alias:end_sequence = g_end_sequence then
            begin
            change sfpmaster_alias
                begin
                sfpmaster_alias:remove_terrorism_Form = 0
                sfpmaster_alias:tpd6_terrorism_premium = 0
                end
            end
        end
    else
        begin
        do remove_terror_form
        Do ACCESS_SFSMSOTERROR
        if sfscompany:boiler_rating one of 4 then
            begin
            do company_deviation
            do property_totals
            do business_income_totals
            do liability_totals
            l_property_terror  = l_cppgeneral_total
            l_business_terror  = l_cppbusiness_total_1
            l_glass_terror     = l_total_3
            l_crime_terror     = l_total_4
            l_inland_terror    = l_total_6
            l_liability_terror = l_cppliability_total_1
            l_tpd6_terrorism_premium = ((l_property_terror +
                                       l_business_terror +
                                       l_glass_terror +
                                       l_crime_terror +
                                       l_inland_terror +
                                       l_liability_terror) *
                                       l_terror_PERCENTAGE)
            end
        else
            begin
            L_tpd6_TERRORISM_PREMIUM = L_TOTAL * L_TERROR_PERCENTAGE

            If L_tpd6_TERRORISM_PREMIUM <= L_TERROR_MINIMUM Then
                begin
                L_tpd6_TERRORISM_PREMIUM = L_TERROR_MINIMUM
                end
            end

        access sfpmaster_alias, set sfpmaster_alias:policy_no = g_policy_no,
                                    sfpmaster_alias:pol_year = g_year,
                                    sfpmaster_alias:end_sequence = g_end_sequence, generic

        if sfpmaster_alias:policy_no = g_policy_no and
           sfpmaster_alias:pol_year = g_year and
           sfpmaster_alias:end_sequence = g_end_sequence then
            begin
            change sfpmaster_alias
                begin
                sfpmaster_alias:tpd6_terrorism_premium = l_tpd6_terrorism_premium
                sfpmaster_alias:terrorism_premium = 0
                end
            end

        l_total_9 = 0
        end
    end

l_total = l_total + l_total_9

if sfpname:reinsurance = "Y" then
    do reinsurance
End

Procedure remove_terrorism_exclusion
begin
access sfpend, Set sfpend:POLICY_NO = G_POLICY_NO,
                   sfpend:pol_year  = g_year,
                   sfpend:end_sequence = g_end_sequence, Generic

L_FOUND = 0
While sfpend:POLICY_NO    = G_POLICY_NO and
      sfpend:pol_year     = g_year and
      sfpend:end_sequence = g_end_sequence
        begin
        If sfpend:CODE = sfsmsoterror:terrorism_form_to_remove then
            begin
            Delete sfpend
            end

        Next sfpend
        end

end

procedure reinsurance
begin
access cpsdefault, set cpsdefault:company_id       = sfpname:company_id,
                       cpsdefault:line_of_business = l_line_of_business, generic

access cppgeneral, set cppgeneral:policy_no    = sfpmaster:policy_no,
                       cppgeneral:pol_year     = sfpmaster:pol_year,
                       cppgeneral:end_sequence = sfpmaster:end_sequence, generic

access sfpreins, set sfpreins:policy_no    = sfpmaster:policy_no,
                     sfpreins:pol_year     = sfpmaster:pol_Year,
                     sfpreins:end_sequence = sfpmaster:end_sequence, generic

access sfpreins1, set sfpreins1:policy_no    = sfpmaster:policy_no,
                      sfpreins1:pol_year     = sfpmaster:pol_year,
                      sfpreins1:end_sequence = sfpmaster:end_sequence, generic

while sfpreins1:policy_no    = sfpmaster:policy_no and
      sfpreins1:pol_Year     = sfpmaster:pol_Year and
      sfpreins1:end_sequence = sfpmaster:end_sequence
    begin
    delete sfpreins1

    next sfpreins1
    end

l_reins_co = sfpreins:reins_co
access sfsfacreins, set sfsfacreins:company_id = sfpname:company_id,
                        sfsfacreins:reins_co   = l_reins_co, generic

l_include_prop_opt_cov    = 0
l_include_business_income = 0
l_include_boiler          = 0
l_include_irpm            = 0
l_include_inland_marine   = 0
l_include_glass           = 0
l_include_crime           = 0
l_total_fac_limit         = 0
while sfsfacreins:company_id = sfpname:company_id and
      sfsfacreins:reins_co   = l_reins_co
        begin
        if (sfpname:eff_date >= sfsfacreins:eff_date and
           (sfpname:eff_date <= sfsfacreins:exp_date or
           sfsfacreins:exp_date = 0)) then
            begin
            l_include_business_income = sfsfacreins:smp_include_business_income
            l_include_irpm            = sfsfacreins:smp_include_irpm
            l_include_inland_marine   = sfsfacreins:smp_include_inland_marine
            l_include_boiler          = sfsfacreins:smp_include_boiler
            l_total_fac_limit         = sfsfacreins:total_fac_limit
            end

        next sfsfacreins
        end

l_end_sequence = sfpmaster:end_sequence - 1
access sfpreins_alias, set sfpreins_alias:policy_no    = sfpmaster:policy_no,
                           sfpreins_alias:pol_year     = sfpmaster:pol_year,
                           sfpreins_alias:end_sequence = l_end_sequence, generic

if sfpreins_alias:policy_no    = sfpmaster:policy_no and
   sfpreins_alias:pol_Year     = sfpmaster:pol_Year and
   sfpreins_alias:end_sequence = l_end_sequence then
    begin
    if sfpmaster:trans_code not one of 14 then
        begin
        if sfpreins_alias:subline_factor[6] <> 0 then
            l_include_inland_marine = 1
        else
            l_include_inland_marine = 0
        end
    end

access cppgeneral, set cppgeneral:policy_no    = sfpmaster:policy_no,
                       cppgeneral:pol_year     = sfpmaster:pol_year,
                       cppgeneral:end_sequence = sfpmaster:end_sequence, generic

l_key_risk_prem_no  = 0
l_key_risk_build_no = 0
l_property_limit    = 0
l_key_risk_limit    = 0
if cppgeneral:blanket = 0 then
    begin
    access sfpname, set sfpname:policy_no    = sfpmaster:policy_no,
                        sfpname:pol_Year     = sfpmaster:pol_Year,
                        sfpname:end_sequence = sfpmaster:end_sequence, generic

    -- read thru cppgeneral to find the highest limit for key risk
    access cppgeneral, set cppgeneral:policy_no    = sfpmaster:policy_no,
                           cppgeneral:pol_year     = sfpmaster:pol_year,
                           cppgeneral:end_sequence = sfpmaster:end_sequence, generic

    while cppgeneral:policy_no    = sfpmaster:policy_no and
          cppgeneral:Pol_Year     = sfpmaster:pol_Year and
          cppgeneral:end_sequence = sfpmaster:end_sequence
        begin
        l_property_limit = 0
        if sfpname:reinsurance = "Y" then
            begin
            l_property_limit = cppgeneral:limit[1] +
                               cppgeneral:limit[2] +
                               l_property_limit

            if l_include_business_income = 1 then
                begin
                access cppbusiness, set cppbusiness:policy_no    = cppgeneral:policy_no,
                                        cppbusiness:pol_year     = cppgeneral:pol_year,
                                        cppbusiness:end_sequence = cppgeneral:end_sequence,
                                        cppbusiness:prem_no      = cppgeneral:prem_no,
                                        cppbusiness:build_no     = cppgeneral:build_no, generic

                l_property_limit = cppbusiness:limit +
                                   l_property_limit

                end

            if l_property_limit > l_key_risk_limit then
                begin
                l_key_risk_limit    = l_property_limit
                l_key_risk_prem_no  = cppgeneral:prem_no
                l_key_risk_build_no = cppgeneral:build_no
                end

            end

        next cppgeneral
        end

    -- read thru cppgeneral again find key risk and sfplocation to find
    -- locations forced to subject and update sfpreins1 limits
    access cppgeneral, set cppgeneral:policy_no    = sfpmaster:policy_no,
                           cppgeneral:pol_year     = sfpmaster:pol_year,
                           cppgeneral:end_sequence = sfpmaster:end_sequence, generic

    l_reins_limit1 = 0
    while cppgeneral:policy_no    = sfpmaster:policy_no and
          cppgeneral:pol_Year     = sfpmaster:pol_year and
          cppgeneral:end_sequence = sfpmaster:end_sequence
        begin
        if sfpname:reinsurance = "Y" then
            begin
            l_property_limit        = 0
            l_business_income_limit = 0
            l_force_to_subject      = 0
            if cppgeneral:key_risk = 1 then
                begin
                l_property_limit = cppgeneral:limit[1] +
                                   cppgeneral:limit[2]

                if l_include_business_income = 1 then
                    begin
                    access cppbusiness, set cppbusiness:policy_no    = cppgeneral:policy_no,
                                            cppbusiness:pol_year     = cppgeneral:pol_year,
                                            cppbusiness:end_sequence = cppgeneral:end_sequence,
                                            cppbusiness:prem_no      = cppgeneral:prem_no,
                                            cppbusiness:build_no     = cppgeneral:build_no, generic

                    l_business_income_limit = cppbusiness:limit

                    end

                l_reins_limit1 = l_reins_limit1 + l_property_limit +
                                 l_business_income_limit
                do update_sfpreins1_property
                end
            else
            if cppgeneral:key_risk = 0 then
                begin
                access sfplocation, set sfplocation:policy_no    = cppgeneral:policy_no,
                                        sfplocation:pol_Year     = cppgeneral:pol_year,
                                        sfplocation:end_sequence = cppgeneral:end_sequence,
                                        sfplocation:prem_no      = cppgeneral:prem_no,
                                        sfplocation:build_no     = cppgeneral:build_no, generic

                l_property_limit        = 0
                l_business_income_limit = 0
                l_force_to_subject      = 0
                if sfplocation:force_to_subject = 1 then
                    begin
                    l_force_to_subject = 1
                    l_property_limit = cppgeneral:limit[1] +
                                       cppgeneral:limit[2]

                    if l_include_business_income = 1 then
                        begin
                        access cppbusiness, set cppbusiness:policy_no    = cppgeneral:policy_no,
                                                cppbusiness:pol_year     = cppgeneral:pol_year,
                                                cppbusiness:end_sequence = cppgeneral:end_sequence,
                                                cppbusiness:prem_no      = cppgeneral:prem_no,
                                                cppbusiness:build_no     = cppgeneral:build_no, generic

                        l_business_income_limit = cppbusiness:limit
                        end

                    l_reins_limit1 = l_reins_limit1 + l_property_limit +
                                     l_business_income_limit
                    do update_sfpreins1_property
                    end

                end

            end

        next cppgeneral
        end
    end
else -- if blanket = 1
    begin
    access sfpname, set sfpname:policy_no    = sfpmaster:policy_no,
                        sfpname:pol_Year     = sfpmaster:pol_Year,
                        sfpname:end_sequence = sfpmaster:end_sequence, generic

    -- read thru cppblanket again find key risk and sfplocation to find
    -- locations forced to subject and update sfpreins1 limits
    access cppblanket, set cppblanket:policy_no    = sfpmaster:policy_no,
                           cppblanket:pol_year     = sfpmaster:pol_year,
                           cppblanket:end_sequence = sfpmaster:end_sequence, generic

    l_reins_limit1 = 0
    l_property_limit        = 0
    l_business_income_limit = 0
    l_force_to_subject      = 0
    while cppblanket:policy_no    = sfpmaster:policy_no and
          cppblanket:pol_Year     = sfpmaster:pol_year and
          cppblanket:end_sequence = sfpmaster:end_sequence
        begin
        if sfpname:reinsurance = "Y" then
            begin
            if cppblanket:key_risk = 1 then
                begin
                l_property_limit = cppblanket:limit[1] +
                                   cppblanket:limit[2] +
                                   l_property_limit
                if l_include_business_income = 1 then
                    begin
                    access cppbusiness, set cppbusiness:policy_no    = cppblanket:policy_no,
                                            cppbusiness:pol_year     = cppblanket:pol_year,
                                            cppbusiness:end_sequence = cppblanket:end_sequence,
                                            cppbusiness:prem_no      = cppblanket:prem_no,
                                            cppbusiness:build_no     = cppblanket:build_no, generic

                    if cppbusiness:policy_no    = cppblanket:policy_no and
                       cppbusiness:pol_year     = cppblanket:pol_year and
                       cppbusiness:end_sequence = cppblanket:end_sequence and
                       cppbusiness:prem_no      = cppblanket:prem_no and
                       cppbusiness:build_no     = cppblanket:build_no then
                        begin
                        if cppbusiness:blanket = 1 then
                            begin
                            access cppblanketbi, set cppblanketbi:policy_no    = cppblanket:policy_no,
                                                     cppblanketbi:pol_year     = cppblanket:pol_year,
                                                     cppblanketbi:end_sequence = cppblanket:end_sequence,
                                                     cppblanketbi:prem_no      = cppblanket:prem_no,
                                                     cppblanketbi:build_no     = cppblanket:build_no, generic

                            l_business_income_limit = cppblanketbi:limit +
                                                      l_business_income_limit
                            end
                        else
                            begin
                            l_business_income_limit = cppbusiness:limit +
                                                      l_business_income_limit
                            end
                        do update_sfpreins1_bi
                        end
                    end
                end
            else
            if cppblanket:key_risk = 0 then
                begin
                access sfplocation, set sfplocation:policy_no    = cppblanket:policy_no,
                                        sfplocation:pol_Year     = cppblanket:pol_year,
                                        sfplocation:end_sequence = cppblanket:end_sequence,
                                        sfplocation:prem_no      = cppblanket:prem_no,
                                        sfplocation:build_no     = cppblanket:build_no, generic

                if sfplocation:force_to_subject = 1 then
                    begin
                    l_force_to_subject = 1
                    l_property_limit = cppblanket:limit[1] +
                                       cppblanket:limit[2] +
                                       l_property_limit

                    if l_include_business_income = 1 then
                        begin
                        access cppbusiness, set cppbusiness:policy_no    = cppblanket:policy_no,
                                                cppbusiness:pol_year     = cppblanket:pol_year,
                                                cppbusiness:end_sequence = cppblanket:end_sequence,
                                                cppbusiness:prem_no      = cppblanket:prem_no,
                                                cppbusiness:build_no     = cppblanket:build_no, generic

                        if cppbusiness:policy_no    = cppblanket:policy_no and
                           cppbusiness:pol_year     = cppblanket:pol_year and
                           cppbusiness:end_sequence = cppblanket:end_sequence and
                           cppbusiness:prem_no      = cppblanket:prem_no and
                           cppbusiness:build_no     = cppblanket:build_no then
                            begin
                            if cppbusiness:blanket = 1 then
                                begin
                                access cppblanketbi, set cppblanketbi:policy_no    = cppblanket:policy_no,
                                                         cppblanketbi:pol_year     = cppblanket:pol_year,
                                                         cppblanketbi:end_sequence = cppblanket:end_sequence,
                                                         cppblanketbi:prem_no      = cppblanket:prem_no,
                                                         cppblanketbi:build_no     = cppblanket:build_no, generic

                                l_business_income_limit = cppblanketbi:limit +
                                                          l_business_income_limit
                                end
                            else
                                begin
                                l_business_income_limit = cppbusiness:limit +
                                                          l_business_income_limit
                                end
                            do update_sfpreins1_bi
                            end
                        end

                    end

                end

            end

        next cppblanket
        end

    l_reins_limit1 = l_reins_limit1 + l_business_income_limit + l_property_limit
    access cppblanket, set cppblanket:policy_no    = sfpmaster:policy_no,
                           cppblanket:pol_year     = sfpmaster:pol_year,
                           cppblanket:end_sequence = sfpmaster:end_sequence, generic

    access cppgeneral, set cppgeneral:policy_no    = sfpmaster:policy_no,
                           cppgeneral:pol_year     = sfpmaster:pol_year,
                           cppgeneral:end_sequence = sfpmaster:end_sequence, generic

    do update_blanket_sfpreins1_property
    end

if l_include_crime = 1 then
    begin
    access cppcrime, set cppcrime:policy_no = sfpmaster:policy_no,
                         cppcrime:pol_Year = sfpmaster:pol_year,
                         cppcrime:end_sequence = sfpmaster:end_sequence, generic

    while cppcrime:policy_no = sfpmaster:policy_no and
          cppcrime:pol_year = sfpmaster:pol_Year and
          cppcrime:end_sequence = sfpmaster:end_sequence
        begin
            access cppgeneral, set cppgeneral:policy_no = cppcrime:policy_no,
                                   cppgeneral:pol_year = cppcrime:pol_year,
                                   cppgeneral:end_sequence = cppcrime:end_sequence,
                                   cppgeneral:prem_no = cppcrime:prem_no,
                                   cppgeneral:build_no = cppcrime:build_no, generic

            access sfplocation, set sfplocation:policy_no = cppcrime:policy_no,
                                    sfplocation:pol_year = cppcrime:pol_year,
                                    sfplocation:end_sequence = cppcrime:end_sequence,
                                    sfplocation:prem_no = cppcrime:prem_no,
                                    sfplocation:build_no = cppcrime:build_no, generic

            if cppgeneral:key_risk = 1 or
               sfplocation:force_to_subject = 1 then
                begin
                l_reins_limit1 = l_reins_limit1 +
                                 cppcrime:limit[1] +
                                 cppcrime:limit[2] +
                                 cppcrime:limit[3]
                l_crime_limit = cppcrime:limit[1] +
                                cppcrime:limit[2] +
                                cppcrime:limit[3] +
                                l_crime_limit

        access cppcrime1, set cppcrime1:policy_no = cppcrime:policy_no,
                              cppcrime1:pol_year = cppcrime:pol_Year,
                              cppcrime1:end_sequence = cppcrime:end_sequence,
                              cppcrime1:prem_no  = cppcrime:prem_no,
                              cppcrime1:build_no = cppcrime:build_no, generic

        l_crime_premium = 0
        while cppcrime1:policy_no = cppcrime:policy_no and
              cppcrime1:pol_year = cppcrime:pol_year and
              cppcrime1:end_sequence = cppcrime:end_sequence and
              cppcrime1:prem_no  = cppcrime:prem_no and
              cppcrime1:build_no = cppcrime:build_no
                begin
                l_crime_premium = cppcrime1:premium +
                                  l_crime_premium

                next cppcrime1
                end

        access sfpreins1, set sfpreins1:policy_no = cppcrime:policy_no,
                              sfpreins1:pol_Year = cppcrime:pol_year,
                              sfpreins1:end_sequence = cppcrime:end_sequence,
                              sfpreins1:prem_no  = cppcrime:prem_no,
                              sfpreins1:build_no = cppcrime:build_no, generic

        if sfpreins1:policy_no = cppcrime:policy_no and
           sfpreins1:pol_Year = cppcrime:pol_Year and
           sfpreins1:end_sequence = cppcrime:end_sequence and
           sfpreins1:prem_no  = cppcrime:prem_no and
           sfpreins1:build_no = cppcrime:build_no then
            begin
            change sfpreins1
                begin
                sfpreins1:crime_total           =       l_crime_premium
                sfpreins1:crime_limit           =       sfpreins1:crime_limit +
                                                        cppcrime:limit[1] +
                                                        cppcrime:limit[2] +
                                                        cppcrime:limit[3]
                end
            end
        else
            begin
            add sfpreins1
                begin
                sfpreins1:policy_no             =       cppcrime:policy_no
                sfpreins1:pol_Year              =       cppcrime:pol_year
                sfpreins1:end_sequence          =       cppcrime:end_sequence
                sfpreins1:prem_no               =       cppcrime:prem_no
                sfpreins1:build_no              =       cppcrime:build_no
                sfpreins1:crime_total           =       l_crime_premium
                sfpreins1:crime_limit           =       cppcrime:limit[1] +
                                                        cppcrime:limit[2] +
                                                        cppcrime:limit[3]
                end
            end
        end

        next cppcrime
        end

    end

if l_include_glass = 1 then
    begin
    access cppglass, set cppglass:policy_no = sfpmaster:policy_no,
                         cppglass:pol_Year = sfpmaster:pol_year,
                         cppglass:end_sequence = sfpmaster:end_sequence, generic

    while cppglass:policy_no = sfpmaster:policy_no and
          cppglass:pol_Year = sfpmaster:pol_Year and
          cppglass:end_sequence = sfpmaster:end_sequence
        begin
        access cppgeneral, set cppgeneral:policy_no = cppglass:policy_no,
                               cppgeneral:pol_year = cppglass:pol_year,
                               cppgeneral:end_sequence = cppglass:end_sequence,
                               cppgeneral:prem_no = cppglass:prem_no,
                               cppgeneral:build_no = cppglass:build_no, generic

        access sfplocation, set sfplocation:policy_no = cppglass:policy_no,
                                sfplocation:pol_year = cppglass:pol_year,
                                sfplocation:end_sequence = cppglass:end_sequence,
                                sfplocation:prem_no = cppglass:prem_no,
                                sfplocation:build_no = cppglass:build_no, generic

        if cppgeneral:key_risk = 1 or
           sfplocation:force_to_subject = 1 then
            begin
            l_reins_limit1 = l_reins_limit1 +
                             cppglass:limit
            l_glass_limit = cppglass:limit +
                            l_glass_limit

        access sfpreins1, set sfpreins1:policy_no = cppglass:policy_no,
                              sfpreins1:pol_Year = cppglass:pol_year,
                              sfpreins1:end_sequence = cppglass:end_sequence,
                              sfpreins1:prem_no  = cppglass:prem_no,
                              sfpreins1:build_no = cppglass:build_no, generic

        if sfpreins1:policy_no = cppglass:policy_no and
           sfpreins1:pol_Year = cppglass:pol_Year and
           sfpreins1:end_sequence = cppglass:end_sequence and
           sfpreins1:prem_no  = cppglass:prem_no and
           sfpreins1:build_no = cppglass:build_no then
            begin
            change sfpreins1
                begin
                sfpreins1:glass_total           =       sfpreins1:glass_total +
                                                        cppglass:glass_premium
                sfpreins1:glass_limit           =       sfpreins1:glass_limit +
                                                        cppglass:limit
                end
            end
        else
            begin
            add sfpreins1
                begin
                sfpreins1:policy_no             =       cppglass:policy_no
                sfpreins1:pol_Year              =       cppglass:pol_year
                sfpreins1:end_sequence          =       cppglass:end_sequence
                sfpreins1:prem_no               =       cppglass:prem_no
                sfpreins1:build_no              =       cppglass:build_no
                sfpreins1:glass_total           =       cppglass:glass_premium
                sfpreins1:glass_limit           =       cppglass:limit
                end
            end
        end

        next cppglass
        end

    end

if l_include_inland_marine = 1 then
    begin
    access cppinland, set cppinland:policy_no = sfpmaster:policy_no,
                          cppinland:pol_Year = sfpmaster:pol_year,
                          cppinland:end_sequence = sfpmaster:end_sequence, generic

    while cppinland:policy_no = sfpmaster:policy_no and
          cppinland:pol_Year = sfpmaster:pol_Year and
          cppinland:end_sequence = sfpmaster:end_sequence
        begin
        access cppgeneral, set cppgeneral:policy_no = cppinland:policy_no,
                               cppgeneral:pol_year = cppinland:pol_year,
                               cppgeneral:end_sequence = cppinland:end_sequence,
                               cppgeneral:prem_no = cppinland:prem_no,
                               cppgeneral:build_no = cppinland:build_no, generic

        access sfplocation, set sfplocation:policy_no = cppinland:policy_no,
                                sfplocation:pol_year = cppinland:pol_year,
                                sfplocation:end_sequence = cppinland:end_sequence,
                                sfplocation:prem_no = cppinland:prem_no,
                                sfplocation:build_no = cppinland:build_no, generic

        if cppgeneral:key_risk = 1 or
           sfplocation:force_to_subject = 1 then
            begin
            access cppendorse, set cppendorse:policy_no = cppinland:policy_no,
                                   cppendorse:pol_Year = cppinland:pol_Year,
                                   cppendorse:end_sequence = cppinland:end_sequence,
                                   cppendorse:prem_no = cppinland:prem_no,
                                   cppendorse:build_no = cppinland:build_no,
                                   cppendorse:code = cppinland:code, generic

            l_inland_limit = 0
            while cppendorse:policy_no = cppinland:policy_no and
                  cppendorse:pol_Year = cppinland:pol_Year and
                  cppendorse:end_sequence = cppinland:end_sequence and
                  cppendorse:prem_no = cppinland:prem_no and
                  cppendorse:build_no = cppinland:build_no and
                  cppendorse:code = cppinland:code
                    begin
                l_reins_limit1 = l_reins_limit1 +
                                 cppendorse:limit[1] +
                                 cppendorse:limit[2] +
                                 cppendorse:limit[3] +
                                 cppendorse:limit[4] +
                                 cppendorse:limit[5] +
                                 cppendorse:limit[6] +
                                 cppendorse:limit[7] +
                                 cppendorse:limit[8] +
                                 cppendorse:limit[9] +
                                 cppendorse:limit[10] +
                                 cppendorse:limit[11] +
                                 cppendorse:limit[12] +
                                 cppendorse:limit[13] +
                                 cppendorse:limit[14] +
                                 cppendorse:limit[15] +
                                 cppendorse:limit[16] +
                                 cppendorse:limit[17] +
                                 cppendorse:limit[18] +
                                 cppendorse:limit[19] +
                                 cppendorse:limit[20]
                l_inland_limit = cppendorse:limit[1] +
                                 cppendorse:limit[2] +
                                 cppendorse:limit[3] +
                                 cppendorse:limit[4] +
                                 cppendorse:limit[5] +
                                 cppendorse:limit[6] +
                                 cppendorse:limit[7] +
                                 cppendorse:limit[8] +
                                 cppendorse:limit[9] +
                                 cppendorse:limit[10] +
                                 cppendorse:limit[11] +
                                 cppendorse:limit[12] +
                                 cppendorse:limit[13] +
                                 cppendorse:limit[14] +
                                 cppendorse:limit[15] +
                                 cppendorse:limit[16] +
                                 cppendorse:limit[17] +
                                 cppendorse:limit[18] +
                                 cppendorse:limit[19] +
                                 cppendorse:limit[20] +
                                 l_inland_limit

            next cppendorse
            end

        access sfpreins1, set sfpreins1:policy_no = cppinland:policy_no,
                              sfpreins1:pol_Year = cppinland:pol_year,
                              sfpreins1:end_sequence = cppinland:end_sequence,
                              sfpreins1:prem_no  = cppinland:prem_no,
                              sfpreins1:build_no = cppinland:build_no, generic

        if sfpreins1:policy_no = cppinland:policy_no and
           sfpreins1:pol_Year = cppinland:pol_year and
           sfpreins1:end_sequence = cppinland:end_sequence and
           sfpreins1:prem_no  = cppinland:prem_no and
           sfpreins1:build_no = cppinland:build_no then
            begin
            change sfpreins1
                begin
                sfpreins1:inland_marine_total           =       sfpreins1:inland_marine_total +
                                                                cppinland:premium
                sfpreins1:inland_marine_limit           =       sfpreins1:inland_marine_limit +
                                                                l_inland_limit
                end
            end
        else
            begin
            add sfpreins1
                begin
                sfpreins1:policy_no                     =       cppinland:policy_no
                sfpreins1:pol_Year                      =       cppinland:pol_Year
                sfpreins1:end_sequence                  =       cppinland:end_sequence
                sfpreins1:prem_no                       =       cppinland:prem_no
                sfpreins1:build_no                      =       cppinland:build_no
                sfpreins1:inland_marine_total           =       cppinland:premium
                sfpreins1:inland_marine_limit           =       l_inland_limit
                end
            end


        end

        next cppinland
        end

    end

if l_reins_limit1 <> 0 then
    begin
    access sfpreins1, set sfpreins1:policy_no = g_policy_no,
                          sfpreins1:pol_year = g_year,
                          sfpreins1:end_sequence = g_end_sequence, generic

    l_premium = 0
    while sfpreins1:policy_no = g_policy_no and
          sfpreins1:pol_year = g_year and
          sfpreins1:end_sequence = g_end_sequence
        begin
        l_premium = l_premium +
                    sfpreins1:property_fire_total +
                    sfpreins1:property_ec_total +
                    sfpreins1:property_vmm_total +
                    sfpreins1:property_other_total
        l_reins_fire_total = l_reins_fire_total +
                             sfpreins1:property_fire_total
        l_reins_ecvmm_total = l_reins_ecvmm_total +
                              sfpreins1:property_ec_total +
                              sfpreins1:property_vmm_total
        l_reins_other_total = l_reins_other_total +
                              sfpreins1:property_other_total

        if l_include_prop_opt_cov = 1 then
            begin
            l_premium = l_premium +
                        l_optional_coverages
            l_reins_fire_total = l_reins_fire_total + l_optional_coverages
            end

        if l_include_business_income = 1 then
            begin
            l_premium = l_premium +
                        sfpreins1:bi_fire_total +
                        sfpreins1:bi_ec_total +
                        sfpreins1:bi_vmm_total +
                        sfpreins1:bi_other_total
            l_reins_fire_total = l_reins_fire_total +
                                 sfpreins1:bi_fire_total
            l_reins_ecvmm_total = l_reins_ecvmm_total +
                                  sfpreins1:bi_ec_total +
                                  sfpreins1:bi_vmm_total
            l_reins_other_total = l_reins_other_total +
                                  sfpreins1:bi_other_total
            end

        if l_include_glass = 1 then
            begin
            l_premium = l_premium +
                        sfpreins1:crime_total
            end

        if l_include_crime = 1 then
            begin
            l_premium = l_premium +
                        sfpreins1:glass_total
            end

        if l_include_inland_marine = 1 then
            begin
            l_premium = l_premium +
                        sfpreins1:inland_marine_total
            end

        next sfpreins1
        end

    if l_include_irpm = 1 then
        begin
        l_premium_1 = L_premium
        l_irpm_reins_total = 0

        access sfpreins1, set sfpreins1:policy_no = sfpmaster:policy_no,
                              sfpreins1:pol_year = g_year,
                              sfpreins1:end_sequence = g_end_sequence, generic

        while sfpreins1:policy_no = sfpmaster:policy_no and
              sfpreins1:pol_year = sfpmaster:pol_Year and
              sfpreins1:end_sequence = sfpmaster:end_sequence
            begin
            change sfpreins1
                begin
                l_reins_irpm_total     = ((sfpreins1:property_fire_total +
                                         sfpreins1:property_ec_total +
                                         sfpreins1:property_vmm_total +
                                         sfpreins1:property_other_total +
                                         sfpreins1:bi_fire_total +
                                         sfpreins1:bi_ec_total +
                                         sfpreins1:bi_vmm_total +
                                         sfpreins1:bi_other_total +
                                         sfpreins1:crime_total +
                                         sfpreins1:glass_total +
                                         sfpreins1:property_opt_coverages +
                                         sfpreins1:inland_marine_total) *
                                         l_irpm)
                sfpreins1:irpm         = sfpmaster:irpm
                sfpreins1:irpm_total   = (l_reins_irpm_total -
                                         (sfpreins1:property_fire_total +
                                         sfpreins1:property_ec_total +
                                         sfpreins1:property_vmm_total +
                                         sfpreins1:property_other_total +
                                         sfpreins1:bi_fire_total +
                                         sfpreins1:bi_ec_total +
                                         sfpreins1:bi_vmm_total +
                                         sfpreins1:bi_other_total +
                                         sfpreins1:crime_total +
                                         sfpreins1:glass_total +
                                         sfpreins1:property_opt_coverages +
                                         sfpreins1:inland_marine_total))
                L_premium = l_premium +
                            sfpreins1:irpm_total

                l_irpm_reins_total =  l_irpm_reins_total +
                                      sfpreins1:irpm_total
                end

            next sfpreins1
            end

        end
    else
        begin
        l_irpm_reins_total = 0

        access sfpreins1, set sfpreins1:policy_no = sfpmaster:policy_no,
                              sfpreins1:pol_year = g_year,
                              sfpreins1:end_sequence = g_end_sequence, generic

        while sfpreins1:policy_no = sfpmaster:policy_no and
              sfpreins1:pol_year = sfpmaster:pol_year and
              sfpreins1:end_sequence = sfpmaster:end_sequence
            begin
            change sfpreins1
                begin
                l_reins_irpm_total   = 0
                sfpreins1:irpm       = 0
                sfpreins1:irpm_total = 0
                end

            next sfpreins1
            end

        end

    l_premium_1     = l_premium
    l_reins_limit   = l_reins_limit1 - l_total_fac_limit
    l_percentage    = l_reins_limit divide l_reins_limit1
    l_reins_premium = l_premium_1 * l_Percentage

    access sfplocation, set sfplocation:policy_no = sfpmaster:policy_no,
                            sfplocation:pol_Year = sfpmaster:pol_year,
                            sfplocation:end_sequence = sfpmaster:end_sequence,
                            sfplocation:prem_no  = l_key_risk_prem_no,
                            sfplocation:build_no = l_key_risk_build_no, generic

    l_str_state = sfplocation:str_state
    l_zip_code_5 = sfplocation:str_zipcode[1,5]
    if sfpreins:policy_no = sfpmaster:policy_no and
       sfpreins:pol_year = sfpmaster:pol_Year and
       sfpreins:end_sequence = sfpmaster:end_sequence then
        begin
        change sfpreins
            begin
            -- fire
            sfpreins:premium           = l_premium_1
            l_subline_percent          = l_reins_fire_total divide l_premium_1
            sfpreins:limit             = l_reins_limit1
            sfpreins:subline_factor[1] = l_subline_percent

            -- ec/vmm
            l_subline_percent          = l_reins_ecvmm_total divide l_premium_1
            sfpreins:subline_factor[2] = l_subline_percent

            -- other
            l_subline_percent          = l_reins_other_total divide l_premium_1
            sfpreins:subline_factor[3] = l_subline_percent

            if l_include_crime = 1 then
                begin
                l_subline_percent      = l_total_4 divide l_premium_1
                sfpreins:subline_factor[4] = l_subline_percent
                end

            if l_include_glass = 1 then
                begin
                l_subline_percent       = l_total_3 divide l_premium_1
                sfpreins:subline_factor[5] = l_subline_percent
                end

            if l_include_inland_marine = 1 then
                begin
                l_subline_percent       = l_total_6 divide l_premium_1
                sfpreins:subline_factor[6] = l_subline_percent
                end

            if l_include_irpm = 1 then
                begin
                -- irpm
                l_subline_percent          = l_irpm_reins_total divide l_premium_1
                if l_subline_percent < 0 then
                    l_subline_percent = l_subline_percent * -1
                sfpreins:subline_factor[7] = l_subline_percent
                end

            sfpreins:total_premium[1]  = l_reins_premium * sfpreins:subline_factor[1]
            sfpreins:total_premium[2]  = l_reins_premium * sfpreins:subline_factor[2]
            sfpreins:total_premium[3]  = l_reins_premium * sfpreins:subline_factor[3]
            if l_include_crime = 1 then
                sfpreins:total_premium[4] = l_reins_premium * sfpreins:subline_factor[4]
            if l_include_glass = 1 then
                sfpreins:total_premium[5] = l_reins_premium * sfpreins:subline_factor[5]
            if l_include_inland_marine = 1 then
                sfpreins:total_premium[6] = l_reins_premium * sfpreins:subline_factor[6]
            if l_include_irpm = 1 then
                sfpreins:total_premium[7]  = l_reins_premium * sfpreins:subline_factor[7]

            l_reins_total = sfpreins:total_premium[1] +
                            sfpreins:total_premium[2] +
                            sfpreins:total_premium[3] +
                            sfpreins:total_premium[4] +
                            sfpreins:total_premium[5] +
                            sfpreins:total_premium[6] +
                            sfpreins:total_premium[7]

            if l_reins_total <> l_reins_premium then
                begin
                l_reins_total = l_reins_premium - l_reins_total
                sfpreins:total_premium[1] = sfpreins:total_premium[1] +
                                            l_reins_total
                end

            sfpreins:amt_due[1] = sfpreins:total_premium[1]
            sfpreins:amt_due[2] = sfpreins:total_premium[2]
            sfpreins:amt_due[3] = sfpreins:total_premium[3]
            if l_include_crime = 1 then
                sfpreins:amt_due[4] = sfpreins:total_premium[4]
            if l_include_glass = 1 then
                sfpreins:amt_due[5] = sfpreins:total_premium[5]
            if l_include_inland_marine = 1 then
                sfpreins:amt_due[6] = sfpreins:total_premium[6]

            if l_include_irpm = 1 then
                sfpreins:amt_due[7] = sfpreins:total_premium[7]

            sfpreins:retention     = l_reins_limit
            sfpreins:reins_premium = l_reins_premium
            sfpreins:percentage    = l_percentage
            sfpreins:eff_date = sfpname:eff_date
            if sfpname:previous_policy_no = 0 then
                sfpreins:trans_code = 10
            else
                sfpreins:trans_code = 14
            end
        end
    end
else
    begin
    if sfpreins:policy_no = sfpmaster:policy_no and
       sfpreins:pol_year = sfpmaster:pol_Year and
       sfpreins:end_sequence = sfpmaster:end_sequence and
       l_reins_limit1 = 0 and
       sfpname:reinsurance = "N" then
        begin
        delete sfpreins
        delete sfpreins1
        end
    end

end

procedure set_key_risk
begin
access cppgeneral, set cppgeneral:policy_no = sfpmaster:policy_no,
                       cppgeneral:pol_year = sfpmaster:pol_year,
                       cppgeneral:end_sequence = sfpmaster:end_sequence, generic

while cppgeneral:policy_no = sfpmaster:policy_no and
      cppgeneral:pol_year = sfpmaster:pol_Year and
      cppgeneral:end_sequence = sfpmaster:end_sequence
    begin
    if cppgeneral:prem_no  = l_key_risk_prem_no and
       cppgeneral:build_no = l_key_risk_build_no then
        begin
        l_protection = cppgeneral:protection
        change cppgeneral
            begin
            cppgeneral:key_risk = 1
            end
        end
    else
        begin
        change cppgeneral
            begin
            cppgeneral:key_risk = 0
            end
        end

    next cppgeneral
    end

access sfplocation, set sfplocation:policy_no = sfpmaster:policy_no,
                        sfplocation:pol_year = sfpmaster:pol_year,
                        sfplocation:end_sequence = sfpmaster:end_sequence, generic

while sfplocation:policy_no = sfpmaster:policy_no and
      sfplocation:pol_year = sfpmaster:pol_year and
      sfplocation:end_sequence = sfpmaster:end_sequence
    begin
    access cppgeneral, set cppgeneral:policy_no = sfplocation:policy_no,
                           cppgeneral:pol_Year = sfplocation:pol_Year,
                           cppgeneral:end_sequence = sfplocation:end_sequence,
                           cppgeneral:prem_no  = sfplocation:prem_no,
                           cppgeneral:build_no = sfplocation:build_no, generic

    if cppgeneral:key_risk = 1 and
       sfplocation:force_to_subject = 1 then
        begin
        change sfplocation
            begin
            sfplocation:force_to_subject = 0
            end
        end

    next sfplocation
    end

end

procedure set_blanket_key_risk
begin
access cppblanket, set cppblanket:policy_no    = sfpmaster:policy_no,
                       cppblanket:pol_year     = sfpmaster:pol_year,
                       cppblanket:end_sequence = sfpmaster:end_sequence, generic

while cppblanket:policy_no    = sfpmaster:policy_no and
      cppblanket:pol_year     = sfpmaster:pol_Year and
      cppblanket:end_sequence = sfpmaster:end_sequence
    begin
    if cppblanket:prem_no  = l_key_risk_prem_no and
       cppblanket:build_no = l_key_risk_build_no then
        begin
        l_protection = cppblanket:protection
        change cppblanket
            begin
            cppblanket:key_risk = 1
            end
        end
    else
        begin
        change cppblanket
            begin
            cppblanket:key_risk = 0
            end
        end

    next cppblanket
    end

access sfplocation, set sfplocation:policy_no    = sfpmaster:policy_no,
                        sfplocation:pol_year     = sfpmaster:pol_year,
                        sfplocation:end_sequence = sfpmaster:end_sequence, generic

while sfplocation:policy_no    = sfpmaster:policy_no and
      sfplocation:pol_year     = sfpmaster:pol_year and
      sfplocation:end_sequence = sfpmaster:end_sequence
    begin
    access cppblanket, set cppblanket:policy_no    = sfplocation:policy_no,
                           cppblanket:pol_Year     = sfplocation:pol_Year,
                           cppblanket:end_sequence = sfplocation:end_sequence,
                           cppblanket:prem_no      = sfplocation:prem_no,
                           cppblanket:build_no     = sfplocation:build_no, generic

    if cppblanket:key_risk = 1 and
       sfplocation:force_to_subject = 1 then
        begin
        change sfplocation
            begin
            sfplocation:force_to_subject = 0
            end
        end

    next sfplocation
    end

end

procedure update_sfpreins1_property
begin
access sfpreins1, set sfpreins1:policy_no = cppgeneral:policy_no,
                      sfpreins1:pol_year  = cppgeneral:pol_year,
                      sfpreins1:end_sequence = cppgeneral:end_sequence,
                      sfpreins1:prem_no  = cppgeneral:prem_no,
                      sfpreins1:build_no = cppgeneral:build_no, generic

l_lob_end_code = "P"
do access_sfpmisc
if sfpreins1:policy_no = cppgeneral:policy_no and
   sfpreins1:pol_year = cppgeneral:pol_year and
   sfpreins1:end_sequence = cppgeneral:end_sequence and
   sfpreins1:prem_no  = cppgeneral:prem_no and
   sfpreins1:build_no = cppgeneral:build_no then
    begin
    change sfpreins1
        begin
        if l_first_misc = "Y" then
            begin
            l_first_misc = "N"
            sfpreins1:property_fire_total   =       cppgeneral:premium[1] +
                                                    cppgeneral:premium[7] +
                                                    sfpreins1:property_fire_total +
                                                    l_misc_premium
            end
        else
            begin
            sfpreins1:property_fire_total   =       cppgeneral:premium[1] +
                                                    cppgeneral:premium[7] +
                                                    sfpreins1:property_fire_total
            end
        sfpreins1:property_ec_total     =       cppgeneral:premium[2] +
                                                cppgeneral:premium[8] +
                                                sfpreins1:property_ec_total
        sfpreins1:property_vmm_total    =       cppgeneral:premium[3] +
                                                cppgeneral:premium[9] +
                                                sfpreins1:property_vmm_total
        sfpreins1:property_other_total  =       cppgeneral:premium[4] +
                                                cppgeneral:premium[5] +
                                                cppgeneral:premium[6] +
                                                cppgeneral:premium[10] +
                                                cppgeneral:premium[11] +
                                                cppgeneral:premium[12] +
                                                sfpreins1:property_other_total
        if l_include_business_income = 1 and
           cppgeneral:blanket = 0 then
            begin
            sfpreins1:bi_fire_total     =       cppbusiness:bi_premium[1] +
                                                sfpreins1:bi_fire_total
            sfpreins1:bi_ec_total       =       cppbusiness:bi_premium[2] +
                                                sfpreins1:bi_ec_total
            sfpreins1:bi_vmm_total      =       cppbusiness:bi_premium[3] +
                                                sfpreins1:bi_vmm_total
            sfpreins1:bi_other_total    =       cppbusiness:bi_premium[4] +
                                                cppbusiness:bi_premium[5] +
                                                cppbusiness:bi_premium[6] +
                                                sfpreins1:bi_other_total
            end
        else
            begin
            sfpreins1:bi_limit          =       0
            sfpreins1:bi_fire_total     =       0
            sfpreins1:bi_ec_total       =       0
            sfpreins1:bi_vmm_total      =       0
            sfpreins1:bi_other_total    =       0
            end

        sfpreins1:crime_total           =       0
        sfpreins1:glass_total           =       0
        sfpreins1:inland_marine_total   =       0
        sfpreins1:irpm_total            =       0
        sfpreins1:irpm                  =       0
        sfpreins1:key_risk              =       cppgeneral:key_risk
        sfpreins1:force_to_subject      =       l_force_to_subject
        end
    end
else
    begin
    add sfpreins1
        begin
        sfpreins1:policy_no             =       cppgeneral:policy_no
        sfpreins1:pol_year              =       cppgeneral:pol_year
        sfpreins1:end_sequence          =       cppgeneral:end_sequence
        sfpreins1:prem_no               =       cppgeneral:prem_no
        sfpreins1:build_no              =       cppgeneral:build_no
        sfpreins1:property_limit        =       l_property_limit
        if l_first_misc = "Y" then
            begin
            l_First_misc = "N"
            sfpreins1:property_fire_total   =       cppgeneral:premium[1] +
                                                    cppgeneral:premium[7] +
                                                    l_misc_premium
            end
        else
            begin
            sfpreins1:property_fire_total   =       cppgeneral:premium[1] +
                                                    cppgeneral:premium[7]
            end
        sfpreins1:property_ec_total     =       cppgeneral:premium[2] +
                                                cppgeneral:premium[8]
        sfpreins1:property_vmm_total    =       cppgeneral:premium[3] +
                                                cppgeneral:premium[9]
        sfpreins1:property_other_total  =       cppgeneral:premium[4] +
                                                cppgeneral:premium[5] +
                                                cppgeneral:premium[6] +
                                                cppgeneral:premium[10] +
                                                cppgeneral:premium[11] +
                                                cppgeneral:premium[12]
        if l_include_business_income = 1 then
            sfpreins1:bi_limit          =       l_business_income_limit
        else
            sfpreins1:bi_limit          =       0
        if l_include_business_income = 1 and
           cppgeneral:blanket = 0 then
            begin
            sfpreins1:bi_fire_total     =       cppbusiness:bi_premium[1]
            sfpreins1:bi_ec_total       =       cppbusiness:bi_premium[2]
            sfpreins1:bi_vmm_total      =       cppbusiness:bi_premium[3]
            sfpreins1:bi_other_total    =       cppbusiness:bi_premium[4] +
                                                cppbusiness:bi_premium[5] +
                                                cppbusiness:bi_premium[6]
            end
        else
            begin
            sfpreins1:bi_fire_total     =       0
            sfpreins1:bi_ec_total       =       0
            sfpreins1:bi_vmm_total      =       0
            sfpreins1:bi_other_total    =       0
            end

        sfpreins1:crime_total           =       0
        sfpreins1:glass_total           =       0
        sfpreins1:inland_marine_total   =       0
        sfpreins1:irpm_total            =       0
        sfpreins1:irpm                  =       0
        sfpreins1:key_risk              =       cppgeneral:key_risk
        sfpreins1:force_to_subject      =       l_force_to_subject
        end

    end

end

procedure update_sfpreins1_bi
begin
access sfpreins1, set sfpreins1:policy_no = cppbusiness:policy_no,
                      sfpreins1:pol_year  = cppbusiness:pol_year,
                      sfpreins1:end_sequence = cppbusiness:end_sequence, generic

if sfpreins1:policy_no = cppbusiness:policy_no and
   sfpreins1:pol_year = cppbusiness:pol_year and
   sfpreins1:end_sequence = cppbusiness:end_sequence then
    begin
    change sfpreins1
        begin
        if l_include_business_income = 1 then
            begin
            sfpreins1:bi_fire_total     =       cppbusiness:bi_premium[1] +
                                                sfpreins1:bi_fire_total
            sfpreins1:bi_ec_total       =       cppbusiness:bi_premium[2] +
                                                sfpreins1:bi_ec_total
            sfpreins1:bi_vmm_total      =       cppbusiness:bi_premium[3] +
                                                sfpreins1:bi_vmm_total
            sfpreins1:bi_other_total    =       cppbusiness:bi_premium[4] +
                                                cppbusiness:bi_premium[5] +
                                                cppbusiness:bi_premium[6] +
                                                sfpreins1:bi_other_total
            end
        else
            begin
            sfpreins1:bi_limit          =       0
            sfpreins1:bi_fire_total     =       0
            sfpreins1:bi_ec_total       =       0
            sfpreins1:bi_vmm_total      =       0
            sfpreins1:bi_other_total    =       0
            end
        end
    end
else
    begin
    add sfpreins1
        begin
        sfpreins1:policy_no             =       cppgeneral:policy_no
        sfpreins1:pol_year              =       cppgeneral:pol_year
        sfpreins1:end_sequence          =       cppgeneral:end_sequence
        sfpreins1:prem_no               =       cppgeneral:prem_no
        sfpreins1:build_no              =       cppgeneral:build_no
        if l_include_business_income = 1 then
            begin
            sfpreins1:bi_fire_total     =       cppbusiness:bi_premium[1] +
                                                sfpreins1:bi_fire_total
            sfpreins1:bi_ec_total       =       cppbusiness:bi_premium[2] +
                                                sfpreins1:bi_ec_total
            sfpreins1:bi_vmm_total      =       cppbusiness:bi_premium[3] +
                                                sfpreins1:bi_vmm_total
            sfpreins1:bi_other_total    =       cppbusiness:bi_premium[4] +
                                                cppbusiness:bi_premium[5] +
                                                cppbusiness:bi_premium[6] +
                                                sfpreins1:bi_other_total
            end
        else
            begin
            sfpreins1:bi_fire_total     =       0
            sfpreins1:bi_ec_total       =       0
            sfpreins1:bi_vmm_total      =       0
            sfpreins1:bi_other_total    =       0
            end
        end
    end

end

procedure update_blanket_sfpreins1_property
begin
access sfpreins1, set sfpreins1:policy_no    = cppblanket:policy_no,
                      sfpreins1:pol_year     = cppblanket:pol_year,
                      sfpreins1:end_sequence = cppblanket:end_sequence,
                      sfpreins1:prem_no      = cppblanket:prem_no,
                      sfpreins1:build_no     = cppblanket:build_no, generic

l_lob_end_code = "P"
do access_sfpmisc
if sfpreins1:policy_no    <> cppblanket:policy_no or
   sfpreins1:pol_year     <> cppblanket:pol_year or
   sfpreins1:end_sequence <> cppblanket:end_sequence or
   sfpreins1:prem_no      <> cppblanket:prem_no or
   sfpreins1:build_no     <> cppblanket:build_no then
    begin
    add sfpreins1
        begin
        sfpreins1:policy_no             =       cppblanket:policy_no
        sfpreins1:pol_year              =       cppblanket:pol_year
        sfpreins1:end_sequence          =       cppblanket:end_sequence
        sfpreins1:prem_no               =       cppgeneral:prem_no
        sfpreins1:build_no              =       cppgeneral:build_no
        sfpreins1:property_limit        =       l_property_limit
        if l_first_misc = "Y" then
            begin
            l_first_misc = "N"
            sfpreins1:property_fire_total =     cppgeneral:premium[1] +
                                                cppgeneral:premium[7] +
                                                sfpreins1:property_fire_total +
                                                l_misc_premium
            end
        else
            begin
            sfpreins1:property_fire_total =     cppgeneral:premium[1] +
                                                cppgeneral:premium[7] +
                                                sfpreins1:property_fire_total
            end
        sfpreins1:property_ec_total     =       cppgeneral:premium[2] +
                                                cppgeneral:premium[8] +
                                                sfpreins1:property_ec_total
        sfpreins1:property_vmm_total    =       cppgeneral:premium[3] +
                                                cppgeneral:premium[9] +
                                                sfpreins1:property_vmm_total
        sfpreins1:property_other_total  =       cppgeneral:premium[4] +
                                                cppgeneral:premium[5] +
                                                cppgeneral:premium[6] +
                                                cppgeneral:premium[10] +
                                                cppgeneral:premium[11] +
                                                cppgeneral:premium[12] +
                                                sfpreins1:property_other_total
        if l_include_business_income = 1 then
            sfpreins1:bi_limit          =       l_business_income_limit
        else
            sfpreins1:bi_limit          =       0
/*        if l_include_business_income = 1 then--and
--           cppgeneral:blanket = 0 then
            begin
            sfpreins1:bi_limit          =       l_business_income_limit
            sfpreins1:bi_fire_total     =       cppbusiness:bi_premium[1] +
                                                sfpreins1:bi_fire_total
            sfpreins1:bi_ec_total       =       cppbusiness:bi_premium[2] +
                                                sfpreins1:bi_ec_total
            sfpreins1:bi_vmm_total      =       cppbusiness:bi_premium[3] +
                                                sfpreins1:bi_vmm_total
            sfpreins1:bi_other_total    =       cppbusiness:bi_premium[4] +
                                                cppbusiness:bi_premium[5] +
                                                cppbusiness:bi_premium[6] +
                                                sfpreins1:bi_other_total
            end
        else
            begin
            sfpreins1:bi_limit          =       0
            sfpreins1:bi_fire_total     =       0
            sfpreins1:bi_ec_total       =       0
            sfpreins1:bi_vmm_total      =       0
            sfpreins1:bi_other_total    =       0
            end*/

        sfpreins1:crime_total           =       0
        sfpreins1:glass_total           =       0
        sfpreins1:inland_marine_total   =       0
        sfpreins1:irpm_total            =       0
        sfpreins1:irpm                  =       0
        sfpreins1:key_risk              =       cppblanket:key_risk
        sfpreins1:force_to_subject      =       l_force_to_subject
        end
    end
else
    begin
    change sfpreins1
        begin
        sfpreins1:property_limit        =       l_property_limit
        if l_first_misc = "Y" then
            begin
            l_first_misc = "N"
            sfpreins1:property_fire_total =     cppgeneral:premium[1] +
                                                cppgeneral:premium[7] +
                                                sfpreins1:property_fire_total +
                                                l_misc_premium
            end
        else
            begin
            sfpreins1:property_fire_total =     cppgeneral:premium[1] +
                                                cppgeneral:premium[7] +
                                                sfpreins1:property_fire_total
            end
        sfpreins1:property_ec_total     =       cppgeneral:premium[2] +
                                                cppgeneral:premium[8] +
                                                sfpreins1:property_ec_total
        sfpreins1:property_vmm_total    =       cppgeneral:premium[3] +
                                                cppgeneral:premium[9] +
                                                sfpreins1:property_vmm_total
        sfpreins1:property_other_total  =       cppgeneral:premium[4] +
                                                cppgeneral:premium[5] +
                                                cppgeneral:premium[6] +
                                                cppgeneral:premium[10] +
                                                cppgeneral:premium[11] +
                                                cppgeneral:premium[12] +
                                                sfpreins1:property_other_total
        if l_include_business_income = 1 then
            sfpreins1:bi_limit          =       l_business_income_limit
        else
            sfpreins1:bi_limit          =       0
/*        if l_include_business_income = 1 then--and
--           cppgeneral:blanket = 0 then
            begin
            sfpreins1:bi_limit          =       l_business_income_limit
            sfpreins1:bi_fire_total     =       cppbusiness:bi_premium[1] +
                                                sfpreins1:bi_fire_total
            sfpreins1:bi_ec_total       =       cppbusiness:bi_premium[2] +
                                                sfpreins1:bi_ec_total
            sfpreins1:bi_vmm_total      =       cppbusiness:bi_premium[3] +
                                                sfpreins1:bi_vmm_total
            sfpreins1:bi_other_total    =       cppbusiness:bi_premium[4] +
                                                cppbusiness:bi_premium[5] +
                                                cppbusiness:bi_premium[6] +
                                                sfpreins1:bi_other_total
            end
        else
            begin
            sfpreins1:bi_limit          =       0
            sfpreins1:bi_fire_total     =       0
            sfpreins1:bi_ec_total       =       0
            sfpreins1:bi_vmm_total      =       0
            sfpreins1:bi_other_total    =       0
            end*/

        sfpreins1:crime_total           =       0
        sfpreins1:glass_total           =       0
        sfpreins1:inland_marine_total   =       0
        sfpreins1:irpm_total            =       0
        sfpreins1:irpm                  =       0
        sfpreins1:key_risk              =       cppblanket:key_risk
        sfpreins1:force_to_subject      =       l_force_to_subject
        end
    end
end

procedure access_sfpend
begin
Access sfpend, Set sfpend:policy_no = G_policy_no,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpend:prem_no = l_prem_no,
                   sfpend:build_no = l_build_no, generic


While sfpend:policy_no = g_policy_no and
      sfpend:pol_year = g_year and
      sfpend:end_sequence = g_end_sequence and
      sfpend:prem_no = l_prem_no and
      sfpend:build_no = l_build_no
        begin
        if sfpend:lob_end_code = l_lob_end_code then
            begin
            l_end_premium = l_end_premium + sfpend:premium + sfpend:manual_premium
            end

        next sfpend
        end

end

procedure access_sfpend_1
begin
Access sfpend, Set sfpend:policy_no = G_policy_no,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpend:prem_no = l_prem_no,
                   sfpend:build_no = l_build_no, generic

While sfpend:policy_no = g_policy_no and
      sfpend:pol_year = g_year and
      sfpend:end_sequence = g_end_sequence and
      sfpend:prem_no = l_prem_no and
      sfpend:build_no = l_build_no
        begin
        if sfpend:lob_end_code = l_lob_end_code then
            begin
            l_end_premium = l_end_premium + sfpend:premium + sfpend:manual_premium
            end

        next sfpend
        end

end

procedure access_sfpmisc
begin
Access sfpmisc, Set sfpmisc:policy_no = G_policy_no,
                    sfpmisc:pol_year = g_year,
                    sfpmisc:end_sequence = g_end_sequence, generic

L_misc_premium = 0
While sfpmisc:policy_no = g_policy_no and
      sfpmisc:pol_year = g_year and
      sfpmisc:end_sequence = g_end_sequence
        begin
        if sfpmisc:lob_end_code = l_lob_end_code then
            begin
            l_misc_premium = l_misc_premium + sfpmisc:premium
            end

        next sfpmisc
        end

end

procedure remove_terror_form
begin
Do ACCESS_SFSMSOTERROR
Access sfpend_alias, Set sfpend_alias:policy_no = G_policy_no,
                         sfpend_alias:pol_year = g_Year,
                         sfpend_alias:end_sequence = g_end_sequence, generic

L_FOUND = 0
While sfpend_alias:policy_no = g_policy_no and
      sfpend_alias:pol_year = g_Year and
      sfpend_alias:end_sequence = g_end_sequence
        begin
        If sfpend_alias:CODE = SFSMSOTERROR:TERRORISM_FORM_TO_REMOVE Then
            delete sfpend_alias

        If sfpend_alias:CODE = SFSMSOTERROR:im_form_to_add[2] Then
            delete sfpend_alias

        if sfpend_alias:code one of "MCM411", "MCM412" and
           sfpname:line_of_business one of 13 then
            delete sfpend_alias

        if sfpend_alias:code = uppercase(sfsmsoterror:tpd_forms_to_print[2]) then
            delete sfpend_alias

        next sfpend_alias
        end

Do SUBCODE
L_CODE = SFSMSOTERROR:TERRORISM_FORM_TO_remove
Do ACCESS_KEY
Add sfpend_alias  --ADDS ENDORSEMENTS TO sfpend
    Begin
    sfpend_alias:policy_no       = g_policy_no
    sfpend_alias:pol_year        = g_year
    sfpend_alias:end_sequence    = g_end_sequence
    sfpend_alias:prem_no         = 0
    sfpend_alias:build_no        = 0
    sfpend_alias:SUB_CODE        = L_SUB_CODE
    sfpend_alias:CODE            = l_code
    sfpend_alias:FORM_EDITION    = l_FORM_EDITION
    sfpend_alias:manual_PREMIUM  = 0
    sfpend_alias:DESCRIPTION     = l_DESCRIPTION
    sfpend_alias:lob_end_code    = "A"
    sfpend_alias:policy_wide_form = 1
    sfpend_alias:terrorism_Form  = 1
    End

if ((sfscompany:boiler_rating = 4 and
   sfpname:policy_type = "R") or
   (sfscompany:boiler_rating = 4 and
   sfpname:previous_policy_no <> 0)) then
    begin
    Do SUBCODE
    l_sub_code = l_sub_code + 10
    L_CODE     = uppercase(SFSMSOTERROR:tpd_forms_to_print[2])
    Do ACCESS_KEY
    Add sfpEND_alias
        Begin
        sfpEND_alias:policy_NO        = G_policy_NO
        sfpend_alias:pol_year         = g_year
        sfpend_alias:end_sequence     = g_end_sequence
        sfpEND_alias:PREM_NO          = 0
        sfpEND_alias:BUILD_NO         = 0
        sfpEND_alias:SUB_CODE         = L_SUB_CODE
        sfpEND_alias:CODE             = l_code
        sfpEND_alias:FORM_EDITION     = L_FORM_EDITION
        sfpEND_alias:PREMIUM          = 0
        sfpEND_alias:DESCRIPTION      = L_DESCRIPTION
        sfpend_alias:terrorism_form   = 1
        sfpend_alias:policy_wide_form = 1
        sfpend_alias:lob_end_code     = "A"
        end
    End

if sfscompany:boiler_rating = 4 and
   l_total_6 <> 0 and
   sfsline:lob_code <> "CINLAND" then
    begin
    Do SUBCODE
    l_sub_code = l_sub_code + 10
    L_CODE     = uppercase(SFSMSOTERROR:im_form_to_add[2])
    Do ACCESS_KEY
    Add sfpEND_alias
        Begin
        sfpEND_alias:policy_NO        = G_policy_NO
        sfpend_alias:pol_year         = g_year
        sfpend_alias:end_sequence     = g_end_sequence
        sfpEND_alias:PREM_NO          = 0
        sfpEND_alias:BUILD_NO         = 0
        sfpEND_alias:SUB_CODE         = L_SUB_CODE
        sfpEND_alias:CODE             = l_code
        sfpEND_alias:FORM_EDITION     = L_FORM_EDITION
        sfpEND_alias:PREMIUM          = 0
        sfpEND_alias:DESCRIPTION      = L_DESCRIPTION
        sfpend_alias:terrorism_form   = 1
        sfpend_alias:policy_wide_form = 1
        sfpend_alias:lob_end_code     = "A"
        end
    End

end

Procedure COMPANY_DEVIATION
Begin
access sfscompany, set sfscompany:company_id = sfpname:company_id, generic

access cppgeneral, set cppgeneral:policy_no = g_policy_no,
                       cppgeneral:pol_year = g_year,
                       cppgeneral:end_sequence = g_end_sequence, generic

access cppdeviation, set cppdeviation:policy_no = g_policy_no,
                         cppdeviation:pol_year = g_year,
                         cppdeviation:end_sequence = g_end_sequence, generic

if sfscompany:boiler_rating = 4 and
   cppgeneral:policy_no = g_policy_no then
    begin
    if cppgeneral:company_deviation[2] = 0 then
        l_property_deviation = 1.00
    else
    if cpsdefault:deviation_number_not_factor = 1 and
       cppgeneral:company_deviation[2] <> 1.00 then
        l_property_deviation = (1 + (cppgeneral:company_deviation[2] * 0.01))
    else
        l_property_deviation = cppgeneral:company_deviation[2]
    end

if sfscompany:boiler_rating = 4 and
   cppgeneral:policy_no = g_policy_no then
    begin
    if cppgeneral:company_deviation[3] = 0 then
        l_property_deviation_1 = 1.00
    else
    if cpsdefault:deviation_number_not_factor = 1 and
       cppgeneral:company_deviation[3] <> 1.00 then
        l_property_deviation_1 = (1 + (cppgeneral:company_deviation[3] * 0.01))
    else
        l_property_deviation_1 = cppgeneral:company_deviation[3]
    end

if sfscompany:boiler_rating = 4 and
   cppdeviation:policy_no = g_policy_no then
    begin
    if cppdeviation:irpm_deviation = 0 then
        l_liability_deviation = 1.00
    else
    if cpsdefault:deviation_number_not_factor = 1 and
       cppdeviation:irpm_deviation <> 1.00 then
        l_liability_deviation = (1 + (cppdeviation:irpm_deviation * 0.01))
    else
        l_liability_deviation = cppdeviation:irpm_deviation
    end

if sfscompany:boiler_rating = 4 and
   cppdeviation:policy_no = g_policy_no then
    begin
    if cppdeviation:exp_factor = 0 then
        l_liability_deviation_1 = 1.00
    else
    if cpsdefault:deviation_number_not_factor = 1 and
       cppdeviation:exp_factor <> 1.00 then
        l_liability_deviation_1 = (1 + (cppdeviation:exp_factor * 0.01))
    else
        l_liability_deviation_1 = cppdeviation:exp_factor
    end

if sfscompany:boiler_rating <> 4 then
    l_irpm_deviation = 1.00

End

Procedure GET_TERRORISM_PREMIUM
begin
Do ACCESS_SFSMSOTERROR
Access sfpend, Set sfpend:policy_no = G_policy_no,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence, generic

L_FOUND = 0
l_remove_terror_found = 0
While sfpend:policy_no = G_policy_no and
      sfpend:pol_year = g_year and
      sfpend:end_sequence = g_end_sequence
        begin
        If sfpend:CODE = SFSMSOTERROR:TERRORISM_FORM_TO_ADD Then
            l_found = 1

        if sfpend:code = sfsmsoterror:terrorism_form_to_remove then
            l_remove_terror_found = 1

        next sfpend
        end

if ((l_found = 1 or
   sfpmaster:trans_code one of 14 or
   (l_found = 0 and
   l_remove_terror_found = 0)) and
   l_terror_percentage <> 0) then
    begin
    if sfscompany:boiler_rating one of 4 then
        begin
        do company_deviation
        do property_totals
        do business_income_totals
        do liability_totals
        l_property_terror  = l_cppgeneral_total
        l_inland_terror    = l_total_6
        l_business_terror  = l_cppbusiness_total_1
        l_glass_terror     = l_total_3
        l_crime_terror     = l_total_4
        l_liability_terror = l_cppliability_total_1
        l_terrorism_premium = ((l_property_terror +
                              l_business_terror +
                              l_glass_terror +
                              l_inland_terror +
                              l_crime_terror +
                              l_liability_terror) *
                              l_terror_PERCENTAGE)
        end
    else
        begin
        L_TERRORISM_PREMIUM = L_TOTAL * L_TERROR_PERCENTAGE

        If L_TERRORISM_PREMIUM <= L_TERROR_MINIMUM Then
            begin
            L_TERRORISM_PREMIUM = L_TERROR_MINIMUM
            end
        end

   l_total_9 = l_terrorism_premium
   Do ADD_TERRORISM_ENDORSEMENT
   end
end

procedure property_totals
begin
access cppgeneral, set cppgeneral:policy_no    = g_policy_no,
                       cppgeneral:pol_year     = g_year,
                       cppgeneral:end_sequence = g_end_sequence, generic

l_cppgeneral_total = 0
l_prem_no = cppgeneral:prem_no
l_build_no = cppgeneral:build_no
l_rate_type = cppgeneral:rate_type
while cppgeneral:policy_no    = g_policy_no and
      cppgeneral:pol_year     = g_year and
      cppgeneral:end_sequence = g_end_sequence
     begin
     if cppgeneral:prem_no <> l_prem_no or
        cppgeneral:build_no <> l_build_no then
         begin
         l_prem_no = cppgeneral:prem_no
         l_build_no = cppgeneral:build_no
         l_rate_type = cppgeneral:rate_type
         end

     l_cppgeneral_total_1  = 0
     l_cppgeneral_total_2  = 0
     l_cppgeneral_total_3  = 0
     l_cppgeneral_total_4  = 0
     l_cppgeneral_total_5  = 0
     l_cppgeneral_total_6  = 0
     l_cppgeneral_total_7  = 0
     l_cppgeneral_total_8  = 0
     l_cppgeneral_total_9  = 0
     l_cppgeneral_total_10 = 0
     l_cppgeneral_total_11 = 0
     l_cppgeneral_total_12 = 0
     l_cppgeneral_total_13 = 0
     if cppgeneral:premium[1] <> 0 then
         begin
         l_cppgeneral_total_1 = cppgeneral:premium[1] divide
                                l_property_deviation divide
                                l_property_deviation_1
         end

     if cppgeneral:premium[2] <> 0 then
         begin
         l_cppgeneral_total_2 = cppgeneral:premium[2] divide
                                l_property_deviation divide
                                l_property_deviation_1
         end
     if cppgeneral:premium[3] <> 0 then
         begin
         l_cppgeneral_total_3 = cppgeneral:premium[3] divide
                                l_property_deviation divide
                                l_property_deviation_1
         end
     if cppgeneral:premium[4] <> 0 then
         begin
         l_cppgeneral_total_4 = cppgeneral:premium[4] divide
                                l_property_deviation divide
                                l_property_deviation_1
         end
     if cppgeneral:premium[5] <> 0 then
         begin
         l_cppgeneral_total_5 = cppgeneral:premium[5] divide
                                l_property_deviation divide
                                l_property_deviation_1
         end
     if cppgeneral:premium[6] <> 0 then
         begin
         l_cppgeneral_total_6 = cppgeneral:premium[6] divide
                                l_property_deviation divide
                                l_property_deviation_1
         end
     if cppgeneral:premium[7] <> 0 then
         begin
         l_cppgeneral_total_7 = cppgeneral:premium[7] divide
                                l_property_deviation divide
                                l_property_deviation_1
         end
     if cppgeneral:premium[8] <> 0 then
         begin
         l_cppgeneral_total_8 = cppgeneral:premium[8] divide
                                l_property_deviation divide
                                l_property_deviation_1
         end
     if cppgeneral:premium[9] <> 0 then
         begin
         l_cppgeneral_total_9 = cppgeneral:premium[9] divide
                                l_property_deviation divide
                                l_property_deviation_1
         end
     if cppgeneral:premium[10] <> 0 then
         begin
         l_cppgeneral_total_10 = cppgeneral:premium[10] divide
                                 l_property_deviation divide
                                 l_property_deviation_1
         end
     if cppgeneral:premium[11] <> 0 then
         begin
         l_cppgeneral_total_11 = cppgeneral:premium[11] divide
                                 l_property_deviation divide
                                 l_property_deviation_1
         end
     if cppgeneral:premium[12] <> 0 then
         begin
         l_cppgeneral_total_12 = cppgeneral:premium[12] divide
                                 l_property_deviation divide
                                 l_property_deviation_1
         end
    access cppproperty, set cppproperty:policy_no = cppgeneral:policy_no,
                            cppproperty:pol_year = cppgeneral:pol_year,
                            cppproperty:end_sequence = cppgeneral:end_sequence,
                            cppproperty:prem_no  = cppgeneral:prem_no,
                            cppproperty:build_no = cppgeneral:build_no, generic

    if l_prem_no = cppgeneral:prem_no and
       l_build_no = cppgeneral:build_no and
       l_rate_type = cppgeneral:rate_type then
        begin
        L_OPTIONAL_COVERAGES = cppPROPERTY:AR_PREM +
                           cppPROPERTY:INFLATION_PREMIUM[1] +
                           cppPROPERTY:PEAK_SEASON_PREM +
                           cppPROPERTY:GLASS_PREM +
                           cppPROPERTY:SIGNS_ATTACHED_PREM +
                           cppPROPERTY:SIGNS_NOT_ATTACHED_PREM +
                           cppPROPERTY:BUILDING_CODE_PREM +
                           cppPROPERTY:LOSS_UTILITY_PREM +
                           cppPROPERTY:MECHANICAL_BREAKDOWN_PREM +
                           cppPROPERTY:DEBRIS_REMOVAL_PREM +
                           cppPROPERTY:OFF_PREM_OTHER_LOC_PREM +
                           cppPROPERTY:OFF_PREM_IN_TRANSIT_PREM +
                           cppproperty:mcp505_premium +
                           cppPROPERTY:OUTDOOR_PROPERTY_PREM +
                           cppPROPERTY:PERSONAL_EFFECTS_PREM +
                           cppPROPERTY:PERSONAL_PROPERTY_OTHER_PREM +
                           cppPROPERTY:VALUABLE_PAPERS_PREM +
                           cppPROPERTY:PRECIOUS_METALS_PREM +
                           cppPROPERTY:WATER_BACKUP_PREMIUM +
                           cppproperty:loss_assessment_prem
        end

    l_lob_end_code = "P"
    l_end_premium = 0
    do access_sfpend

    l_cppgeneral_total_13 = l_cppgeneral_total_1 +
                            l_cppgeneral_total_2 +
                            l_cppgeneral_total_3 +
                            l_cppgeneral_total_4 +
                            l_cppgeneral_total_5 +
                            l_cppgeneral_total_6 +
                            l_cppgeneral_total_7 +
                            l_cppgeneral_total_8 +
                            l_cppgeneral_total_9 +
                            l_cppgeneral_total_10 +
                            l_cppgeneral_total_11 +
                            l_cppgeneral_total_12
    l_cppgeneral_total = l_cppgeneral_total +
                         l_cppgeneral_total_13 +
                         l_optional_coverages +
                         l_end_premium

     next cppgeneral
     end

l_lob_end_code = "P"
do access_sfpmisc
l_cppgeneral_total_1 = l_cppgeneral_total_1 +
                       l_misc_premium
end

procedure business_income_totals
begin
access cppbusiness, set cppbusiness:policy_no    = g_policy_no,
                        cppbusiness:pol_year     = g_year,
                        cppbusiness:end_sequence = g_end_sequence, generic

l_cppbusiness_total_1 = 0
while cppbusiness:policy_no    = g_policy_no and
      cppbusiness:pol_year     = g_year and
      cppbusiness:end_sequence = g_end_sequence
     begin
     if cppbusiness:bi_premium[1] <> 0 then
         begin
         l_cppbusiness_total_1 = (l_cppbusiness_total_1 +
                                (cppbusiness:bi_premium[1] divide
                                l_property_deviation divide
                                l_property_deviation_1))
         end
     if cppbusiness:bi_premium[2] <> 0 then
         begin
         l_cppbusiness_total_1 = (l_cppbusiness_total_1 +
                                (cppbusiness:bi_premium[2] divide
                                l_property_deviation divide
                                l_property_deviation_1))
         end
     if cppbusiness:bi_premium[3] <> 0 then
         begin
         l_cppbusiness_total_1 = (l_cppbusiness_total_1 +
                                (cppbusiness:bi_premium[3] divide
                                l_property_deviation divide
                                l_property_deviation_1))
         end
     if cppbusiness:bi_premium[4] <> 0 then
         begin
         l_cppbusiness_total_1 = (l_cppbusiness_total_1 +
                                (cppbusiness:bi_premium[4] divide
                                l_property_deviation divide
                                l_property_deviation_1))
         end
     if cppbusiness:bi_premium[5] <> 0 then
         begin
         l_cppbusiness_total_1 = (l_cppbusiness_total_1 +
                                (cppbusiness:bi_premium[5] divide
                                l_property_deviation divide
                                l_property_deviation_1))
         end
    l_lob_end_code = "B"
    l_end_premium = 0
    do access_sfpend

    l_cppbusiness_total_1 = l_cppbusiness_total_1 +
                            l_end_premium

     next cppbusiness
     end

l_lob_end_code = "B"
do access_sfpmisc
l_cppbusiness_total_1 = l_cppbusiness_total_1 +
                        l_misc_premium
end

procedure liability_totals
begin
access cppliability, set cppliability:policy_no    = g_policy_no,
                         cppliability:pol_year     = g_year,
                         cppliability:end_sequence = g_end_sequence, generic

l_cppliability_total_1 = 0
while cppliability:policy_no    = g_policy_no and
      cppliability:pol_year     = g_year and
      cppliability:end_sequence = g_end_sequence
    begin
    l_cppliability_total_1 = (l_cppliability_total_1 +
                             (cppliability:prem[1] divide
                             l_liability_deviation divide
                             l_liability_deviation_1))
    l_cppliability_total_1 = (l_cppliability_total_1 +
                             (cppliability:prem[2] divide
                             l_liability_deviation divide
                             l_liability_deviation_1))
    l_cppliability_total_1 = l_cppliability_total_1 +
                             cppliability:total_endorsements +
                             cppliability:total_misc +
                             cppliability:independent_contractor_premium

     next cppliability
     end

end

Procedure ADD_TERRORISM_ENDORSEMENT
begin
Access sfpend, Set sfpend:policy_no = G_policy_no,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence, generic

L_FOUND = 0
While sfpend:policy_no = G_policy_no and
      sfpend:pol_year = g_year and
      sfpend:end_sequence = g_end_sequence
        begin
        If sfpend:CODE = SFSMSOTERROR:TERRORISM_FORM_TO_ADD Then
            Delete sfpend
        If sfpend:CODE = SFSMSOTERROR:IM_FORM_TO_ADD[1] Then
            Delete sfpend
        if sfpend:code one of "MCM411", "MCM412" and
           sfpname:line_of_business one of 13 then
            delete sfpend
        if sfpend:code = uppercase(sfsmsoterror:tpd_forms_to_print[2]) then
            delete sfpend

        next sfpend
        end

--MUST REACCESS THE FILE THE WHILE LOOP ABOVE HAVE MOVED ME PAST WHERE i
--WANT TO BE.
Access sfpend, Set sfpend:policy_no = G_policy_no,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence, generic

If sfpmaster:remove_terrorism_form = 0 Then
     begin
     Do SUBCODE
     L_CODE = SFSMSOTERROR:TERRORISM_FORM_TO_ADD
     Do ACCESS_KEY
     l_sub_code = L_sub_code + 10
     Add sfpend  --ADDS ENDORSEMENTS TO sfpend
         Begin
         sfpend:policy_no    = g_policy_no
         sfpend:pol_year     = g_year
         sfpend:end_sequence = g_end_sequence
         sfpend:prem_no      = 0
         sfpend:build_no     = 0
         sfpend:SUB_CODE     = L_SUB_CODE
         sfpend:CODE         = SFSMSOTERROR:TERRORISM_FORM_TO_ADD
         sfpend:FORM_EDITION = l_FORM_EDITION
         sfpend:manual_PREMIUM = L_TERRORISM_PREMIUM
         sfpend:DESCRIPTION  = l_DESCRIPTION
         sfpend:lob_end_code = "A"
         sfpend:policy_wide_form = 1
         End
    If l_total_6 <> 0 and
       sfsline:lob_code <> "CINLAND" and
       sfsmsoterror:im_form_to_add[1] <> "" Then
        begin
        Do SUBCODE
        L_CODE = SFSMSOTERROR:IM_FORM_TO_ADD[1]
        Do ACCESS_KEY
        l_sub_code = L_sub_code + 10
        Add sfpend  --ADDS ENDORSEMENTS TO sfpend
            Begin
            sfpend:policy_no    = g_policy_no
            sfpend:pol_year     = g_year
            sfpend:end_sequence = g_end_sequence
            sfpend:prem_no      = 0
            sfpend:build_no     = 0
            sfpend:SUB_CODE     = L_SUB_CODE
            sfpend:CODE         = SFSMSOTERROR:IM_FORM_TO_ADD[1]
            sfpend:FORM_EDITION = l_FORM_EDITION
            sfpend:manual_PREMIUM = 0
            sfpend:DESCRIPTION  = l_DESCRIPTION
            sfpend:lob_end_code = "A"
            sfpend:policy_wide_form = 1
            End
        end
    end
else
    begin
    access sfpend, set sfpend:policy_no = g_policy_no,
                       sfpend:pol_year = g_year,
                       sfpend:end_sequence = g_end_sequence, generic

    while sfpend:policy_no = g_policy_no and
          sfpend:pol_year = g_year and
          sfpend:end_sequence = g_end_sequence
            begin
            if sfpend:code = sfsmsoterror:terrorism_form_to_add then
                change sfpend
                    begin
                    sfpend:manual_premium = l_terrorism_premium
                    sfpend:policy_wide_form = 1
                    end
            next sfpend
            end
    end

access sfpmaster_alias, set sfpmaster_alias:policy_no = g_policy_no,
                            sfpmaster_alias:pol_year = g_year,
                            sfpmaster_alias:end_sequence = g_end_sequence, generic

if sfpmaster_alias:policy_no = g_policy_no and
   sfpmaster_alias:pol_year = g_year and
   sfpmaster_alias:end_sequence = g_end_sequence then
    begin
    change sfpmaster_alias
        begin
        sfpmaster_alias:terrorism_premium = l_terrorism_premium
        end
    end

end

Procedure ACCESS_SFSMSOTERROR
begin
Access SFSMSOTERROR, Set SFSMSOTERROR:COMPANY_ID       = sfpNAME:COMPANY_ID,
                         SFSMSOTERROR:STATE            = sfpmaster:STATE,
                         SFSMSOTERROR:LINE_OF_BUSINESS = sfpNAME:LINE_OF_BUSINESS, Generic

While SFSMSOTERROR:COMPANY_ID       = sfpNAME:COMPANY_ID And
      SFSMSOTERROR:STATE            = sfpmaster:STATE And
      SFSMSOTERROR:LINE_OF_BUSINESS = sfpNAME:LINE_OF_BUSINESS
        begin
        if (sfpname:eff_date >= sfsmsoterror:eff_date and
           (sfpname:eff_date <= sfsmsoterror:exp_date or
           sfsmsoterror:exp_date = 0)) then
             begin
             L_TERROR_EFF_DATE   = SFSMSOTERROR:EFF_DATE
             L_TERROR_PERCENTAGE = SFSMSOTERROR:PERCENTAGE
             L_TERROR_MINIMUM    = SFSMSOTERROR:MINIMUM_PREMIUM
             end
        Next SFSMSOTERROR
        end

Access SFSMSOTERROR, Set SFSMSOTERROR:COMPANY_ID       = sfpNAME:COMPANY_ID,
                         SFSMSOTERROR:STATE            = sfpmaster:STATE,
                         SFSMSOTERROR:LINE_OF_BUSINESS = sfpNAME:LINE_OF_BUSINESS,
                         SFSMSOTERROR:EFF_DATE         = L_TERROR_EFF_DATE, Exact
end

Procedure ACCESS_KEY
Begin
Access SFSOPTEND, Set SFSOPTEND:COMPANY_ID       = sfpname:COMPANY_ID ,
                      SFSOPTEND:STATE            = sfpmaster:STATE,
                      SFSOPTEND:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS,
                      SFSOPTEND:CODE             = L_CODE, Generic

while sfsoptend:company_id = sfpname:company_id and
      sfsoptend:state = sfpmaster:state and
      sfsoptend:line_of_business = l_line_of_business and
      sfsoptend:code = l_code
        begin
        if (sfpname:eff_date >= sfsoptend:eff_date and
           (sfpname:eff_date <= sfsoptend:exp_date or
           sfsoptend:exp_date = 0)) then
            begin
            l_Form_edition = sfsoptend:form_edition
            l_description = sfsoptend:description
            end
        next sfsoptend
        end
End

Procedure SUBCODE
Begin
l_prem_no = 0
l_build_no = 0
Access sfpend_ALIAS, Set sfpend_ALIAS:policy_no = g_policy_no ,
                         sfpend_alias:pol_year = g_year,
                         sfpend_alias:end_sequence = g_end_sequence,
                         sfpend_alias:prem_no = l_prem_no,
                         sfpend_alias:build_no = l_build_no, generic

L_SUB_CODE = 0
while sfpend_ALIAS:policy_no = g_policy_no and
      sfpend_alias:pol_year = g_year and
      sfpend_alias:end_sequence = g_End_sequence and
      sfpend_alias:prem_no = l_prem_no and
      sfpend_alias:build_no = l_build_no
        begin

        L_SUB_CODE = sfpend_ALIAS:SUB_CODE + 10

        Next sfpend_ALIAS
        End
End

Procedure BOILER_MINIMUM
Begin
Access cppGENERAL, Set cppGENERAL:policy_NO = G_policy_NO,
                       cppgeneral:pol_year = g_year,
                       cppgeneral:end_sequence = g_end_sequence, Generic

L_STATE = cppGENERAL:STATE
Access CPSPROPRATE, Set CPSPROPRATE:COMPANY_ID = sfpNAME:COMPANY_ID,
                        CPSPROPRATE:STATE = L_STATE,
                        CPSPROPRATE:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS, Generic

Repeat Begin
    Exit If CPSPROPRATE:COMPANY_ID <> sfpNAME:COMPANY_ID Or
            CPSPROPRATE:STATE <> L_STATE Or
            CPSPROPRATE:LINE_OF_BUSINESS <> L_LINE_OF_BUSINESS

    If sfpNAME:EFF_DATE >= CPSPROPRATE:EFF_DATE Then
        Begin
        L_MINIMUM = CPSPROPRATE:BOILER_MINIMUM
        End

    Next CPSPROPRATE
    End

Access cppPROPERTY, Set cppPROPERTY:policy_NO = G_policy_NO,
                        cppproperty:pol_year = g_year,
                        cppproperty:end_sequence = g_end_sequence, Generic

L_BOILER_PREM_TOTAL = 0
Repeat Begin
    Exit If cppPROPERTY:policy_NO <> G_policy_NO or
            cppproperty:pol_year <> g_year or
            cppproperty:end_sequence <> g_end_sequence

        L_BOILER_PREM_TOTAL = cppPROPERTY:BOILER_PREMIUM[1] +
                              cppPROPERTY:BOILER_PREMIUM[2] +
                              L_BOILER_PREM_TOTAL
    Next cppPROPERTY
    End

If L_BOILER_PREM_TOTAL < L_MINIMUM And
   L_BOILER_PREM_TOTAL <> 0 Then
    Begin
    l_minimum = l_minimum - l_boiler_prem_total
    Access cppPROPERTY, Set cppPROPERTY:policy_NO = G_policy_NO,
                            cppproperty:pol_year = g_year,
                            cppproperty:end_sequence = g_end_sequence, Generic

    Access cppGENERAL, Set cppGENERAL:policy_NO = G_policy_NO,
                           cppgeneral:pol_year = g_year,
                           cppgeneral:end_sequence = g_end_sequence, Generic

/*    If cppGENERAL:policy_NO = G_policy_NO and
       cppgeneral:pol_year = g_year and
       cppgeneral:end_sequence = g_End_sequence Then
        begin
        Change cppGENERAL
            Begin
            If cppPROPERTY:BOILER_PREMIUM[1] <> 0 Then
                cppGENERAL:TOTAL_PREMIUM[1] = cppGENERAL:TOTAL_PREMIUM[1] -
                                              cppPROPERTY:BOILER_PREMIUM[1]
            Else
                cppGENERAL:TOTAL_PREMIUM[2] = cppGENERAL:TOTAL_PREMIUM[2] -
                                              cppPROPERTY:BOILER_PREMIUM[2]
            End
        end*/
    If cppPROPERTY:policy_NO = G_policy_NO and
       cppproperty:pol_year = g_year and
       cppproperty:end_sequence = g_end_sequence Then
        begin
        Change cppPROPERTY
            Begin
            If cppPROPERTY:BOILER_PREMIUM[1] <> 0 Then
                cppPROPERTY:BOILER_PREMIUM[1] = cppproperty:boiler_premium[1] + L_MINIMUM
            Else
                cppPROPERTY:BOILER_PREMIUM[2] = cppproperty:boiler_premium[2] + L_MINIMUM
            L_BOILER_PREM_TOTAL = l_boiler_prem_total + L_MINIMUM
            End
        end

/*    Access cppGENERAL, Set cppGENERAL:policy_NO = G_policy_NO,
                           cppgeneral:pol_year = g_year,
                           cppgeneral:end_sequence = g_end_sequence, Generic

    If cppGENERAL:policy_NO = G_policy_NO and
       cppgeneral:pol_year = g_year and
       cppgeneral:end_sequence = g_End_sequence Then
        begin
        Change cppGENERAL
            Begin
            If cppPROPERTY:BOILER_PREMIUM[1] <> 0 Then
                cppGENERAL:TOTAL_PREMIUM[1] = cppGENERAL:TOTAL_PREMIUM[1] +
                                              L_boiler_prem_total
            Else
                cppGENERAL:TOTAL_PREMIUM[2] = cppGENERAL:TOTAL_PREMIUM[2] +
                                              L_boiler_prem_total
            End
        end*/
    End

End

procedure property_minimum
begin
l_state = sfpmaster:state
access sfscontrol, set sfscontrol:company_id = sfpname:company_id,
                       sfscontrol:state = l_state,
                       sfscontrol:line_of_business = sfpname:line_of_business, generic

while sfscontrol:company_id = sfpname:company_id and
      sfscontrol:state = l_state and
      sfscontrol:line_of_business = sfpname:line_of_business
        begin
        if sfpname:eff_date >= sfscontrol:eff_date then
            l_minimum_premium = sfscontrol:minimum_premium

        next sfscontrol
        end

access cppgeneral, set cppgeneral:policy_no = g_policy_no,
                       cppgeneral:pol_year = g_year,
                       cppgeneral:end_sequence = g_end_sequence, generic

l_property_total = 0
l_property_limit = 0
l_premium_2      = 0
l_premium_3      = 0
l_premium_4      = 0
while cppgeneral:policy_no = g_policy_no and
      cppgeneral:pol_Year = g_year and
      cppgeneral:end_sequence = g_end_sequence
     begin
     access cppproperty, set cppproperty:policy_no = cppgeneral:policy_no,
                             cppproperty:pol_year = cppgeneral:pol_year,
                             cppproperty:end_sequence = cppgeneral:end_sequence,
                             cppproperty:prem_no  = cppgeneral:prem_no,
                             cppproperty:build_no = cppgeneral:build_no, generic

     access cppbusiness, set cppbusiness:policy_no = cppgeneral:policy_no,
                             cppbusiness:pol_year = cppgeneral:pol_year,
                             cppbusiness:end_sequence = cppgeneral:end_sequence,
                             cppbusiness:prem_no  = cppgeneral:prem_no,
                             cppbusiness:build_no = cppgeneral:build_no, generic

     l_property_total = l_property_total +
                        cppgeneral:total_premium[1] +
                        cppgeneral:total_premium[2] +
                        cppbusiness:total_premium
     l_property_limit = l_property_limit +
                        cppgeneral:limit[1] +
                        cppgeneral:limit[2]
     l_premium_2 = l_premium_2 +
                   cppgeneral:premium[1] +
                   cppgeneral:premium[2] +
                   cppgeneral:premium[3] +
                   cppgeneral:premium[4] +
                   cppgeneral:premium[5] +
                   cppgeneral:premium[6] +
                   cppproperty:boiler_premium[1]
     l_premium_3 = l_premium_3 +
                   cppgeneral:premium[7] +
                   cppgeneral:premium[8] +
                   cppgeneral:premium[9] +
                   cppgeneral:premium[10] +
                   cppgeneral:premium[11] +
                   cppgeneral:premium[12] +
                   cppproperty:boiler_premium[2]
     if sfpname:company_id <> "NWIC" then
         l_premium_4 = l_premium_4 +
                       cppbusiness:total_premium
     else
         l_premium_4 = 0

     next cppgeneral
     end

if l_property_total < l_minimum_premium and
   l_property_limit <> 0 then
    begin
    l_property_total = l_minimum_premium
    access cppgeneral, set cppgeneral:policy_no = g_policy_no,
                           cppgeneral:pol_year = g_year,
                           cppgeneral:end_sequence = g_end_sequence, generic

    if cppgeneral:policy_no = g_policy_no and
       cppgeneral:pol_year = g_year and
       cppgeneral:end_sequence = g_end_sequence then
        begin
        change cppgeneral
        begin
        if cppgeneral:limit[1] <> 0 then
            begin
            cppgeneral:premium[1] = (cppgeneral:premium[1] +
                                    (l_property_total -
                                    (l_premium_2 + l_premium_3 + l_premium_4)))
            cppgeneral:total_premium[1] = l_property_total
            end
        else
            begin
            cppgeneral:premium[7] = (cppgeneral:premium[7] +
                                    (l_property_total -
                                    (l_premium_2 + l_premium_3 + l_premium_4)))

            cppgeneral:total_premium[2] = l_property_total
            end
        end
        end
    end

end

procedure farm_minimum
begin
l_state = sfpmaster:state
access sfscontrol, set sfscontrol:company_id = sfpname:company_id,
                       sfscontrol:state = l_state,
                       sfscontrol:line_of_business = sfpname:line_of_business, generic

while sfscontrol:company_id = sfpname:company_id and
      sfscontrol:state = l_state and
      sfscontrol:line_of_business = sfpname:line_of_business
        begin
        if sfpname:eff_date >= sfscontrol:eff_date then
            l_minimum_premium = sfscontrol:minimum_premium

        next sfscontrol
        end

access cppfarm, set cppfarm:policy_no = g_policy_no,
                    cppfarm:pol_year = g_year,
                    cppfarm:end_sequence = g_end_sequence, generic

l_farm_total = 0
while cppfarm:policy_no = g_policy_no and
      cppfarm:pol_Year = g_year and
      cppfarm:end_sequence = g_end_sequence
     begin
     l_farm_total = l_farm_total +
                    cppfarm:total_premium

     next cppfarm
     end

if l_farm_total < l_minimum_premium then
    begin
    l_farm_difference = l_minimum_premium - l_farm_total
    if l_farm_fire_total <> 0 then
        l_farm_fire_total = l_farm_fire_total + l_farm_difference
    else
    if l_farm_inland_total <> 0 then
        l_farm_inland_total = l_farm_inland_total + l_farm_difference

    l_farm_total = l_minimum_premium
    access cppfarm, set cppfarm:policy_no = g_policy_no,
                        cppfarm:pol_year = g_year,
                        cppfarm:end_sequence = g_end_sequence, generic

    if cppfarm:policy_no = g_policy_no and
       cppfarm:pol_year = g_year and
       cppfarm:end_sequence = g_end_sequence then
        begin
        change cppfarm
            begin
            cppfarm:total_premium = l_farm_total
            end
        end
    end

end

Procedure FINAL_TOTAL
Begin
L_EFF_DATE_1 = Dateadd(sfpNAME:EFF_DATE,0,1)
if month(l_eff_date_1) = 2 and
   day(l_eff_date_1) = 29 and
   sfscompany:boiler_rating = 4 then
    l_eff_date_1 = l_eff_date_1 - 1
If sfpNAME:EXP_DATE < L_EFF_DATE_1 and
   sfscompany:boiler_rating <> 4 Then
    Begin
    L_DAYS_RATE = L_TOTAL Divide 365
    L_DAYS = sfpNAME:EXP_DATE - sfpNAME:EFF_DATE
    L_PRO_RATA_PREMIUM = L_DAYS * L_DAYS_RATE
    L_TOTAL = L_PRO_RATA_PREMIUM
    End
else
if sfpname:exp_date < l_eff_date_1 and
   sfscompany:boiler_Rating = 4 then
    begin
    I_EFF_DATE   = dateadd(sfpname:eff_date,0,1)
    I_TOTAL_DAYS = i_eff_date - sfpname:eff_date
    I_CX_DAYS    = sfpname:exp_date - sfpname:eff_date
    I_PRo_RATA = I_CX_DAYS Divide I_TOTAL_DAYS
    l_total_diff = ((l_total - (l_total * i_pro_rata)) * -1)
    l_total = l_total * i_pro_rata
    if l_total_1 <> 0 then
        l_prop_pro_rata_diff = ((l_total_1 - (l_total_1 * i_pro_rata)) * -1)
    if l_total_5 <> 0 then
        l_liab_pro_rata_diff = ((l_total_5 - (l_total_5 * i_pro_rata)) * -1)
    if l_total_6 <> 0 then
        l_im_pro_rata_diff = ((l_total_6 - (l_total_6 * i_pro_rata)) * -1)
    l_total_diff_1 = l_prop_pro_rata_diff +
                     l_liab_pro_rata_diff +
                     l_im_pro_rata_diff
    if l_total_diff_1 <> l_total_diff then
        begin
        l_total_diff_2 = l_total_diff - l_total_diff_1
        if l_prop_pro_rata_diff <> 0 then
            l_prop_pro_rata_diff = l_prop_pro_rata_diff +
                                   l_total_diff_2
        else
        if l_liab_pro_rata_diff <> 0 then
            l_liab_pro_rata_diff = l_liab_pro_rata_diff +
                                   l_total_diff_2
        else
        if l_im_pro_rata_diff <> 0 then
            l_im_pro_rata_diff = l_im_pro_rata_diff +
                                 l_total_diff_2
        end
    end

If SFSCOMPANY:INCLUDE_INSTALLMENT_RATING = "Y" Then
    L_FINAL_TOTAL = L_TOTAL + L_INSTALLMENT
Else
    L_FINAL_TOTAL = L_TOTAL

access sfssurcharge, set sfssurcharge:company_id = sfpname:company_id,
                         sfssurcharge:state = sfpmaster:state,
                         sfssurcharge:line_of_business = sfpname:line_of_business, generic

l_surcharge_date = 0
while sfssurcharge:company_id = sfpname:company_id and
      sfssurcharge:state = sfpmaster:state and
      sfssurcharge:line_of_business = sfpname:line_of_business
        begin
        if (sfpname:eff_date >= sfssurcharge:eff_date and
           (l_surcharge_date < sfssurcharge:eff_date or
           l_surcharge_date = 0)) then
            begin
            l_surcharge_date    = sfssurcharge:eff_date
            l_surcharge_factor  = sfssurcharge:surcharge_factor
            l_surcharge_minimum = sfssurcharge:minimum_premium
            end
        next sfssurcharge
        end

L_SURCHARGE = L_FINAL_TOTAL * L_SURCHARGE_FACTOR

If L_SURCHARGE < L_SURCHARGE_MINIMUM Then
    L_SURCHARGE = L_SURCHARGE_MINIMUM

Access sfpMASTER_ALIAS, Set sfpMASTER_ALIAS:policy_NO = sfpMASTER:policy_NO,
                            sfpmaster_alias:pol_year = sfpmaster:pol_year,
                            sfpmaster_alias:end_sequence = sfpmaster:end_sequence, Generic

If sfpMASTER_ALIAS:policy_NO = sfpMASTER:policy_NO and
   sfpmaster_alias:pol_year = sfpmaster:pol_year and
   sfpmaster_alias:end_sequence = sfpmaster:end_sequence Then
    Begin
    Change sfpMASTER_ALIAS
        Begin
        sfpMASTER_ALIAS:TOTAL[1]  = L_TOTAL_1 -- property
        sfpMASTER_ALIAS:TOTAL[2]  = L_TOTAL_2 -- business income
        sfpMASTER_ALIAS:TOTAL[3]  = L_TOTAL_3 -- glass
        sfpMASTER_ALIAS:TOTAL[4]  = L_TOTAL_4 -- crime
        sfpMASTER_ALIAS:TOTAL[5]  = L_TOTAL_5 -- liability
        sfpMASTER_ALIAS:TOTAL[6]  = L_TOTAL_6 -- inland marine
        sfpMASTER_ALIAS:TOTAL[7]  = L_TOTAL_7 -- farm
        sfpmaster_alias:total[8]  = l_irpm_total
        sfpmaster_alias:total[10] = l_total_10 -- farm liability
        sfpmaster_alias:total[9]  = l_irpm_property
        sfpmaster_alias:total[11] = l_irpm_liability
        sfpmaster_alias:total[12] = l_irpm_inland
        sfpmaster_alias:total[13] = l_irpm_crime
        sfpmaster_alias:total[14] = l_irpm_glass
        l_sfpmaster_total_10 = l_total_1 + l_total_2 + l_total_3 + l_total_4 +
                               l_total_5 + l_total_6 + l_total_7 + l_total_10 +
                               l_irpm_total - l_boiler_total
        sfpmaster_alias:minimum_premium[1] = l_mp_1
        sfpmaster_alias:minimum_premium[2] = l_mp_2
        sfpmaster_alias:minimum_premium[3] = l_mp_3
        sfpmaster_alias:minimum_premium[4] = l_mp_4
        sfpmaster_alias:minimum_premium[5] = l_mp_5
        sfpmaster_alias:minimum_premium[6] = l_mp_6
        if sfpname:company_id = "NWIC" then
            l_difference = ((l_total_1 + l_total_2) - (l_fire_total + l_ec_vmm_total + l_other_total + l_boiler_total))
        else
            l_difference = 0
        sfpmaster_alias:other_totals[1] = l_fire_total + l_difference
        sfpmaster_alias:other_totals[2] = l_ec_vmm_total
        sfpmaster_alias:other_totals[3] = l_other_total
        sfpmaster_alias:other_totals[4] = l_boiler_total
        sfpmaster_alias:other_totals[5] = l_total_3
        sfpmaster_alias:other_totals[6] = l_total_4
        sfpmaster_alias:other_totals[7] = l_total_6
        sfpmaster_alias:other_totals[8] = l_farm_fire_total
        sfpmaster_alias:other_totals[9] = l_farm_allied_total
        sfpmaster_alias:other_totals[10] = l_farm_inland_total
        sfpmaster_alias:other_totals[11] = l_prem_total
        sfpmaster_alias:other_totals[12] = l_prod_total
        sfpmaster_alias:other_totals[13] = l_farm_prem_total
        sfpmaster_alias:other_totals[14] = l_farm_prod_total
        sfpmaster_alias:other_totals[17] = l_prop_pro_rata_diff
        sfpmaster_alias:other_totals[18] = l_liab_pro_rata_diff
        sfpmaster_alias:other_totals[19] = l_im_pro_rata_diff
        sfpmaster_alias:terrorism_premium = l_total_9
        sfpMASTER_ALIAS:TOTAL[18] = L_FINAL_TOTAL
        sfpMASTER_ALIAS:TOTAL[20] = L_FINAL_TOTAL + L_SURCHARGE
        sfpMASTER_ALIAS:INSTALLMENT_CHARGE = L_INSTALLMENT
        sfpMASTER_ALIAS:SURCHARGE = L_SURCHARGE
        SFPMASTER_ALIAS:RAW_PREMIUM_AMT_DUE = L_FINAL_TOTAL - l_boiler_total
        End

    End

Access sfpLOCATION, Set sfpLOCATION:policy_NO = sfpmaster:policy_NO,
                        sfplocation:pol_year = sfpmaster:pol_year,
                        sfplocation:end_sequence = sfpmaster:end_sequence, generic

while sfplocation:policy_no = sfpmaster:policy_no and
      sfplocation:pol_year = sfpmaster:pol_year and
      sfplocation:end_sequence = sfpmaster:end_sequence
       begin
       l_location_premium_10 = sfplocation:premium[10] + l_location_premium_10

       next sfplocation
       end

Access sfpLOCATION, Set sfpLOCATION:policy_NO = sfpmaster:policy_NO,
                        sfplocation:pol_year = sfpmaster:pol_year,
                        sfplocation:end_sequence = sfpmaster:end_sequence, generic

If sfpLOCATION:policy_NO = sfpmaster:policy_NO And
   sfpLOCATION:pol_year = sfpmaster:pol_year and
   sfpLOCATION:end_sequence = sfpmaster:end_sequence then
    Change sfpLOCATION
        Begin
        if l_location_premium_10 <> l_sfpmaster_total_10 then
            begin
            l_location_new_total = l_location_premium_10 -
                                   l_sfpmaster_total_10
            sfplocation:premium[10] = sfplocation:premium[10] - l_location_new_total
            end
        end

End

Procedure UPDATE_sfpLOCATION
Begin
Access sfpLOCATION, Set sfpLOCATION:policy_NO = sfpMASTER:policy_NO,
                        sfplocation:pol_year = sfpmaster:pol_year ,
                        sfplocation:end_sequence = sfpmaster:End_sequence ,
                        sfpLOCATION:PREM_NO = L_PREM_NO,
                        sfpLOCATION:BUILD_NO = L_BUILD_NO, Generic

If sfpLOCATION:policy_NO = sfpMASTER:policy_NO And
   sfplocation:pol_year = sfpmaster:pol_Year and
   sfplocation:end_sequence = sfpmaster:end_sequence and
   sfpLOCATION:PREM_NO = L_PREM_NO And
   sfpLOCATION:BUILD_NO = L_BUILD_NO Then
    Change sfpLOCATION
        Begin
        sfpLOCATION:LINE_OF_BUSINESS = sfpNAME:LINE_OF_BUSINESS
        sfpLOCATION:STATE = sfpmaster:STATE
        sfpLOCATION:COUNTY = L_COUNTY
        sfpLOCATION:TRANS_CODE = sfpmaster:trans_code
        sfpLOCATION:TRANS_DATE = sfpNAME:TRANS_DATE
        sfpLOCATION:EFF_DATE = sfpNAME:EFF_DATE
        sfpLOCATION:EXP_DATE = sfpNAME:EXP_DATE
        if sfpmaster:irpm = 0 then
            l_irpm = 1.00
        else
        begin
        access cpsdefault, set cpsdefault:company_id = sfpname:company_id,
                               cpsdefault:line_of_business = l_line_of_business, generic

        if cpsdefault:deviation_number_not_factor = 1 and
           sfpmaster:irpm <> 1.00 then
            l_irpm = (1 + (sfpmaster:irpm * 0.01))
        else
            l_irpm = sfpmaster:irpm
        end

        l_location_premium_11 = l_location_premium_11 * l_irpm
        sfpLOCATION:PREMIUM[10] = sfplocation:premium[10] +
                                  l_location_premium_11
        End
End

procedure access_arspayplan
begin
Access ARSPAYPLAN, Set ARSPAYPLAN:COMPANY_ID       = sfpNAME:COMPANY_ID,
                       ARSPAYPLAN:LINE_OF_BUSINESS = sfpNAME:LINE_OF_BUSINESS,
                       ARSPAYPLAN:PAYMENT_PLAN     = sfpname:PAYMENT_PLAN, generic

end

Procedure INSTALLMENT
Begin
/* 05/30/2001 - added logic to calculate the payment plan
   based on company id, line of business and total premium

   do not perform this routine of the payment plan <> 1
   must assume that if the payment plan is other than 1 the user
   wants to manually select the payment plan

   use l_total to compare total premium against minimum_premium
   requirements from teh arspayplan database
*/
/* actually recalculating the payment plan at the policy level is a
   good idea since a change in limit could easily put the policy
   into another payment plan option
*/

Do CALCULATE_PAYMENT_PLAN_OPTION

/* reaccess arspayplan since the above logic changes the value of this file
   it appears that the file is accessed on entry and even though the
   payment plan has been changed cqcs is holding the original value
*/

Access ARSPAYPLAN, Set ARSPAYPLAN:COMPANY_ID       = sfpNAME:COMPANY_ID,
                       ARSPAYPLAN:LINE_OF_BUSINESS = sfpNAME:LINE_OF_BUSINESS,
                       ARSPAYPLAN:PAYMENT_PLAN     = L_HOLD_PAYMENT_PLAN

If ARSPAYPLAN:INSTALLMENT_CHARGE_TYPE = "FLAT" And
   ARSPAYPLAN:INSTALLMENT_CHARGE_TIME = "EACH" Then
    L_INSTALLMENT = ARSPAYPLAN:INSTALLMENT_CHARGE_RATE *
                    ARSPAYPLAN:NUMBER_OF_PAYMENTS

If ARSPAYPLAN:INSTALLMENT_CHARGE_TYPE = "FIXED" Then
    L_INSTALLMENT = ARSPAYPLAN:INSTALLMENT_CHARGE_RATE

/* end of installment */
End

Procedure CALCULATE_PAYMENT_PLAN_OPTION
Begin
/* house cleaning */
L_FIRST_TIME = "Y"
L_HOLD_PAYMENT_PLAN = 1 -- this is a cya
L_SUB_TOTAL = L_TOTAL

Access ARSPAYPLAN, Set ARSPAYPLAN:COMPANY_ID = sfpNAME:COMPANY_ID,
                       ARSPAYPLAN:LINE_OF_BUSINESS = sfpNAME:LINE_OF_BUSINESS, Approximate

While ARSPAYPLAN:COMPANY_ID = sfpNAME:COMPANY_ID And
      ARSPAYPLAN:LINE_OF_BUSINESS = sfpNAME:LINE_OF_BUSINESS
        Begin
        if arspayplan:manual_payment_plan = 0 then
        begin
        If L_FIRST_TIME = "Y" Then
            Begin
            L_FIRST_TIME = "N"
            L_HOLD_PAYMENT_PLAN = ARSPAYPLAN:PAYMENT_PLAN
            End

        If L_SUB_TOTAL >= ARSPAYPLAN:MINIMUM_PREMIUM  Then
            Begin
            L_HOLD_PAYMENT_PLAN = ARSPAYPLAN:PAYMENT_PLAN
            End
        end

        Next ARSPAYPLAN
        End

/* only update the sfpname file if the payment plan actually changed
   05/31/2001 - removed this logic so that the sfpname file would
   be updated everytime, also added update of sfpname:final_rating
*/

/* if there is a mortgagee on this policy where it is of type
   "B" - billing
   "C" - combination mortgagee and billing
   "F" - premium finance
   then the payment plan is to be set to 1
*/

Access sfpSUPP, Set sfpSUPP:policy_NO = sfpMASTER:policy_NO,
                    sfpsupp:pol_year = g_year,
                    sfpsupp:end_sequence = g_End_sequence, approximate

While sfpSUPP:policy_NO = sfpMASTER:policy_NO and
      sfpsupp:pol_year = g_year and
      sfpsupp:end_sequence = g_End_sequence
    Begin
    If sfpSUPP:MORTGAGE_TYPE_1 One Of "B", "C", "F" Then
        { L_HOLD_PAYMENT_PLAN = 1 }
    Next sfpSUPP
    End

/* change on feb 21, 2002 - if AC only annual is allowed */
If sfpNAME:BILL_PLAN = "AC" Then
Begin
    L_HOLD_PAYMENT_PLAN = 1
End

Access sfpNAME, Set sfpNAME:policy_NO = sfpMASTER:policy_NO,
                    sfpname:pol_year = sfpmaster:pol_year,
                    sfpname:end_sequence = sfpmaster:end_sequence, generic

If sfpNAME:policy_NO = sfpMASTER:policy_NO and
   sfpname:pol_year = sfpmaster:pol_year and
   sfpname:end_sequence = sfpmaster:end_sequence Then
    Begin
    Change sfpNAME
        Begin
        sfpNAME:PAYMENT_PLAN = L_HOLD_PAYMENT_PLAN
        End

    End

/* if deposit premium equal to or greater then total premium
   then the payment plan is to be set to 1
*/
/*Access ARSCHKSU, Set ARSCHKSU:COMPANY_ID = sfpNAME:COMPANY_ID,
                     ARSCHKSU:CHECK_REFERENCE = sfpNAME:CHECK_REFERENCE, Generic

If ARSCHKSU:CHECK_AMOUNT >= L_TOTAL Then
    Begin
    L_HOLD_PAYMENT_PLAN = 1
    End*/

Access sfpNAME, Set sfpNAME:policy_NO = sfpMASTER:policy_NO,
                    sfpname:pol_year = sfpmaster:pol_year,
                    sfpname:end_sequence = sfpmaster:end_sequence, generic

If sfpNAME:policy_NO = sfpMASTER:policy_NO and
   sfpname:pol_year = sfpmaster:pol_year and
   sfpname:end_sequence = sfpmaster:end_sequence Then
    Begin
    Change sfpNAME
        Begin
        sfpNAME:PAYMENT_PLAN = L_HOLD_PAYMENT_PLAN
        End
    End

End

Procedure AMT_DUE
Begin
/* set effective date using bopmstr:trans_exp and subtracting 1 to get prior
   year, sfpname:eff_date is only correct if updating current policy, if
   updating prior policies sfpname:eff_date will not be correct */

I_EFF_DATE = Dateadd(SFPMASTER:TRANS_EXP,0,-1)

/* set i_end_sequence = current end sequence - 1 to get prior information */

I_END_SEQUENCE = sfpmaster:END_SEQUENCE - 1

Access SFPMASTER_ALIAS, Set SFPMASTER_ALIAS:POLICY_NO = sfpmaster:POLICY_NO,
                            SFPMASTER_ALIAS:POL_YEAR = sfpmaster:POL_YEAR,
                            SFPMASTER_ALIAS:END_SEQUENCE = I_END_SEQUENCE, Exact

/* need prior totals to compare to current to find out difference for amt due */

I_PREVIOUS = sfpmaster_alias:total[18]
I_INSTALLMENT_PREVIOUS = SFPMASTER_ALIAS:INSTALLMENT_CHARGE
I_SURCHARGE_PREVIOUS = SFPMASTER_ALIAS:SURCHARGE

i_annual = l_final_total
I_AMT_DUE = SFPMASTER:TOTAL[20]
I_INSTALLMENT_ANNUAL = SFPMASTER:INSTALLMENT_CHARGE
I_INSTALLMENT_AMT_DUE = SFPMASTER:INSTALLMENT_CHARGE
I_SURCHARGE_ANNUAL = L_SURCHARGE
I_SURCHARGE_AMT_DUE = L_SURCHARGE
I_TRANS_CODE = SFPMASTER:TRANS_CODE
I_EFF_DATE = SFPNAME:EFF_DATE
I_TRANS_EFF = SFPMASTER:TRANS_EFF
I_TRANS_EXP = SFPNAME:EXP_DATE
I_BILL_PLAN = SFPNAME:BILL_PLAN
I_INSTALLMENT = SFPMASTER:INSTALLMENT_CHARGE
I_SURCHARGE = SFPMASTER:SURCHARGE

Include "amtdue.pro"

Access SFPMASTER_alias, Set SFPMASTER_alias:POLICY_NO = sfpmaster:POLICY_NO,
                            SFPMASTER_alias:POL_YEAR = sfpmaster:POL_YEAR,
                            SFPMASTER_alias:END_SEQUENCE = sfpmaster:END_SEQUENCE, Exact

if sfpmaster_alias:policy_no = g_policy_no and
   sfpmaster_alias:pol_year = g_year and
   sfpmaster_alias:end_sequence = g_end_sequence then
    begin
    Change SFPMASTER_alias
        Begin
        SFPMASTER_alias:AMT_DUE_TOTAL[1] = I_AMT_DUE
        SFPMASTER_alias:AMT_DUE_TOTAL[2] = I_INSTALLMENT_AMT_DUE
        SFPMASTER_alias:AMT_DUE_TOTAL[3] = I_SURCHARGE_AMT_DUE
        If SFSCOMPANY:INCLUDE_INSTALLMENT_RATING = "Y" Then
            SFPMASTER_alias:AMT_DUE_TOTAL[20] = I_AMT_DUE + I_INSTALLMENT_AMT_DUE +
                                      I_SURCHARGE_AMT_DUE
        Else
            SFPMASTER_alias:AMT_DUE_TOTAL[20] = I_AMT_DUE + I_SURCHARGE_AMT_DUE
        end
    End

/* end of amt_due */
End

Procedure INSTALLMENT_BUCKETS
Begin
-- this program does not need this so i am putting junk information here
-- this procedure is used in prsup800 and both this program and that program
-- use amtdue.pro so i needed to put this here
I_BILL_PLAN = SFPNAME:BILL_PLAN

End

Procedure PRO_RATA
Begin
I_EFF_DATE = Dateadd(SFPMASTER:TRANS_EXP,0,-1)
I_SHORT_RATE = SFPMASTER:SHORT_RATE
I_TOTAL_DAYS = I_EFF_DATE - SFPMASTER:TRANS_EXP
I_CX_DAYS = I_EFF_DATE - SFPMASTER:TRANS_EFF

Include "prorata.pro"

/* end of pro_rata */
End

Procedure UNBILLED
Begin
/* set i_end_sequence to get the first record of the policy to figure out
   unbilled premium */

I_END_SEQUENCE = 0
Access SFPMASTER_ALIAS, Set SFPMASTER_ALIAS:POLICY_NO = SFPMASTER:POLICY_NO,
                            SFPMASTER_ALIAS:POL_YEAR = SFPMASTER:POL_YEAR,
                            SFPMASTER_ALIAS:END_SEQUENCE = I_END_SEQUENCE, Exact

I_ORIGINAL_PREMIUM = sfpmaster_alias:total[18] +
                     SFPMASTER_ALIAS:INSTALLMENT_CHARGE +
                     SFPMASTER_ALIAS:SURCHARGE

Include "unbilled.pro"

/* end of unbilled */
End

Procedure UPDATE_FILES
Begin
If SFPMASTER:TRANS_CODE = 12 And
   I_AMT_DUE < 0 Then
    I_TRANS_CODE = 13

If SFPMASTER:TRANS_CODE = 13 And
   I_AMT_DUE > 0 Then
    I_TRANS_CODE = 12

if sfpmaster:trans_code one of 12, 13 and
   sfpmaster:audit = "Y" then
    i_trans_code = 15

Access SFPMASTER_alias, Set SFPMASTER_alias:POLICY_NO = G_POLICY_NO,
                            SFPMASTER_alias:POL_YEAR = G_YEAR,
                            SFPMASTER_alias:END_SEQUENCE = G_END_SEQUENCE, Exact

If SFPMASTER_alias:POLICY_NO = G_POLICY_NO And
   SFPMASTER_alias:POL_YEAR = G_YEAR And
   SFPMASTER_alias:END_SEQUENCE = G_END_SEQUENCE Then
    begin
    Change SFPMASTER_alias
        Begin
        SFPMASTER_alias:TOTAL[20]           = I_AMT_DUE
        SFPMASTER_alias:POLICY_UPDATED      = "Y"
        SFPMASTER_alias:TOTAL[15]           = I_UNBILLED_PREMIUM
        SFPMASTER_alias:TOTAL[16]           = I_BILLED_PREMIUM
        SFPMASTER_alias:TRANS_CODE          = I_TRANS_CODE
        SFPMASTER_alias:PREMIUM_TRANS_DATE  = TODAYSDATE
        End
    end

L_POLICY_UPDATE_STRING = Str(G_POLICY_NO,9) + Str(G_YEAR,4) +
                         Str(G_END_SEQUENCE,4)

If SFSCOMPANY:DEBUG_MODE = 0 Then
    Proc("cli csbatch cppup001 %s",L_POLICY_UPDATE_STRING)/noconsole
Else
    Proc("cli csbatch cppup001 %s",L_POLICY_UPDATE_STRING)

Access SFPMASTER_alias, Set SFPMASTER_alias:POLICY_NO = G_POLICY_NO,
                            SFPMASTER_alias:POL_YEAR = G_YEAR,
                            SFPMASTER_alias:END_SEQUENCE = G_END_SEQUENCE, Exact

If SFPMASTER:TRANS_CODE = 11 Then
    Begin
    Do DELETE_SFPRENEWSUS

    If SFPMASTER:RENEWAL_PROCESS = "Y" Then
        Begin
        if sfpmaster_alias:policy_no = g_policy_no and
           sfpmaster_alias:pol_year = g_year and
           sfpmaster_alias:end_sequence = g_end_sequence then
            begin
            Change SFPMASTER_alias
                Begin
                SFPMASTER_alias:RENEWAL_PROCESS = "N"
                SFPMASTER_alias:RENEWED = "N"
                SFPMASTER_alias:RENEWAL_OVERRIDE = "N"
                SFPMASTER_alias:RENEWAL_MANUAL = "N"
                end
            End
        End

    G_COMPANY_ID = SFPNAME:COMPANY_ID
    Display Modal Screen "sfsmt118"

    L_MM = Month(TODAYSDATE)
    L_DD = Day(TODAYSDATE)
    L_YY = Year(TODAYSDATE)
    L_CANCELLATION_STRING = "1" + Str(G_POLICY_NO,9) + Str(L_MM,2) +
                            Str(L_DD,2) + Str(L_YY,4) + G_QUE
    Proc("cli csbatch arsup920 %s",L_CANCELLATION_STRING)/noconsole

    End

If SFPMASTER:TRANS_CODE = 12 Or
   SFPMASTER:TRANS_CODE = 13 or
   sfpmaster:trans_code = 15 Then
    Begin
    Display Modal Screen "sfpmt006"
    End

/* end of update_files */
End

Procedure DELETE_SFPRENEWSUS
Begin
Access SFPRENEWSUS, Set SFPRENEWSUS:POLICY_NO = G_POLICY_NO,
                        SFPRENEWSUS:POL_YEAR = G_YEAR, Generic

If SFPRENEWSUS:POLICY_NO = G_POLICY_NO And
   SFPRENEWSUS:POL_YEAR = G_YEAR Then
    Begin
    Delete SFPRENEWSUS
    End

End

Procedure CREATE_BATCH_MACRO
Begin
Do REFRESH_WORK_FILES
L_CSEXEC_APPLICATION = "PRINT"/raw

Access SFSCSEXEC, Set SFSCSEXEC:APPLICATION = L_CSEXEC_APPLICATION , Exact

If SFSCSEXEC:APPLICATION_NUMBER = 0 Then
    Begin
    L_CSEXEC_NUMBER = 99999
    End
Else
    Begin
    L_CSEXEC_NUMBER = SFSCSEXEC:APPLICATION_NUMBER + 1

    Change SFSCSEXEC
        Begin
        SFSCSEXEC:APPLICATION_NUMBER = L_CSEXEC_NUMBER
        End
    End

L_USERNAME = USERNAME
I_REPORTA = "cppmso100"
I_REPORT = "cppmso100.cq"
I_REPORT_CQE = "cppmso100.cqe"
I_APP = "cpp"
I_CSEXEC_NUMBER = L_CSEXEC_NUMBER
L_DEC = L_APP+Str(I_CSEXEC_NUMBER)+".cq"
L_DEC_PDF = L_APP+Str(I_CSEXEC_NUMBER)+".pdf"
I_PARAMETER = I_APP+Str(I_CSEXEC_NUMBER)+".par"
I_MACROA = I_APP+Str(I_CSEXEC_NUMBER)
I_MACRO = I_APP+Str(I_CSEXEC_NUMBER)+".mf"

access sfpprint8, set sfpprint8:policy_no    = g_policy_no,
                      sfpprint8:pol_year     = g_year,
                      sfpprint8:end_sequence = g_end_sequence, generic

if sfpprint8:policy_no    <> g_policy_no or
   sfpprint8:pol_year     <> g_year or
   sfpprint8:end_sequence <> g_end_sequence then
    begin
    Add sfpprint8
        Begin
        sfpprint8:policy_NO    = G_policy_NO
        sfpprint8:pol_year     = g_year
        sfpprint8:end_sequence = g_End_sequence
        end
    End
else
    begin
    delete sfpprint8
    Add sfpprint8
        Begin
        sfpprint8:policy_NO    = G_policy_NO
        sfpprint8:pol_year     = g_year
        sfpprint8:end_sequence = g_End_sequence
        end
    End

Deletefile(I_MACRO)
Writefile(I_MACRO,"cli rm cppmso100.cq<nl>")
Writefile(I_MACRO,"cli csbatch cppmso100<nl>")
Writefile(I_MACRO,"cli pcl2pdf cppmso100.cq %s<nl>",l_dec)
Closefile(I_MACRO)

If SFSCOMPANY:DEBUG_MODE = 0 Then
    Proc("cli cq %s",I_MACRO)/noconsole
Else
    Proc("cli cq %s",I_MACRO)

L_USERNAME = Trun(USERNAME)

Access SFSPROFILE, Set SFSPROFILE:USER_ID = L_USERNAME, Exact

If SFSPROFILE:USER_ID <> L_USERNAME Then
    Begin
    L_USERNAME = "default"
    Access SFSPROFILE, Set SFSPROFILE:USER_ID = L_USERNAME, Exact
    End

L_UNIX_PATH   = SFSPROFILE:UNIX_PATH/raw
L_UNIX_SERVER = SFSPROFILE:UNIX_SERVER/raw
L_CLIENT_PATH = SFSPROFILE:CLIENT_PATH/raw

If SFSCOMPANY:DEBUG_MODE = 0 Then
    Begin
    Proc("cli mv %s %s",L_DEC,L_DEC_PDF)/noconsole
    Proc("cli chmod 777 %s ",L_DEC_PDF)/noconsole
    Proc("cli rm %s",L_DEC)/noconsole
    Proc("cli mv %s %s %s", L_DEC_PDF," ",Trun(L_UNIX_PATH))/noconsole
    End
Else
    Begin
    Proc("cli mv %s %s",L_DEC,L_DEC_PDF)
    Proc("cli chmod 777 %s ",L_DEC_PDF)
    Proc("cli rm %s",L_DEC)
    Proc("cli mv %s %s %s", L_DEC_PDF," ",Trun(L_UNIX_PATH))
    End

Proc("%s %s%s",L_CLIENT_PATH,Trun(L_UNIX_SERVER),Trun(L_DEC_PDF))/client/noconsole

access sfpprint8, set sfpprint8:policy_no    = g_policy_no,
                      sfpprint8:pol_year     = g_year,
                      sfpprint8:end_sequence = g_end_sequence, generic

delete sfpprint8

Do REFRESH_WORK_FILES
End

Procedure REFRESH_WORK_FILES
Begin
Proc ("cli sfpprint8.mk")/noconsole
End

Procedure CREATE_MACRO
Begin
Do REFRESH_WORK_FILES
L_CSEXEC_APPLICATION = "PRINT"/raw

Access SFSCSEXEC, Set SFSCSEXEC:APPLICATION = L_CSEXEC_APPLICATION , Exact

If SFSCSEXEC:APPLICATION_NUMBER = 0 Then
    Begin
    L_CSEXEC_NUMBER = 99999
    End
Else
    Begin
    L_CSEXEC_NUMBER = SFSCSEXEC:APPLICATION_NUMBER + 1

    Change SFSCSEXEC
        Begin
        SFSCSEXEC:APPLICATION_NUMBER = L_CSEXEC_NUMBER
        End
    End

-- property worksheet starts here

L_USERNAME = USERNAME
I_REPORTA = "cpppr100"
I_REPORT = "cpppr100.cq"
I_REPORT_CQE = "cpppr100.cqe"
I_APP = "cpp"
I_CSEXEC_NUMBER = L_CSEXEC_NUMBER
L_DEC = L_APP+Str(I_CSEXEC_NUMBER)+".cq"
L_DEC_PDF = L_APP+Str(I_CSEXEC_NUMBER)+".txt"
I_PARAMETER = I_APP+Str(I_CSEXEC_NUMBER)+".par"
I_MACROA = I_APP+Str(I_CSEXEC_NUMBER)
I_MACRO = I_APP+Str(I_CSEXEC_NUMBER)+".mf"

Proc("cli sfpprint5.mk")/noconsole
Proc("cli sfpprint.mk")/noconsole
access sfpprint5, set sfpprint5:policy_no = sfpmaster:policy_no,
                      sfpprint5:pol_year = sfpmaster:pol_year,
                      sfpprint5:end_sequence = sfpmaster:end_sequence, generic

if sfpprint5:policy_no <> sfpmaster:policy_no or
   sfpprint5:pol_year  <> sfpmaster:pol_year or
   sfpprint5:end_sequence <> sfpmaster:end_sequence then
    begin
    Add sfpPRINT5
        Begin
        sfpPRINT5:policy_NO = sfpMASTER:policy_NO
        sfpprint5:pol_year = sfpmaster:pol_year
        sfpprint5:end_sequence = sfpmaster:end_sequence
        sfpPRINT5:PREM_NO = 1
        sfpPRINT5:BUILD_NO = 1
        end
    End
else
    begin
    delete sfpprint5
    Add sfpPRINT5
        Begin
        sfpPRINT5:policy_NO = sfpMASTER:policy_NO
        sfpprint5:pol_year = sfpmaster:pol_year
        sfpprint5:end_sequence = sfpmaster:end_sequence
        sfpPRINT5:PREM_NO = 1
        sfpPRINT5:BUILD_NO = 1
        end
    End

Deletefile(I_MACRO)
Writefile(I_MACRO,"clear list<nl>")
Writefile(I_MACRO,"clear find<nl>")
Writefile(I_MACRO,"clear sum<nl>")
Writefile(I_MACRO,"run cpppr100<nl>")
Writefile(I_MACRO,"cli rm cpppr100.cq<nl>")
Writefile(I_MACRO,"rsave cpppr100<nl>")
Writefile(I_MACRO,"cli joinit cpppr100.cq %s<nl>",L_DEC)
Closefile(I_MACRO)

If SFSCOMPANY:DEBUG_MODE = 0 Then
    Proc("cli cq %s",I_MACRO)/noconsole
Else
    Proc("cli cq %s",I_MACRO)

Access cppGENERAL, Set cppGENERAL:policy_NO = sfpMASTER:policy_NO,
                       cppgeneral:pol_Year = sfpmaster:pol_year,
                       cppgeneral:end_sequence = sfpmaster:end_sequence, Generic

if cppgeneral:policy_no = sfpmaster:policy_no and
   cppgeneral:pol_year = sfpmaster:pol_Year and
   cppgeneral:end_sequence = sfpmaster:end_sequence then
    begin
    Access cppGENERAL, Set cppGENERAL:policy_NO = sfpMASTER:policy_NO,
                           cppgeneral:pol_Year = sfpmaster:pol_year,
                           cppgeneral:end_sequence = sfpmaster:end_sequence, Generic

    While cppGENERAL:policy_NO = sfpMASTER:policy_NO and
          cppgeneral:pol_year = sfpmaster:pol_year and
          cppgeneral:end_sequence = sfpmaster:end_sequence
        Begin
        Access sfpPRINT5, Set sfpPRINT5:policy_NO = cppGENERAL:policy_NO,
                              sfpprint5:pol_year = cppgeneral:pol_year,
                              sfpprint5:end_sequence = cppgeneral:end_sequence,
                              sfpPRINT5:PREM_NO  = cppGENERAL:PREM_NO,
                              sfpPRINT5:BUILD_NO = cppGENERAL:BUILD_NO, Generic

    Proc("cli sfpprint5.mk")/noconsole
    Add sfpPRINT5
        Begin
        sfpPRINT5:policy_NO = cppGENERAL:policy_NO
        sfpprint5:pol_year = cppgeneral:pol_year
        sfpprint5:end_sequence = cppgeneral:end_sequence
        sfpPRINT5:PREM_NO = cppGENERAL:PREM_NO
        sfpPRINT5:BUILD_NO = cppGENERAL:BUILD_NO
        End

    Include "cppprint.pro"

    Access cppbusiness, Set cppbusiness:policy_NO = cppgeneral:policy_NO,
                            cppbusiness:pol_Year = cppgeneral:pol_year,
                            cppbusiness:end_sequence = cppgeneral:end_sequence,
                            cppbusiness:prem_no = cppgeneral:prem_no,
                            cppbusiness:build_no = cppgeneral:build_no, Generic

    While cppbusiness:policy_NO = cppgeneral:policy_NO and
          cppbusiness:pol_year = cppgeneral:pol_year and
          cppbusiness:end_sequence = cppgeneral:end_sequence and
          cppbusiness:prem_no = cppgeneral:prem_no and
          cppbusiness:build_no = cppgeneral:build_no
        Begin
        Access sfpprint10, Set sfpprint10:policy_NO = cppbusiness:policy_NO,
                               sfpprint10:pol_year = cppbusiness:pol_year,
                               sfpprint10:end_sequence = cppbusiness:end_sequence,
                               sfpprint10:PREM_NO  = cppbusiness:PREM_NO,
                               sfpprint10:BUILD_NO = cppbusiness:BUILD_NO,
                               sfpprint10:coverage = cppbusiness:coverage, Generic

        Proc("cli sfpprint10.mk")/noconsole
        Add sfpprint10
            Begin
            sfpprint10:policy_NO = cppbusiness:policy_NO
            sfpprint10:pol_year = cppbusiness:pol_year
            sfpprint10:end_sequence = cppbusiness:end_sequence
            sfpprint10:PREM_NO = cppbusiness:PREM_NO
            sfpprint10:BUILD_NO = cppbusiness:BUILD_NO
            sfpprint10:coverage = cppbusiness:coverage
            End

        Include "cppprint3.pro"

        next cppbusiness
        end

    include "cppprint4.pro"

    Next cppgeneral
    End

    Access sfpPRINT5, Set sfpPRINT5:policy_NO = sfpmaster:policy_NO,
                          sfpprint5:pol_year = cppgeneral:pol_year,
                          sfpprint5:end_sequence = cppgeneral:end_sequence, generic

    Proc("cli sfpprint5.mk")/noconsole
    Add sfpPRINT5
        Begin
        sfpPRINT5:policy_NO = sfpmaster:policy_NO
        sfpprint5:pol_year= sfpmaster:pol_Year
        sfpprint5:end_sequence = sfpmaster:end_sequence
        End

    Deletefile(I_MACRO)
    Writefile(I_MACRO,"clear list<nl>")
    Writefile(I_MACRO,"clear find<nl>")
    Writefile(I_MACRO,"clear sum<nl>")
    Writefile(I_MACRO,"run/param=%s cpppr100l<nl>",Trun(I_PARAMETER))
    Writefile(I_MACRO,"cli rm cpppr100l.cq<nl>")
    Writefile(I_MACRO,"rsave cpppr100l<nl>")
    Writefile(I_MACRO,"cli joinit cpppr100l.cq %s<nl>",L_DEC)
    Closefile(I_MACRO)

    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Proc("cli cq %s",I_MACRO)/noconsole
    Else
        Proc("cli cq %s",I_MACRO)

    L_FINAL_TOTAL_1 = 0
    L_FINAL_TOTAL_2 = 0
    l_final_total_3 = 0
    Access cppGENERAL, Set cppGENERAL:policy_NO = sfpMASTER:policy_NO,
                           cppgeneral:pol_Year = sfpmaster:pol_year,
                           cppgeneral:end_sequence = sfpmaster:end_sequence, Generic

    While cppGENERAL:policy_NO = sfpMASTER:policy_NO and
          cppgeneral:pol_year = sfpmaster:pol_year and
          cppgeneral:end_sequence = sfpmaster:end_sequence
        Begin
        L_FINAL_TOTAL_1 = cppGENERAL:TOTAL_PREMIUM[1] + L_FINAL_TOTAL_1
        L_FINAL_TOTAL_2 = cppGENERAL:TOTAL_PREMIUM[2] + L_FINAL_TOTAL_2

        Next cppGENERAL
        End
    end

    Access cppPROPERTY, Set cppPROPERTY:policy_NO = sfpMASTER:policy_NO,
                            cppproperty:pol_Year = sfpmaster:pol_year,
                            cppproperty:end_sequence = sfpmaster:end_sequence, Generic

    While cppPROPERTY:policy_NO = sfpMASTER:policy_NO and
          cppproperty:pol_Year = sfpmaster:pol_year and
          cppproperty:end_sequence = sfpmaster:end_sequence
        Begin
        L_fINAL_total_3 = cppPROPERTY:AR_PREM +
                          cppPROPERTY:INFLATION_PREMIUM[1] +
                          cppPROPERTY:PEAK_SEASON_PREM +
                          cppPROPERTY:GLASS_PREM +
                          cppPROPERTY:SIGNS_ATTACHED_PREM +
                          cppPROPERTY:SIGNS_NOT_ATTACHED_PREM +
                          cppPROPERTY:BUILDING_CODE_PREM +
                          cppPROPERTY:LOSS_UTILITY_PREM +
                          cppPROPERTY:MECHANICAL_BREAKDOWN_PREM +
                          cppPROPERTY:DEBRIS_REMOVAL_PREM +
                          cppPROPERTY:OFF_PREM_OTHER_LOC_PREM +
                          cppPROPERTY:OFF_PREM_IN_TRANSIT_PREM +
                          cppPROPERTY:OUTDOOR_PROPERTY_PREM +
                          cppPROPERTY:PERSONAL_EFFECTS_PREM +
                          cppPROPERTY:PERSONAL_PROPERTY_OTHER_PREM +
                          cppPROPERTY:VALUABLE_PAPERS_PREM +
                          cppPROPERTY:PRECIOUS_METALS_PREM +
                          cppPROPERTY:WATER_BACKUP_PREMIUM +
                          cppproperty:loss_assessment_prem +
                          cppproperty:mcp505_premium +
                          l_final_total_3

        next cppproperty
        end

    l_final_total_4 = 0
    Access cppBUSINESS, Set cppBUSINESS:policy_NO = sfpMASTER:policy_NO,
                            cppbusiness:pol_Year = sfpmaster:pol_year,
                            cppbusiness:end_sequence = sfpmaster:end_sequence, Generic

    While cppBUSINESS:policy_NO = sfpMASTER:policy_NO and
          cppbusiness:pol_year = sfpmaster:pol_year and
          cppbusiness:end_sequence = sfpmaster:end_sequence
        Begin
        L_FINAL_TOTAL_4 = cppBUSINESS:TOTAL_PREMIUM + L_FINAL_TOTAL_4

        Next cppBUSINESS
        End

    Deletefile(I_PARAMETER)
    Writefile (I_PARAMETER,"%n<nl>",L_FINAL_TOTAL_1)
    Writefile (I_PARAMETER,"%n<nl>",L_FINAL_TOTAL_2)
    Writefile (I_PARAMETER,"%n<nl>",L_FINAL_TOTAL_3)
    Writefile (I_PARAMETER,"%n<nl>",L_FINAL_TOTAL_4)
    Closefile (I_PARAMETER)

    Access cppGENERAL, Set cppGENERAL:policy_NO = sfpMASTER:policy_NO,
                           cppgeneral:pol_Year = sfpmaster:pol_year,
                           cppgeneral:end_sequence = sfpmaster:end_sequence, Generic

    Access sfpPRINT5, Set sfpPRINT5:policy_NO = cppGENERAL:policy_NO,
                          sfpprint5:pol_year = cppgeneral:pol_year,
                          sfpprint5:end_sequence = cppgeneral:end_sequence,
                          sfpPRINT5:PREM_NO  = cppGENERAL:PREM_NO,
                          sfpPRINT5:BUILD_NO = cppGENERAL:BUILD_NO, Generic

    Proc("cli sfpprint5.mk")/noconsole
    Add sfpPRINT5
        Begin
        sfpPRINT5:policy_NO = cppGENERAL:policy_NO
        sfpprint5:pol_year = cppgeneral:pol_year
        sfpprint5:end_sequence = cppgeneral:end_sequence
        sfpPRINT5:PREM_NO = cppGENERAL:PREM_NO
        sfpPRINT5:BUILD_NO = cppGENERAL:BUILD_NO
        End

    Deletefile(I_MACRO)
    Writefile(I_MACRO,"clear list<nl>")
    Writefile(I_MACRO,"clear find<nl>")
    Writefile(I_MACRO,"clear sum<nl>")
    Writefile(I_MACRO,"run/param=%s cpppr100k<nl>",Trun(I_PARAMETER))
    Writefile(I_MACRO,"cli rm cpppr100k.cq<nl>")
    Writefile(I_MACRO,"rsave cpppr100k<nl>")
    Writefile(I_MACRO,"cli joinit cpppr100k.cq %s<nl>",L_DEC)
    Closefile(I_MACRO)

    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Proc("cli cq %s",I_MACRO)/noconsole
    Else
        Proc("cli cq %s",I_MACRO)

Access cppglass, Set cppglass:policy_NO = sfpMASTER:policy_NO,
                     cppglass:pol_year = sfpmaster:pol_year,
                     cppglass:end_sequence = sfpmaster:end_sequence, Generic

if cppglass:policy_no = sfpmaster:policy_no and
   cppglass:pol_year = sfpmaster:pol_year and
   cppglass:end_sequence = sfpmaster:end_sequence then
    begin
    -- glass worksheet starts here
    Access cppglass, Set cppglass:policy_NO = sfpMASTER:policy_NO,
                         cppglass:pol_year = sfpmaster:pol_year,
                         cppglass:end_sequence = sfpmaster:end_sequence, Generic

    while cppglass:policy_no = sfpmaster:policy_no and
          cppglass:pol_year = sfpmaster:pol_year and
          cppglass:end_sequence = sfpmaster:end_sequence
        begin
        Access sfpprint9, Set sfpprint9:policy_NO   = cppglass:policy_NO,
                              sfpprint9:pol_year   = cppglass:pol_year,
                              sfpprint9:end_sequence = cppglass:end_sequence,
                              sfpprint9:PREM_NO    = cppglass:PREM_NO,
                              sfpprint9:BUILD_NO   = cppglass:BUIld_no,
                              sfpprint9:class_code = cppglass:sub_code, Generic

        Proc("cli sfpprint9.mk")/noconsole
        Add sfpprint9
            Begin
            sfpprint9:policy_NO = cppglass:policy_NO
            sfpprint9:pol_Year = cppglass:pol_year
            sfpprint9:end_sequence = cppglass:end_sequence
            sfpprint9:PREM_NO = cppglass:PREM_NO
            sfpprint9:BUILD_NO = cppglass:BUILD_NO
            sfpprint9:class_code = cppglass:sub_code
            End

        Deletefile(I_MACRO)
        Writefile(I_MACRO,"clear list<nl>")
        Writefile(I_MACRO,"clear find<nl>")
        Writefile(I_MACRO,"clear sum<nl>")
        Writefile(I_MACRO,"run/param=%s cpppr300<nl>",Trun(I_PARAMETER))
        Writefile(I_MACRO,"cli rm cpppr300.cq<nl>")
        Writefile(I_MACRO,"rsave cpppr300<nl>")
        Writefile(I_MACRO,"cli joinit cpppr300.cq %s<nl>",L_DEC)
        Writefile(I_MACRO,"run/param=%s cpppr300a<nl>",Trun(I_PARAMETER))
        Writefile(I_MACRO,"cli rm cpppr300a.cq<nl>")
        Writefile(I_MACRO,"rsave cpppr300a<nl>")
        Writefile(I_MACRO,"cli joinit cpppr300a.cq %s<nl>",L_DEC)
        Closefile(I_MACRO)

        If SFSCOMPANY:DEBUG_MODE = 0 Then
            Proc("cli cq %s",I_MACRO)/noconsole
        Else
            Proc("cli cq %s",I_MACRO)

        next cppglass
        end
    end

Access cppcrime, Set cppcrime:policy_NO = sfpMASTER:policy_NO,
                     cppcrime:pol_year = sfpmaster:pol_year,
                     cppcrime:end_sequence = sfpmaster:end_sequence, Generic

if cppcrime:policy_no = sfpmaster:policy_no and
   cppcrime:pol_year = sfpmaster:pol_year and
   cppcrime:end_sequence = sfpmaster:end_sequence then
    begin
    -- glass worksheet starts here
    Access cppcrime, Set cppcrime:policy_NO = sfpMASTER:policy_NO,
                         cppcrime:pol_year = sfpmaster:pol_year,
                         cppcrime:end_sequence = sfpmaster:end_sequence, Generic

--    while cppcrime:policy_no = sfpmaster:policy_no and
--          cppcrime:pol_year = sfpmaster:pol_year and
--          cppcrime:end_sequence = sfpmaster:end_sequence
--        begin
        Access sfpprint9, Set sfpprint9:policy_NO   = cppcrime:policy_NO,
                              sfpprint9:pol_year   = cppcrime:pol_year,
                              sfpprint9:end_sequence = cppcrime:end_sequence,
                              sfpprint9:PREM_NO    = cppcrime:PREM_NO,
                              sfpprint9:BUILD_NO   = cppcrime:BUIld_no, Generic

        Proc("cli sfpprint9.mk")/noconsole
        Add sfpprint9
            Begin
            sfpprint9:policy_NO = cppcrime:policy_NO
            sfpprint9:pol_Year = cppcrime:pol_year
            sfpprint9:end_sequence = cppcrime:end_sequence
            sfpprint9:PREM_NO = cppcrime:PREM_NO
            sfpprint9:BUILD_NO = cppcrime:BUILD_NO
            End

        Deletefile(I_MACRO)
        Writefile(I_MACRO,"clear list<nl>")
        Writefile(I_MACRO,"clear find<nl>")
        Writefile(I_MACRO,"clear sum<nl>")
        Writefile(I_MACRO,"run/param=%s cpppr400<nl>",Trun(I_PARAMETER))
        Writefile(I_MACRO,"cli rm cpppr400.cq<nl>")
        Writefile(I_MACRO,"rsave cpppr400<nl>")
        Writefile(I_MACRO,"cli joinit cpppr400.cq %s<nl>",L_DEC)
        Writefile(I_MACRO,"run/param=%s cpppr400a<nl>",Trun(I_PARAMETER))
        Writefile(I_MACRO,"cli rm cpppr400a.cq<nl>")
        Writefile(I_MACRO,"rsave cpppr400a<nl>")
        Writefile(I_MACRO,"cli joinit cpppr400a.cq %s<nl>",L_DEC)
        Writefile(I_MACRO,"run/param=%s cpppr400ab<nl>",Trun(I_PARAMETER))
        Writefile(I_MACRO,"cli rm cpppr400ab.cq<nl>")
        Writefile(I_MACRO,"rsave cpppr400ab<nl>")
        Writefile(I_MACRO,"cli joinit cpppr400ab.cq %s<nl>",L_DEC)
        Writefile(I_MACRO,"run/param=%s cpppr400c<nl>",Trun(I_PARAMETER))
        Writefile(I_MACRO,"cli rm cpppr400c.cq<nl>")
        Writefile(I_MACRO,"rsave cpppr400c<nl>")
        Writefile(I_MACRO,"cli joinit cpppr400c.cq %s<nl>",L_DEC)
        Closefile(I_MACRO)

        If SFSCOMPANY:DEBUG_MODE = 0 Then
            Proc("cli cq %s",I_MACRO)/noconsole
        Else
            Proc("cli cq %s",I_MACRO)

--        next cppcrime
--        end
    end

Access cppLIABILITY, Set cppLIABILITY:policy_NO = sfpMASTER:policy_NO,
                         cppliability:pol_year = sfpmaster:pol_year,
                         cppliability:end_sequence = sfpmaster:end_sequence, Generic

if cppliability:policy_no = sfpmaster:policy_no and
   cppliability:pol_year = sfpmaster:pol_Year and
   cppliability:end_sequence = sfpmaster:end_sequence then
    begin
    -- liability worksheet starts here
    Access cppLIABILITY, Set cppLIABILITY:policy_NO = sfpMASTER:policy_NO,
                             cppliability:pol_year = sfpmaster:pol_year,
                             cppliability:end_sequence = sfpmaster:end_sequence, Generic

    Access sfpprint9, Set sfpprint9:policy_NO   = cppLIABILITY:policy_NO,
                          sfpprint9:pol_year   = cppliability:pol_year,
                          sfpprint9:end_sequence = cppliability:end_sequence,
                          sfpprint9:PREM_NO    = cppLIABILITY:PREM_NO,
                          sfpprint9:BUILD_NO   = cppLIABILITY:BUILD_NO,
                          sfpprint9:CLASS_CODE = cppLIABILITY:CLASS_CODE, Generic

    Proc("cli sfpprint9.mk")/noconsole
    Add sfpprint9
        Begin
        sfpprint9:policy_NO = cppLIABILITY:policy_NO
        sfpprint9:pol_Year = cppliability:pol_year
        sfpprint9:end_sequence = cppliability:end_sequence
        sfpprint9:PREM_NO = cppLIABILITY:PREM_NO
        sfpprint9:BUILD_NO = cppLIABILITY:BUILD_NO
        sfpprint9:CLASS_CODE = cppLIABILITY:CLASS_CODE
        End

    Deletefile(I_MACRO)
    Writefile(I_MACRO,"clear list<nl>")
    Writefile(I_MACRO,"clear find<nl>")
    Writefile(I_MACRO,"clear sum<nl>")
    Writefile(I_MACRO,"run/param=%s cpppr500<nl>",Trun(I_PARAMETER))
    Writefile(I_MACRO,"cli rm cpppr500.cq<nl>")
    Writefile(I_MACRO,"rsave cpppr500<nl>")
    Writefile(I_MACRO,"cli joinit cpppr500.cq %s<nl>",L_DEC)
    Closefile(I_MACRO)

    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Proc("cli cq %s",I_MACRO)/noconsole
    Else
        Proc("cli cq %s",I_MACRO)

    Proc("cli sfpprint9.mk")/noconsole
    Proc("cli sfpprint5.mk")/noconsole
    Access cppLIABILITY, Set cppLIABILITY:policy_NO = sfpMASTER:policy_NO,
                             cppliability:pol_year = sfpmaster:pol_year,
                             cppliability:end_sequence = sfpmaster:end_sequence, Generic

    l_prem_no = cppliability:prem_no
    l_build_no = cppliability:build_no
    While cppLIABILITY:policy_NO = sfpMASTER:policy_NO and
          cppliability:pol_year = sfpmaster:pol_year and
          cppliability:end_sequence = sfpmaster:end_sequence
        Begin
        if l_prem_no <> cppliability:prem_no or
           l_build_no <> cppliability:build_no then
            l_first = "Y"
        Access sfpprint9, Set sfpprint9:policy_NO   = cppLIABILITY:policy_NO,
                              sfpprint9:pol_year   = cppliability:pol_year,
                              sfpprint9:end_sequence = cppliability:end_sequence,
                              sfpprint9:PREM_NO    = cppLIABILITY:PREM_NO,
                              sfpprint9:BUILD_NO   = cppLIABILITY:BUILD_NO,
                              sfpprint9:CLASS_CODE = cppLIABILITY:CLASS_CODE, Generic

        Proc("cli sfpprint9.mk")/noconsole
        Add sfpprint9
            Begin
            sfpprint9:policy_NO = cppLIABILITY:policy_NO
            sfpprint9:pol_year = cppliability:pol_year
            sfpprint9:end_sequence = cppliability:end_sequence
            sfpprint9:PREM_NO = cppLIABILITY:PREM_NO
            sfpprint9:BUILD_NO = cppLIABILITY:BUILD_NO
            sfpprint9:CLASS_CODE = cppLIABILITY:CLASS_CODE
            End

        Include "cppprint1.pro"

        if ((cppliability:prem_no = l_prem_no and
           cppliability:build_no = l_build_no) or
           l_first = "Y") then
            begin
            l_first = "N"
            Access sfpPRINT5, Set sfpPRINT5:policy_NO   = cppLIABILITY:policy_NO,
                                  sfpprint5:pol_year   = cppliability:pol_year,
                                  sfpprint5:end_sequence = cppliability:end_sequence,
                                  sfpPRINT5:PREM_NO    = cppLIABILITY:PREM_NO,
                                  sfpPRINT5:BUILD_NO   = cppLIABILITY:BUILD_NO, generic

            Proc("cli sfpprint5.mk")/noconsole
            Add sfpPRINT5
                Begin
                sfpPRINT5:policy_NO = cppLIABILITY:policy_NO
                sfpprint5:pol_year = cppliability:pol_year
                sfpprint5:end_sequence = cppliability:end_sequence
                sfpPRINT5:PREM_NO = cppLIABILITY:PREM_NO
                sfpPRINT5:BUILD_NO = cppLIABILITY:BUILD_NO
                End

            include "cppprint2.pro"
            end

        l_prem_no = cppliability:prem_no
        l_build_no = cppliability:build_no

        Next cppLIABILITY
        End

    Access sfpPRINT5, Set sfpPRINT5:policy_NO = sfpmaster:policy_NO,
                          sfpprint5:pol_year = sfpmaster:pol_year,
                          sfpprint5:end_sequence = sfpmaster:end_sequence, generic

    Proc("cli sfpprint5.mk")/noconsole
    Add sfpPRINT5
        Begin
        sfpPRINT5:policy_NO = sfpmaster:policy_NO
        sfpprint5:pol_year = sfpmaster:pol_year
        sfpprint5:end_Sequence = sfpmaster:end_sequence
        End

    Deletefile(I_MACRO)
    Writefile(I_MACRO,"clear list<nl>")
    Writefile(I_MACRO,"clear find<nl>")
    Writefile(I_MACRO,"clear sum<nl>")
    Writefile(I_MACRO,"run/param=%s cpppr500d<nl>",Trun(I_PARAMETER))
    Writefile(I_MACRO,"cli rm cpppr500d.cq<nl>")
    Writefile(I_MACRO,"rsave cpppr500d<nl>")
    Writefile(I_MACRO,"cli joinit cpppr500d.cq %s<nl>",L_DEC)
    Closefile(I_MACRO)

    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Proc("cli cq %s",I_MACRO)/noconsole
    Else
        Proc("cli cq %s",I_MACRO)

    L_FINAL_TOTAL_1 = 0
    L_FINAL_TOTAL_2 = 0
    l_final_total_4 = 0
    Access cppLIABILITY, Set cppLIABILITY:policy_NO = sfpMASTER:policy_NO,
                             cppliability:pol_Year = sfpmaster:pol_year,
                             cppliability:end_sequence = sfpmaster:end_sequence, Generic

    While cppLIABILITY:policy_NO = sfpMASTER:policy_NO and
          cppliability:pol_year = sfpmaster:pol_year and
          cppliability:end_sequence = sfpmaster:end_sequence
        Begin
        L_FINAL_TOTAL_1 = cppLIABILITY:PREM[1] + L_FINAL_TOTAL_1
        L_FINAL_TOTAL_2 = cppLIABILITY:PREM[2] + L_FINAL_TOTAL_2
        L_FINAL_TOTAL_4 = cppLIABILITY:independent_contractor_premium + L_FINAL_TOTAL_4
        l_final_total_1 = l_final_total_1 + cppliability:total_endorsements +
                          cppliability:total_misc
        l_final_total_3 = cppliability:minimum_premium[1]

        Next cppLIABILITY
        End

    Deletefile(I_PARAMETER)
    Writefile (I_PARAMETER,"%n<nl>",L_FINAL_TOTAL_1)
    Writefile (I_PARAMETER,"%n<nl>",L_FINAL_TOTAL_2)
    Writefile (I_PARAMETER,"%n<nl>",l_final_total_3)
    Writefile (I_PARAMETER,"%n<nl>",l_final_total_4)
    Closefile (I_PARAMETER)

    Access cppLIABILITY, Set cppLIABILITY:policy_NO = sfpMASTER:policy_NO,
                             cppliability:pol_year = sfpmaster:pol_year,
                             cppliability:end_sequence = sfpmaster:end_sequence, Generic

    Access sfpPRINT5, Set sfpPRINT5:policy_NO = cppLIABILITY:policy_NO,
                          sfpprint5:pol_year = cppliability:pol_year,
                          sfpprint5:end_sequence = cppliability:end_sequence,
                          sfpPRINT5:PREM_NO  = cppLIABILITY:PREM_NO,
                          sfpPRINT5:BUILD_NO = cppLIABILITY:BUILD_NO, Generic

    Proc("cli sfpprint5.mk")/noconsole
    Add sfpPRINT5
        Begin
        sfpPRINT5:policy_NO = cppLIABILITY:policy_NO
        sfpprint5:pol_year = cppliability:pol_year
        sfpprint5:end_sequence = cppliability:end_sequence
        sfpPRINT5:PREM_NO = cppLIABILITY:PREM_NO
        sfpPRINT5:BUILD_NO = cppLIABILITY:BUILD_NO
        End

    Deletefile(I_MACRO)
    Writefile(I_MACRO,"clear list<nl>")
    Writefile(I_MACRO,"clear find<nl>")
    Writefile(I_MACRO,"clear sum<nl>")
    Writefile(I_MACRO,"run/param=%s cpppr500c<nl>",Trun(I_PARAMETER))
    Writefile(I_MACRO,"cli rm cpppr500c.cq<nl>")
    Writefile(I_MACRO,"rsave cpppr500c<nl>")
    Writefile(I_MACRO,"cli joinit cpppr500c.cq %s<nl>",L_DEC)
    Closefile(I_MACRO)

    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Proc("cli cq %s",I_MACRO)/noconsole
    Else
        Proc("cli cq %s",I_MACRO)
    end

access cppinland, set cppinland:policy_no = sfpmaster:policy_no,
                      cppinland:pol_Year = sfpmaster:pol_year,
                      cppinland:end_sequence = sfpmaster:end_sequence, generic

--while cppinland:policy_no = sfpmaster:policy_no and
--      cppinland:pol_year = sfpmaster:pol_year and
--      cppinland:end_Sequence = sfpmaster:end_sequence
--    begin
    -- inland marine worksheet starts here
    Access sfpprint9, Set sfpprint9:policy_NO = cppinland:policy_NO,
                          sfpprint9:pol_year = cppinland:pol_Year,
                          sfpprint9:end_sequence = cppinland:end_sequence,
                          sfpprint9:PREM_NO  = cppinland:PREM_NO,
                          sfpprint9:BUILD_NO = cppinland:BUILD_NO, Generic

    Proc("cli sfpprint9.mk")/noconsole
    Add sfpprint9
        Begin
        sfpprint9:policy_NO = cppINLAND:policy_NO
        sfpprint9:pol_year = cppinland:pol_year
        sfpprint9:end_sequence = cppinland:end_sequence
        sfpprint9:PREM_NO = cppINLAND:PREM_NO
        sfpprint9:BUILD_NO = cppINLAND:BUILD_NO
        End

    Deletefile(I_MACRO)
    Writefile(I_MACRO,"clear list<nl>")
    Writefile(I_MACRO,"clear find<nl>")
    Writefile(I_MACRO,"clear sum<nl>")
    Writefile(I_MACRO,"run/param=%s cpppr600<nl>",Trun(I_PARAMETER))
    Writefile(I_MACRO,"cli rm cpppr600.cq<nl>")
    Writefile(I_MACRO,"rsave cpppr600<nl>")
    Writefile(I_MACRO,"cli joinit cpppr600.cq %s<nl>",L_DEC)
    writefile(i_macro,"run/param=%s cpppr600a<nl>",trun(i_parameter))
    writefile(i_macro,"cli rm cpppr600a.cq<nl>")
    writefile(i_macro,"rsave cpppr600a<nl>")
    Writefile(I_MACRO,"cli joinit cpppr600a.cq %s<nl>",L_DEC)
    Closefile(I_MACRO)

    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Proc("cli cq %s",I_MACRO)/noconsole
    Else
        Proc("cli cq %s",I_MACRO)

--    next cppinland
--    end

access cppfarm, set cppfarm:policy_no = sfpmaster:policy_no,
                    cppfarm:pol_year = sfpmaster:pol_year,
                    cppfarm:end_sequence = sfpmaster:end_sequence, generic

if cppfarm:policy_no = sfpmaster:policy_no and
   cppfarm:pol_year = sfpmaster:pol_year and
   cppfarm:end_sequence = sfpmaster:end_sequence then
    begin
    -- inland marine worksheet starts here
    access cppfarm, set cppfarm:policy_no = sfpmaster:policy_no,
                        cppfarm:pol_year = sfpmaster:pol_year,
                        cppfarm:end_sequence = sfpmaster:end_sequence, generic

    Access sfpprint9, Set sfpprint9:policy_NO = cppfarm:policy_NO,
                          sfpprint9:pol_year = cppfarm:pol_year,
                          sfpprint9:end_sequence = cppfarm:end_sequence,
                          sfpprint9:PREM_NO  = cppfarm:PREM_NO,
                          sfpprint9:BUILD_NO = cppfarm:BUILD_NO, Generic

    Proc("cli sfpprint9.mk")/noconsole
    Add sfpprint9
        Begin
        sfpprint9:policy_NO = cppfarm:policy_NO
        sfpprint9:pol_year = cppfarm:pol_year
        sfpprint9:end_sequence = cppfarm:end_sequence
        sfpprint9:PREM_NO = cppfarm:PREM_NO
        sfpprint9:BUILD_NO = cppfarm:BUILD_NO
        End

    Deletefile(I_MACRO)
    Writefile(I_MACRO,"clear list<nl>")
    Writefile(I_MACRO,"clear find<nl>")
    Writefile(I_MACRO,"clear sum<nl>")
    Writefile(I_MACRO,"run/param=%s cpppr700<nl>",Trun(I_PARAMETER))
    Writefile(I_MACRO,"cli rm cpppr700.cq<nl>")
    Writefile(I_MACRO,"rsave cpppr700<nl>")
    Writefile(I_MACRO,"cli joinit cpppr700.cq %s<nl>",L_DEC)
    Writefile(I_MACRO,"run/param=%s cpppr700b<nl>",Trun(I_PARAMETER))
    Writefile(I_MACRO,"cli rm cpppr700b.cq<nl>")
    Writefile(I_MACRO,"rsave cpppr700b<nl>")
    Writefile(I_MACRO,"cli joinit cpppr700b.cq %s<nl>",L_DEC)
    writefile(i_macro,"run/param=%s cpppr700a<nl>",trun(i_parameter))
    writefile(i_macro,"cli rm cpppr700a.cq<nl>")
    writefile(i_macro,"rsave cpppr700a<nl>")
    Writefile(I_MACRO,"cli joinit cpppr700a.cq %s<nl>",L_DEC)
    Closefile(I_MACRO)

    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Proc("cli cq %s",I_MACRO)/noconsole
    Else
        Proc("cli cq %s",I_MACRO)
    end

Access cppfarmliab, Set cppfarmliab:policy_NO = sfpMASTER:policy_NO,
                        cppfarmliab:pol_year = sfpmaster:pol_year,
                        cppfarmliab:end_sequence = sfpmaster:end_Sequence, Generic

if cppfarmliab:policy_no = sfpmaster:policy_no and
   cppfarmliab:pol_Year = sfpmaster:pol_Year and
   cppfarmliab:end_sequence = sfpmaster:end_sequence then
    begin
    -- liability worksheet starts here
    Access cppfarmliab, Set cppfarmliab:policy_NO = sfpMASTER:policy_NO,
                            cppfarmliab:pol_Year = sfpmaster:pol_year,
                            cppfarmliab:end_sequence = sfpmaster:end_sequence, Generic

    Access sfpprint9, Set sfpprint9:policy_NO   = cppfarmliab:policy_NO,
                          sfpprint9:pol_Year   = cppfarmliab:pol_year,
                          sfpprint9:end_sequence = cppfarmliab:end_Sequence,
                          sfpprint9:PREM_NO    = cppfarmliab:PREM_NO,
                          sfpprint9:BUILD_NO   = cppfarmliab:BUILD_NO,
                          sfpprint9:CLASS_CODE = cppfarmliab:CLASS_CODE, Generic

    Proc("cli sfpprint9.mk")/noconsole
    Add sfpprint9
        Begin
        sfpprint9:policy_NO = cppfarmliab:policy_NO
        sfpprint9:pol_year = cppfarmliab:pol_year
        sfpprint9:end_sequence = cppfarmliab:end_Sequence
        sfpprint9:PREM_NO = cppfarmliab:PREM_NO
        sfpprint9:BUILD_NO = cppfarmliab:BUILD_NO
        sfpprint9:CLASS_CODE = cppfarmliab:CLASS_CODE
        End

    Deletefile(I_MACRO)
    Writefile(I_MACRO,"clear list<nl>")
    Writefile(I_MACRO,"clear find<nl>")
    Writefile(I_MACRO,"clear sum<nl>")
    Writefile(I_MACRO,"run/param=%s cpppr700c<nl>",Trun(I_PARAMETER))
    Writefile(I_MACRO,"cli rm cpppr700c.cq<nl>")
    Writefile(I_MACRO,"rsave cpppr700c<nl>")
    Writefile(I_MACRO,"cli joinit cpppr700c.cq %s<nl>",L_DEC)
    Closefile(I_MACRO)

    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Proc("cli cq %s",I_MACRO)/noconsole
    Else
        Proc("cli cq %s",I_MACRO)

    Proc("cli sfpprint9.mk")/noconsole
    Proc("cli sfpprint5.mk")/noconsole
    Access cppfarmliab, Set cppfarmliab:policy_NO = sfpMASTER:policy_NO,
                            cppfarmliab:pol_Year = sfpmaster:pol_year,
                            cppfarmliab:end_sequence = sfpmaster:end_sequence, Generic

    l_prem_no = cppfarmliab:prem_no
    l_build_no = cppfarmliab:build_no
    While cppfarmliab:policy_NO = sfpMASTER:policy_NO and
          cppfarmliab:pol_year = sfpmaster:pol_year and
          cppfarmliab:end_sequence = sfpmaster:end_Sequence
        Begin
        if l_prem_no <> cppfarmliab:prem_no or
           l_build_no <> cppfarmliab:build_no then
            l_first = "Y"
        Access sfpprint9, Set sfpprint9:policy_NO   = cppfarmliab:policy_NO,
                              sfpprint9:pol_year   = cppfarmliab:pol_year,
                              sfpprint9:end_Sequence = cppfarmliab:end_Sequence,
                              sfpprint9:PREM_NO    = cppfarmliab:PREM_NO,
                              sfpprint9:BUILD_NO   = cppfarmliab:BUILD_NO,
                              sfpprint9:CLASS_CODE = cppfarmliab:CLASS_CODE, Generic

        Proc("cli sfpprint9.mk")/noconsole
        Add sfpprint9
            Begin
            sfpprint9:policy_NO = cppfarmliab:policy_NO
            sfpprint9:pol_Year = cppfarmliab:pol_Year
            sfpprint9:end_sequence = cppfarmliab:end_sequence
            sfpprint9:PREM_NO = cppfarmliab:PREM_NO
            sfpprint9:BUILD_NO = cppfarmliab:BUILD_NO
            sfpprint9:CLASS_CODE = cppfarmliab:CLASS_CODE
            End

        Access sfpPRINT5, Set sfpPRINT5:policy_NO   = cppfarmliab:policy_NO,
                              sfpprint5:pol_year   = cppfarmliab:pol_year,
                              sfpprint5:end_sequence = cppfarmliab:end_sequence,
                              sfpPRINT5:PREM_NO    = cppfarmliab:PREM_NO,
                              sfpPRINT5:BUILD_NO   = cppfarmliab:BUILD_no, Generic

        Proc("cli sfpprint5.mk")/noconsole
        Add sfpPRINT5
            Begin
            sfpPRINT5:policy_NO = cppfarmliab:policy_NO
            sfpprint5:pol_Year = cppfarmliab:pol_year
            sfpprint5:end_sequence = cppfarmliab:end_Sequence
            sfpPRINT5:PREM_NO = cppfarmliab:PREM_NO
            sfpPRINT5:BUILD_NO = cppfarmliab:BUILD_NO
            End

        Deletefile(I_MACRO)
        Writefile(I_MACRO,"run cpppr700d<nl>")
        Writefile(I_MACRO,"cli rm cpppr700d.cq<nl>")
        Writefile(I_MACRO,"rsave cpppr700d<nl>")
        Writefile(I_MACRO,"cli joinit cpppr700d.cq %s<nl>",L_DEC)
        Closefile(I_MACRO)

        If SFSCOMPANY:DEBUG_MODE = 0 Then
            Proc("cli cq %s",I_MACRO)/noconsole
        Else
            Proc("cli cq %s",I_MACRO)

        if cppfarmliab:prem_no = l_prem_no and
           cppfarmliab:build_no = l_build_no and
           l_first = "Y" then
            begin
            l_first = "N"
            Access sfpPRINT5, Set sfpPRINT5:policy_NO   = cppfarmliab:policy_NO,
                                  sfpprint5:pol_year   = cppfarmliab:pol_year,
                                  sfpprint5:end_sequence = cppfarmliab:end_sequence,
                                  sfpPRINT5:PREM_NO    = cppfarmliab:PREM_NO,
                                  sfpPRINT5:BUILD_NO   = cppfarmliab:BUILD_NO, generic

            Proc("cli sfpprint5.mk")/noconsole
            Add sfpPRINT5
                Begin
                sfpPRINT5:policy_NO = cppfarmliab:policy_NO
                sfpprint5:pol_Year = cppfarmliab:pol_year
                sfpprint5:end_sequence = cppfarmliab:end_sequence
                sfpPRINT5:PREM_NO = cppfarmliab:PREM_NO
                sfpPRINT5:BUILD_NO = cppfarmliab:BUILD_NO
                End

            Deletefile(I_MACRO)
            Writefile(I_MACRO,"run cpppr700f<nl>")
            Writefile(I_MACRO,"cli rm cpppr700f.cq<nl>")
            Writefile(I_MACRO,"rsave cpppr700f<nl>")
            Writefile(I_MACRO,"cli joinit cpppr700f.cq %s<nl>",L_DEC)
            Closefile(I_MACRO)

            If SFSCOMPANY:DEBUG_MODE = 0 Then
                Proc("cli cq %s",I_MACRO)/noconsole
            Else
                Proc("cli cq %s",I_MACRO)
            end

        l_prem_no = cppfarmliab:prem_no
        l_build_no = cppfarmliab:build_no

        Next cppfarmliab
        End

    Access sfpPRINT5, Set sfpPRINT5:policy_NO = sfpmaster:policy_NO,
                          sfpprint5:pol_year   = cppfarmliab:pol_year,
                          sfpprint5:end_sequence = cppfarmliab:end_sequence,  generic

    Proc("cli sfpprint5.mk")/noconsole
    Add sfpPRINT5
        Begin
        sfpPRINT5:policy_NO = sfpmaster:policy_NO
        sfpprint5:pol_year = sfpmaster:pol_year
        sfpprint5:end_sequence = sfpmaster:end_sequence
        End

    Deletefile(I_MACRO)
    Writefile(I_MACRO,"clear list<nl>")
    Writefile(I_MACRO,"clear find<nl>")
    Writefile(I_MACRO,"clear sum<nl>")
    Writefile(I_MACRO,"run/param=%s cpppr700g<nl>",Trun(I_PARAMETER))
    Writefile(I_MACRO,"cli rm cpppr700g.cq<nl>")
    Writefile(I_MACRO,"rsave cpppr700g<nl>")
    Writefile(I_MACRO,"cli joinit cpppr700g.cq %s<nl>",L_DEC)
    Closefile(I_MACRO)

    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Proc("cli cq %s",I_MACRO)/noconsole
    Else
        Proc("cli cq %s",I_MACRO)

    L_FINAL_TOTAL_1 = 0
    L_FINAL_TOTAL_2 = 0
    Access cppfarmliab, Set cppfarmliab:policy_NO = sfpMASTER:policy_NO,
                            cppfarmliab:pol_year = sfpmaster:pol_year,
                            cppfarmliab:end_sequence = sfpmaster:end_sequence, Generic

    While cppfarmliab:policy_NO = sfpMASTER:policy_NO  and
          cppfarmliab:pol_year = sfpmaster:pol_year and
          cppfarmliab:end_sequence = sfpmaster:end_sequence
        Begin
        L_FINAL_TOTAL_1 = cppfarmliab:PREM[1] + L_FINAL_TOTAL_1
        L_FINAL_TOTAL_2 = cppfarmliab:PREM[2] + L_FINAL_TOTAL_2
        l_final_total_1 = l_final_total_1 + cppfarmliab:total_endorsements +
                          cppfarmliab:total_misc + cppfarmliab:optional_premium
        l_final_total_3 = cppfarmliab:minimum_premium[1]

        Next cppfarmliab
        End

    Deletefile(I_PARAMETER)
    Writefile (I_PARAMETER,"%n<nl>",L_FINAL_TOTAL_1)
    Writefile (I_PARAMETER,"%n<nl>",L_FINAL_TOTAL_2)
    Writefile (I_PARAMETER,"%n<nl>",l_final_total_3)
    Closefile (I_PARAMETER)

    Access cppfarmliab, Set cppfarmliab:policy_NO = sfpMASTER:policy_NO,
                            cppfarmliab:pol_year = sfpmaster:pol_year,
                            cppfarmliab:end_sequence = sfpmaster:end_sequence, Generic

    Access sfpPRINT5, Set sfpPRINT5:policy_NO = cppfarmliab:policy_NO,
                          sfpprint5:pol_year = cppfarmliab:pol_Year,
                          sfpprint5:end_sequence = cppfarmliab:end_sequence,
                          sfpPRINT5:PREM_NO  = cppfarmliab:PREM_NO,
                          sfpPRINT5:BUILD_NO = cppfarmliab:BUILD_NO, Generic

    Proc("cli sfpprint5.mk")/noconsole
    Add sfpPRINT5
        Begin
        sfpPRINT5:policy_NO = cppfarmliab:policy_NO
        sfpprint5:pol_year = cppfarmliab:pol_Year
        sfpprint5:end_sequence = cppfarmliab:end_sequence
        sfpPRINT5:PREM_NO = cppfarmliab:PREM_NO
        sfpPRINT5:BUILD_NO = cppfarmliab:BUILD_NO
        End

    Deletefile(I_MACRO)
    Writefile(I_MACRO,"clear list<nl>")
    Writefile(I_MACRO,"clear find<nl>")
    Writefile(I_MACRO,"clear sum<nl>")
    Writefile(I_MACRO,"run/param=%s cpppr700e<nl>",Trun(I_PARAMETER))
    Writefile(I_MACRO,"cli rm cpppr700e.cq<nl>")
    Writefile(I_MACRO,"rsave cpppr700e<nl>")
    Writefile(I_MACRO,"cli joinit cpppr700e.cq %s<nl>",L_DEC)
    Closefile(I_MACRO)

    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Proc("cli cq %s",I_MACRO)/noconsole
    Else
        Proc("cli cq %s",I_MACRO)
    end

-- adding policy wide endorsements
Proc("cli sfpprint5.mk")/noconsole
Proc("cli sfpprint.mk")/noconsole
Add sfpPRINT5
    Begin
    sfpPRINT5:policy_NO = sfpMASTER:policy_NO
    sfpprint5:pol_year = sfpmaster:pol_Year
    sfpprint5:end_Sequence = sfpmaster:end_sequence
    sfpPRINT5:PREM_NO = 0
    sfpPRINT5:BUILD_NO = 0
    End

Deletefile(I_MACRO)
Writefile(I_MACRO,"clear list<nl>")
Writefile(I_MACRO,"clear find<nl>")
Writefile(I_MACRO,"clear sum<nl>")
Writefile(I_MACRO,"run cpppr100j<nl>")
Writefile(I_MACRO,"cli rm cpppr100j.cq<nl>")
Writefile(I_MACRO,"rsave cpppr100j<nl>")
Writefile(I_MACRO,"cli joinit cpppr100j.cq %s<nl>",L_DEC)
Closefile(I_MACRO)

If SFSCOMPANY:DEBUG_MODE = 0 Then
    Proc("cli cq %s",I_MACRO)/noconsole
Else
    Proc("cli cq %s",I_MACRO)

-- final totals
Proc("cli sfpprint5.mk")/noconsole
Proc("cli sfpprint.mk")/noconsole
Add sfpPRINT5
    Begin
    sfpPRINT5:policy_NO = sfpMASTER:policy_NO
    sfpprint5:pol_year = sfpmaster:pol_year
    sfpprint5:end_sequence = sfpmaster:end_sequence
    sfpPRINT5:PREM_NO = 1
    sfpPRINT5:BUILD_NO = 1
    End

Deletefile(I_MACRO)
Writefile(I_MACRO,"clear list<nl>")
Writefile(I_MACRO,"clear find<nl>")
Writefile(I_MACRO,"clear sum<nl>")
Writefile(I_MACRO,"run cpppr100i<nl>")
Writefile(I_MACRO,"cli rm cpppr100i.cq<nl>")
Writefile(I_MACRO,"rsave cpppr100i<nl>")
Writefile(I_MACRO,"cli joinit cpppr100i.cq %s<nl>",L_DEC)
Closefile(I_MACRO)

If SFSCOMPANY:DEBUG_MODE = 0 Then
    Proc("cli cq %s",I_MACRO)/noconsole
Else
    Proc("cli cq %s",I_MACRO)


-- this is the start of setting up to print the visual
If L_OPT = 1 Then
    Begin
    L_USERNAME = Trun(USERNAME)

    Access SFSPROFILE, Set SFSPROFILE:USER_ID = L_USERNAME, Exact

    If SFSPROFILE:USER_ID <> L_USERNAME Then
        Begin
        L_USERNAME = "default"
        Access SFSPROFILE, Set SFSPROFILE:USER_ID = L_USERNAME, Exact
        End

    L_UNIX_PATH   = SFSPROFILE:UNIX_PATH/raw
    L_UNIX_SERVER = SFSPROFILE:UNIX_SERVER/raw
    L_CLIENT_PATH = SFSPROFILE:CLIENT_PATH/raw

    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Begin
        Proc("cli mv %s %s",L_DEC,L_DEC_PDF)/noconsole
        Proc("cli chmod 777 %s ",L_DEC_PDF)/noconsole
        Proc("cli rm %s",L_DEC)/noconsole
        Proc("cli mv %s %s %s", L_DEC_PDF," ",Trun(L_UNIX_PATH))/noconsole
        End
    Else
        Begin
        Proc("cli mv %s %s",L_DEC,L_DEC_PDF)
        Proc("cli chmod 777 %s ",L_DEC_PDF)
        Proc("cli rm %s",L_DEC)
        Proc("cli mv %s %s %s", L_DEC_PDF," ",Trun(L_UNIX_PATH))
        End

    Proc("%s %s%s",L_CLIENT_PATH,Trun(L_UNIX_SERVER),Trun(L_DEC_PDF))/client
    End
Else
    Begin
    If SFSCOMPANY:DEBUG_MODE = 0 Then
        Proc("cli lp -oraw -d%s %s",G_QUE,L_DEC)/noconsole
    Else
        Proc("cli lp -oraw -d%s %s",G_QUE,L_DEC)
    End

Do REFRESH_WORK_FILES
End

/*Procedure REFRESH_WORK_FILES
Begin
Proc ("cli sfpprint5.mk")/noconsole
proc ("cli sfpprint9.mk")/noconsole
Proc ("cli sfpprint.mk")/noconsole
End*/

End
