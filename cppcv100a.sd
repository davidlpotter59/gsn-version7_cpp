%%
Program
        Name = "cppcv100a" ;
        Type = "File" ;
        Domain = "FLAT" ;
        Padcharacter = Space ;

        Global Unsigned Ascii Number G_POLICY_NO[9],
                                     G_YEAR[4] ,
                                     G_END_SEQUENCE[4] ,
                                     G_YEAR_1[4],
                                     G_END_SEQUENCE_1[4] ,
                                     G_TRANS_CODE[4] ;

        Local String L_PROCEDURE[50] ,
                     l_type[2],
                     l_company_id[10],
                     l_form_edition[25],
                     l_description[75],
                     l_add_endorsement[1],
                     l_code[7],
                     l_code_1[7],
                     l_code_2[7],
                     l_coverage[1] ;

        local date l_terror_eff_date[8] ;

        local unsigned ascii number l_state[2],
                                    l_add_back[1] ,
                                    l_territory[3],
                                    l_prem_no[4],
                                    l_build_no[4],
                                    l_sub_code[4],
                                    l_base_Rate_1[6]=0/dec=3,
                                    l_base_rate_2[6]=0/dec=3,
                                    l_arate_1[1]=0,
                                    l_arate_2[1]=0,
                                    l_products_not_applicable[1]=0,
                                    l_package_mod[5]=0/dec=3,
                                    l_line_of_business[4] ;


Initialisation
G_POLICY_NO = Val(COMMANDLINE[1,9])
G_YEAR = Val(COMMANDLINE[11,14])
G_END_SEQUENCE = Val(COMMANDLINE[16,19])
G_YEAR_1 = Val(COMMANDLINE[21,24])
G_END_SEQUENCE_1 = Val(COMMANDLINE[26,29])
G_TRANS_CODE = Val(COMMANDLINE[31,34])

L_PROCEDURE = "cppartdeduct FILE UPDATE"

access sfpname, set sfpname:policy_no = g_policy_no,
                    sfpname:pol_year = g_year_1,
                    sfpname:end_sequence = g_end_sequence_1, generic

Access CPPartdeduct_ALIAS, Set CPPartdeduct_ALIAS:POLICY_NO = G_POLICY_NO,
                                CPPartdeduct_ALIAS:POL_YEAR = G_YEAR,
                                CPPartdeduct_ALIAS:END_SEQUENCE = G_END_SEQUENCE, Approximate

Repeat Begin
    Exit If CPPartdeduct_ALIAS:POLICY_NO <> G_POLICY_NO Or
            CPPartdeduct_ALIAS:POL_YEAR <> G_YEAR Or
            CPPartdeduct_ALIAS:END_SEQUENCE <> G_END_SEQUENCE

    Add CPPartdeduct
        Begin
        CPPartdeduct:POLICY_NO               = G_POLICY_NO
        CPPartdeduct:POL_YEAR                = G_YEAR_1
        CPPartdeduct:END_SEQUENCE            = G_END_SEQUENCE_1
        CPPartdeduct:RECORD_RDF              = CPPartdeduct_ALIAS:RECORD_RDF/raw
        End

    Next CPPartdeduct_ALIAS
    End

L_PROCEDURE = "cppartisan FILE UPDATE"

Access CPPartisan_ALIAS, Set CPPartisan_ALIAS:POLICY_NO = G_POLICY_NO,
                               CPPartisan_ALIAS:POL_YEAR = G_YEAR,
                               CPPartisan_ALIAS:END_SEQUENCE = G_END_SEQUENCE, Approximate

Repeat Begin
    Exit If CPPartisan_ALIAS:POLICY_NO <> G_POLICY_NO Or
            CPPartisan_ALIAS:POL_YEAR <> G_YEAR Or
            CPPartisan_ALIAS:END_SEQUENCE <> G_END_SEQUENCE

    access sfpmaster, set sfpmaster:policy_no    = g_policy_no,
                          sfpmaster:pol_year     = g_year_1,
                          sfpmaster:end_sequence = g_end_sequence_1, generic

    if sfpmaster:trans_code one of 10, 14 then
        begin
        l_state = cppartisan_alias:state
        l_company_id = sfpname:company_id
        do access_terrorism
        l_territory = cppartisan_alias:territory[2,3]
        l_line_of_business = cppartisan_alias:rating_line_of_business
        do access_cpsliabrates
        end

    Add CPPartisan
        Begin
        CPPartisan:POLICY_NO               = G_POLICY_NO
        CPPartisan:POL_YEAR                = G_YEAR_1
        CPPartisan:END_SEQUENCE            = G_END_SEQUENCE_1
        CPPartisan:PREM_NO                 = CPPartisan_ALIAS:PREM_NO
        CPPartisan:BUILD_NO                = CPPartisan_ALIAS:BUILD_NO
        CPPartisan:CLASS_CODE              = CPPartisan_ALIAS:CLASS_CODE
        CPPartisan:RECORD_RDF              = CPPartisan_ALIAS:RECORD_RDF/raw
        if l_add_back = 1 and
           sfpmaster:trans_code one of 10, 14 then
            cppartisan:remove_terrorism_form = 0
        if sfpmaster:trans_code one of 10, 14 then
            begin
            if cppartisan:company_rate[1] = 0 then
                cppartisan:base_rate[1] = l_base_rate_1
            if cppartisan:company_rate[2] = 0 then
                cppartisan:base_rate[2] = l_base_rate_2
            cppartisan:arate[1] = l_arate_1
            cppartisan:arate[2] = l_arate_2
            cppartisan:product_not_applicable = l_products_not_applicable
            end

        End

    Next CPPartisan_ALIAS
    End

L_PROCEDURE = "cppartlimits FILE UPDATE"

Access CPPartlimits_ALIAS, Set CPPartlimits_ALIAS:POLICY_NO = G_POLICY_NO,
                                CPPartlimits_ALIAS:POL_YEAR = G_YEAR,
                                CPPartlimits_ALIAS:END_SEQUENCE = G_END_SEQUENCE, Approximate

Repeat Begin
    Exit If CPPartlimits_ALIAS:POLICY_NO <> G_POLICY_NO Or
            CPPartlimits_ALIAS:POL_YEAR <> G_YEAR Or
            CPPartlimits_ALIAS:END_SEQUENCE <> G_END_SEQUENCE

    Add CPPartlimits
        Begin
        CPPartlimits:POLICY_NO               = G_POLICY_NO
        CPPartlimits:POL_YEAR                = G_YEAR_1
        CPPartlimits:END_SEQUENCE            = G_END_SEQUENCE_1
        CPPartlimits:RECORD_RDF              = CPPartlimits_ALIAS:RECORD_RDF/raw
        End

    Next CPPartlimits_ALIAS
    End

L_PROCEDURE = "cppartdeviation FILE UPDATE"

Access CPPartdeviation_ALIAS, Set CPPartdeviation_ALIAS:POLICY_NO = G_POLICY_NO,
                                CPPartdeviation_ALIAS:POL_YEAR = G_YEAR,
                                CPPartdeviation_ALIAS:END_SEQUENCE = G_END_SEQUENCE, Approximate

Repeat Begin
    Exit If CPPartdeviation_ALIAS:POLICY_NO <> G_POLICY_NO Or
            CPPartdeviation_ALIAS:POL_YEAR <> G_YEAR Or
            CPPartdeviation_ALIAS:END_SEQUENCE <> G_END_SEQUENCE

    access cppartisan, set cppartisan:policy_no    = cppartdeviation_alias:policy_no,
                           cppartisan:pol_year     = cppartdeviation_alias:pol_year,
                           cppartisan:end_sequence = cppartdeviation_alias:end_sequence, generic

    l_type = cppartisan:type
    l_coverage = "L"
    l_state = cppartisan_alias:state
    l_line_of_business = cppartisan_alias:rating_line_of_business
    access sfpmaster, set sfpmaster:policy_no    = g_policy_no,
                          sfpmaster:pol_year     = g_year_1,
                          sfpmaster:end_sequence = g_end_sequence_1, generic

    access sfpamt, set sfpamt:policy_no    = g_policy_no,
                       sfpamt:pol_year     = g_year_1,
                       sfpamt:end_sequence = g_end_sequence_1, generic

    access sfpname, set sfpname:policy_no    = g_policy_no,
                        sfpname:pol_year     = g_year_1,
                        sfpname:end_sequence = g_end_sequence_1, generic

    if ((sfpmaster:trans_code one of 10, 14 and
       sfpname:line_of_business one of 8) or
       (sfpmaster:trans_code one of 10, 14 and
       sfpname:line_of_business one of 99 and
       sfpamt:line_of_business[2] one of 8)) then
        begin
        do get_package_mod
        end

    Add CPPartdeviation
        Begin
        CPPartdeviation:POLICY_NO               = G_POLICY_NO
        CPPartdeviation:POL_YEAR                = G_YEAR_1
        CPPartdeviation:END_SEQUENCE            = G_END_SEQUENCE_1
        CPPartdeviation:RECORD_RDF              = CPPartdeviation_ALIAS:RECORD_RDF/raw
        if sfpmaster:trans_code one of 10, 14 and
           l_package_mod <> 0 then
            cppartdeviation:package_mod             = l_package_mod
        if ((sfpmaster:trans_code one of 10, 14 and
           sfpname:line_of_business one of 6) or
           (sfpmaster:trans_code one of 10, 14 and
           sfpname:line_of_business = 99 and
           sfpamt:line_of_business[2] = 6)) then
            cppartdeviation:package_mod             = 1.00
        End

    Next CPPartdeviation_ALIAS
    End

L_PROCEDURE = "cppisocrime FILE UPDATE"

Access CPPisocrime_ALIAS, Set CPPisocrime_ALIAS:POLICY_NO = G_POLICY_NO,
                               CPPisocrime_ALIAS:POL_YEAR = G_YEAR,
                               CPPisocrime_ALIAS:END_SEQUENCE = G_END_SEQUENCE, Approximate

Repeat Begin
    Exit If CPPisocrime_ALIAS:POLICY_NO <> G_POLICY_NO Or
            CPPisocrime_ALIAS:POL_YEAR <> G_YEAR Or
            CPPisocrime_ALIAS:END_SEQUENCE <> G_END_SEQUENCE

    Add CPPisocrime
        Begin
        CPPisocrime:POLICY_NO               = G_POLICY_NO
        CPPisocrime:POL_YEAR                = G_YEAR_1
        CPPisocrime:END_SEQUENCE            = G_END_SEQUENCE_1
        CPPisocrime:PREM_NO                 = CPPisocrime_ALIAS:PREM_NO
        CPPisocrime:BUILD_NO                = CPPisocrime_ALIAS:BUILD_NO
        CPPisocrime:crime_form              = CPPisocrime_ALIAS:crime_form
        CPPisocrime:RECORD_RDF              = CPPisocrime_ALIAS:RECORD_RDF/raw
        End

    Next CPPisocrime_ALIAS
    End

L_PROCEDURE = "cppisoblanket FILE UPDATE"

Access CPPisoblanket_ALIAS, Set CPPisoblanket_ALIAS:POLICY_NO = G_POLICY_NO,
                               CPPisoblanket_ALIAS:POL_YEAR = G_YEAR,
                               CPPisoblanket_ALIAS:END_SEQUENCE = G_END_SEQUENCE, Approximate

Repeat Begin
    Exit If CPPisoblanket_ALIAS:POLICY_NO <> G_POLICY_NO Or
            CPPisoblanket_ALIAS:POL_YEAR <> G_YEAR Or
            CPPisoblanket_ALIAS:END_SEQUENCE <> G_END_SEQUENCE

    l_type = cppisoblanket_alias:type
    l_coverage = "P"
    l_state = cppisoblanket_alias:state
    l_line_of_business = cppisoblanket:rating_line_of_business
    access sfpmaster, set sfpmaster:policy_no    = g_policy_no,
                          sfpmaster:pol_year     = g_year_1,
                          sfpmaster:end_sequence = g_end_sequence_1, generic

    if sfpmaster:trans_code one of 10, 14 then
        begin
        do get_package_mod
        end

    Add CPPisoblanket
        Begin
        CPPisoblanket:POLICY_NO               = G_POLICY_NO
        CPPisoblanket:POL_YEAR                = G_YEAR_1
        CPPisoblanket:END_SEQUENCE            = G_END_SEQUENCE_1
        CPPisoblanket:PREM_NO                 = CPPisoblanket_ALIAS:PREM_NO
        CPPisoblanket:BUILD_NO                = CPPisoblanket_ALIAS:BUILD_NO
        CPPisoblanket:rate_type               = CPPisoblanket_ALIAS:rate_type
        CPPisoblanket:RECORD_RDF              = CPPisoblanket_ALIAS:RECORD_RDF/raw
        if sfpmaster:trans_code one of 10, 14 and
           l_package_mod <> 0 then
            cppisoblanket:package_mod[1]          = l_package_mod
        End

    Next CPPisoblanket_ALIAS
    End

L_PROCEDURE = "cppgeneral1 FILE UPDATE"

Access CPPgeneral1_ALIAS, Set CPPgeneral1_ALIAS:POLICY_NO = G_POLICY_NO,
                              CPPgeneral1_ALIAS:POL_YEAR = G_YEAR,
                              CPPgeneral1_ALIAS:END_SEQUENCE = G_END_SEQUENCE, Approximate

Repeat Begin
    Exit If CPPgeneral1_ALIAS:POLICY_NO <> G_POLICY_NO Or
            CPPgeneral1_ALIAS:POL_YEAR <> G_YEAR Or
            CPPgeneral1_ALIAS:END_SEQUENCE <> G_END_SEQUENCE

    Add CPPgeneral1
        Begin
        CPPgeneral1:POLICY_NO               = G_POLICY_NO
        CPPgeneral1:POL_YEAR                = G_YEAR_1
        CPPgeneral1:END_SEQUENCE            = G_END_SEQUENCE_1
        CPPgeneral1:PREM_NO                 = CPPgeneral1_ALIAS:PREM_NO
        CPPgeneral1:BUILD_NO                = CPPgeneral1_ALIAS:BUILD_NO
        CPPgeneral1:rate_type               = CPPgeneral1_ALIAS:rate_type
        CPPgeneral1:RECORD_RDF              = CPPgeneral1_ALIAS:RECORD_RDF/raw
        if cppgeneral1:override_hurricane_deductible = 0 and
           cppgeneral1:hurricane_changed = 0 then
            cppgeneral1:override_hurricane_deductible = cppgeneral1_alias:hurricane_changed
        End

    Next CPPgeneral1_ALIAS
    End

L_PROCEDURE = "cppumuim FILE UPDATE"

Access CPPumuim_ALIAS, Set CPPumuim_ALIAS:POLICY_NO = G_POLICY_NO,
                              CPPumuim_ALIAS:POL_YEAR = G_YEAR,
                              CPPumuim_ALIAS:END_SEQUENCE = G_END_SEQUENCE, Approximate

Repeat Begin
    Exit If CPPumuim_ALIAS:POLICY_NO <> G_POLICY_NO Or
            CPPumuim_ALIAS:POL_YEAR <> G_YEAR Or
            CPPumuim_ALIAS:END_SEQUENCE <> G_END_SEQUENCE

    Add CPPumuim
        Begin
        CPPumuim:POLICY_NO               = G_POLICY_NO
        CPPumuim:POL_YEAR                = G_YEAR_1
        CPPumuim:END_SEQUENCE            = G_END_SEQUENCE_1
        CPPumuim:PREM_NO                 = CPPumuim_ALIAS:PREM_NO
        CPPumuim:BUILD_NO                = CPPumuim_ALIAS:BUILD_NO
        cppumuim:sub_code                = cppumuim_alias:sub_code
        CPPumuim:RECORD_RDF              = CPPumuim_ALIAS:RECORD_RDF/raw
        End

    Next CPPumuim_ALIAS
    End

do update_forms

Update

Errors
Writefile("cppcv100a.err","%s<nl>",ERRORTEXT)
Writefile("cppcv100a.err","%n<nl>",ERRORNUMBER)
Writefile("cppcv100a.err","%s<nl>",L_PROCEDURE)

procedure definition

procedure update_forms
begin
access cppliability, set cppliability:policy_no    = g_policy_no,
                         cppliability:pol_year     = g_year_1,
                         cppliability:end_sequence = g_end_sequence_1, generic

access cppliablimits, set cppliablimits:policy_no    = g_policy_no,
                          cppliablimits:pol_year     = g_year_1,
                          cppliablimits:end_sequence = g_end_sequence_1, generic

l_state = cppliability:state
Access CPSLIABTRIGGER, Set CPSLIABTRIGGER:COMPANY_ID = sfpNAME:COMPANY_ID,
                           CPSLIABTRIGGER:STATE = L_STATE,
                           CPSLIABTRIGGER:LINE_OF_BUSINESS = sfpname:line_of_business, Generic

While CPSLIABTRIGGER:COMPANY_ID = sfpNAME:COMPANY_ID And
      CPSLIABTRIGGER:STATE = l_STATE And
      CPSLIABTRIGGER:LINE_OF_BUSINESS = sfpname:line_of_business
        Begin
        If sfpNAME:EFF_DATE >= CPSLIABTRIGGER:EFF_DATE Then
            Begin
            L_CODE_1 = CPSLIABTRIGGER:TRIGGER_ENDORSEMENT[5]
            L_CODE_2 = CPSLIABTRIGGER:TRIGGER_ENDORSEMENT[9]
            End

        Next CPSLIABTRIGGER
        End

write("%c%s",1005,"")
If L_CODE_1 <> "" Then
    Begin
    L_CODE = L_CODE_1
    Do ACCESS_sfpEND_1
    If L_ADD_ENDORSEMENT = "Y" And
       cppLIABLIMITS:NEWLY_ACQUIRED_ENTITIES = 1 Then
        Do ADD_sfpEND_1
    If L_ADD_ENDORSEMENT = "N" And
       cppLIABLIMITS:NEWLY_ACQUIRED_ENTITIES = 0 Then
        Do DELETE_sfpEND_1
    End

If L_CODE_2 <> "" Then
    Begin
    L_CODE = L_CODE_2
    Do ACCESS_sfpEND_1
    If L_ADD_ENDORSEMENT = "Y" And
       cppLIABLIMITS:EMPLOYMENT_RELATED_ACTS = 1 Then
        Do ADD_sfpEND_1
    If L_ADD_ENDORSEMENT = "N" And
       cppLIABLIMITS:EMPLOYMENT_RELATED_ACTS = 0 Then
        Do DELETE_sfpEND_1
    End

End

Procedure ACCESS_sfpEND_1
Begin
l_prem_no = 0000
l_build_no = 0000
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = l_prem_no,
                   sfpEND:BUILD_NO = l_build_no, Generic

L_ADD_ENDORSEMENT = "Y"
Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_Year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> l_prem_no Or
            sfpEND:BUILD_NO <> l_build_no

    If sfpEND:CODE = L_CODE Then
        L_ADD_ENDORSEMENT = "N"

    Next sfpEND
    End

End

Procedure ADD_sfpEND_1
Begin
l_prem_no = 0
l_build_no = 0
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = l_PREM_NO,
                   sfpEND:BUILD_NO = l_BUILD_NO, Generic

L_SUB_CODE = 0
Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_Year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> l_PREM_NO Or
            sfpEND:BUILD_NO <> l_BUILD_NO

    L_SUB_CODE = sfpEND:SUB_CODE

    Next sfpEND
    End

L_SUB_CODE = L_SUB_CODE + 10

L_STATE = cppLIABLIMITS:STATE
Access SFSOPTEND, Set SFSOPTEND:COMPANY_ID = sfpNAME:COMPANY_ID,
                      SFSOPTEND:STATE = L_STATE,
                      SFSOPTEND:LINE_OF_BUSINESS = l_line_of_business,
                      SFSOPTEND:CODE = L_CODE, Generic

Repeat Begin
    Exit If SFSOPTEND:COMPANY_ID <> sfpNAME:COMPANY_ID Or
            SFSOPTEND:STATE <> L_STATE Or
            SFSOPTEND:LINE_OF_BUSINESS <> l_line_of_business Or
            SFSOPTEND:CODE <> L_CODE

    If (sfpNAME:EFF_DATE >= SFSOPTEND:EFF_DATE and
       (sfpname:eff_date <= sfsoptend:exp_date or
       sfsoptend:exp_date = 0)) then
        Begin
        L_FORM_EDITION = SFSOPTEND:FORM_EDITION
        L_DESCRIPTION = SFSOPTEND:DESCRIPTION
        End

    Next SFSOPTEND
    End

Add sfpEND
    Begin
    sfpEND:policy_NO            =       G_policy_NO
    sfpend:pol_year             =       g_year
    sfpend:end_sequence         =       g_end_sequence
    sfpEND:PREM_NO              =       0000
    sfpEND:BUILD_NO             =       0000
    sfpEND:SUB_CODE             =       L_SUB_CODE
    sfpEND:CODE                 =       L_CODE
    sfpEND:FORM_EDITION         =       L_FORM_EDITION
    sfpEND:LOB_END_CODE         =       "L"
    sfpEND:DESCRIPTION          =       L_DESCRIPTION
    sfpEND:PREMIUM              =       0
    sfpend:policy_wide_form     =       1
    End

End

Procedure DELETE_sfpEND_1
Begin
l_prem_no = 0
l_build_no = 0
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = L_PREM_NO,
                   sfpEND:BUILD_NO = L_BUILD_NO, Generic

Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_Year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> L_PREM_NO Or
            sfpEND:BUILD_NO <> L_BUILD_NO

    If sfpEND:CODE = L_CODE Then
        Delete sfpEND

    Next sfpEND
    End

End

Procedure ACCESS_CPSLIABRATES
Begin
Access cpsliabrates1, Set cpsliabrates1:COMPANY_ID       = l_COMPANY_ID,
                          cpsliabrates1:STATE            = l_STATE,
                          cpsliabrates1:LINE_OF_BUSINESS = l_line_of_business,
                          cpsliabrates1:territory        = l_territory,
                          cpsliabrates1:CLASS_CODE       = cppartisan_alias:CLASS_CODE, Generic

l_base_rate_1 = 0
l_base_rate_2 = 0
l_arate_1 = 0
l_arate_2 = 0
l_products_not_applicable = 0
While cpsliabrates1:COMPANY_ID       = l_COMPANY_ID And
      cpsliabrates1:STATE            = l_STATE And
      cpsliabrates1:LINE_OF_BUSINESS = l_line_of_business And
      cpsliabrates1:territory        = l_territory and
      cpsliabrates1:CLASS_CODE       = cppartisan_alias:CLASS_CODE
        Begin
        If sfpNAME:EFF_DATE >= cpsliabrates1:RATE_DATE Then
            Begin
            l_BASE_RATE_1 = cpsliabrates1:premise
            l_BASE_RATE_2 = cpsliabrates1:products
            l_ARATE_1 = cpsliabrates1:ARATE[1]
            l_ARATE_2 = cpsliabrates1:ARATE[2]
            l_PRODUCTS_NOT_APPLICABLE = cpsliabrates1:products_included
            End

        Next cpsliabrates1
        End

End

procedure get_package_mod
begin
l_company_id = sfpname:company_id
access cpsisopackage, set cpsisopackage:company_id       = l_company_id,
                          cpsisopackage:state            = l_state,
                          cpsisopackage:line_of_business = l_line_of_business,
                          cpsisopackage:type             = l_type, generic

l_package_mod = 0
while cpsisopackage:company_id       = l_company_id and
      cpsisopackage:state            = l_state and
      cpsisopackage:line_of_business = l_line_of_business and
      cpsisopackage:type             = l_type
        begin
        if (sfpname:eff_date >= cpsisopackage:eff_date and
           (sfpname:eff_date <= cpsisopackage:exp_date or
           cpsisopackage:exp_date = 0)) then
            begin
            switch(l_coverage)
              case "P" : l_package_mod = cpsisopackage:package_mod[2]
              default  : l_package_mod = cpsisopackage:package_mod[3]
              end

            end

        next cpsisopackage
        end

end

procedure access_terrorism
begin
access sfpname, set sfpname:policy_no    = g_policy_no,
                    sfpname:pol_year     = g_year_1,
                    sfpname:end_sequence = g_end_sequence_1, generic

access sfsmsoterror, set sfsmsoterror:company_id       = sfpname:company_id,
                         sfsmsoterror:state            = l_state,
                         sfsmsoterror:line_of_business = sfpname:line_of_business, generic

l_add_back = 0
l_terror_eff_date = 0
while sfsmsoterror:company_id       = sfpname:company_id and
      sfsmsoterror:state            = l_state and
      sfsmsoterror:line_of_business = sfpname:line_of_business
        begin
        if (sfpname:eff_date >= sfsmsoterror:eff_date and
           (l_terror_eff_date < sfsmsoterror:eff_date or
           l_terror_eff_date = 0)) then
            begin
            l_terror_eff_date = sfsmsoterror:eff_date
            l_add_back        = sfsmsoterror:add_terror_back_on_renewal
            end

        next sfsmsoterror
        end

end

End
