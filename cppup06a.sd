%%
Program
        Name = "cppup06a" ;
        Type = "File" ;
        Padcharacter = Space ;
        Domain = "flat";

        Global String G_LIB[10];

        Global Unsigned Ascii Number G_POLICY_NO[9],
                                     G_YEAR[4],
                                     G_END_SEQUENCE[4],
                                     G_quote_NO[8] ,
                                     G_PREM_NO[4] ,
                                     G_BUILD_NO[4] ,
                                     G_NEW_policy_NO[8],
                                     G_LINE_OF_BUSINESS[4],
                                     G_STATE[2] ,
                                     G_CLASS_CODE[5] ,
                                     G_SUB_CODE[4] ;

        Global String G_COMPANY_ID[10] ;

        Local String L_RATE_TYPE_DESC[20] ,
                     L_MISC[1]="N",
                     l_fire_legal_code[7]="",
                     l_fire_code[1]="N",
                     L_FIRST[1]="Y",
                     L_BUILDING_INCLUDED[1]="N",
                     L_RATE_BOILERS[1]="N",
                     L_DEDUCTIBLE_TYPE[2]="",
                     L_CODE[7] ;

        Local Signed Ascii Number L_END_PREMIUM[8]=0 ,
                                  L_UPDATE_SFPEND_PREMIUM[6]=0,
                                  L_MISC_PREMIUM[8]=0 ,
                                  l_deviation[5]=0/dec=3,
                                  l_package_mod[5]=0/dec=3,
                                  l_rate[6]=0/dec=3,
                                  L_SUPPLEMENTAL_PREMIUM[8]=0;

        Local Unsigned Ascii Number L_SUB[2] ,
                                    L_PREM_MINIMUM[8]=0,
                                    L_PREM_NO[4]=0,
                                    L_BUILD_NO[4]=0,
                                    l_year[4]=0,
                                    l_end_sequence[4]=0,
                                    l_policy_no[8]=0,
                                    L_PROD_MINIMUM[8]=0 ,
                                    l_coll_deductible[4]=0/dec=3,
                                    l_comp_deductible[4]=0/dec=3,
                                    l_comp_premium[6]=0,
                                    l_coll_premium[6]=0,
                                    l_comp_charge[5]=0,
                                    l_coll_charge[5]=0,
                                    L_PREM_TOTAL[8]=0,
                                    L_PROD_TOTAL[8]=0,
                                    l_liability_prem[8]=0,
                                    l_liability_prod[8]=0,
                                    l_add_prem[8]=0,
                                    l_add_prod[8]=0,
                                    l_total_minimum[8]=0,
                                    l_total_policy[8]=0,
                                    l_mcl589_premium[8]=0,
                                    l_end_factor[4]=0/dec=3,
                                    l_end_factor_1[4]=0/dec=3,
                                    l_end_limit[5]=0,
                                    l_end_premium1[6]=0,
                                    l_end_premium2[6]=0,
                                    l_optional_premium[6]=0,
                                    l_end_limit_1[8]=0,
                                    l_hired_premium[8]=0,
                                    l_nonowned_premium[8]=0,
                                    l_il_factor[5]=0/dec=3,
                                    l_medical_surcharge[5]=0/dec=3,
                                    l_line_of_business[4],
                                    l_fire_legal_charge[4]=0 ,
                                    l_fire_legal_limit[8]=0,
                                    l_additional_premises[5]=0/dec=2,
                                    l_additional_premises_per[2]=0,
                                    l_custom_farming[5]=0/dec=3,
                                    l_custom_farming_per[4]=0,
                                    l_custom_farming_receipts[5]=0,
                                    l_farm_stands[5]=0/dec=3,
                                    l_farm_stands_per[4]=0,
                                    l_off_premises_grazing[5]=0/dec=3,
                                    l_off_premises_grazing_per[2]=0,
                                    l_multi_family[5]=0/dec=2,
                                    l_multi_family_per[2]=0,
                                    l_pick_own_offground[5]=0/dec=3,
                                    l_pick_own_not_offground[5]=0/dec=3,
                                    l_pick_own_per[4]=0;


        Include "cpsrate.var"

Initialisation
G_policy_NO = Val(COMMANDLINE[1,9])
g_year = val(commandline[10,13])
g_end_sequence = val(commandline[14,17])

Do RATE_LOCATION

Update

Procedure Definition

Procedure RATE_LOCATION
Begin
Access cppfarmliab_ALIAS, Set cppfarmliab_ALIAS:policy_NO = G_policy_NO,
                              cppfarmliab_alias:pol_year = g_year,
                              cppfarmliab_alias:end_sequence = g_end_sequence, Generic

l_prem_no = cppfarmliab_alias:prem_no
l_build_no = cppfarmliab_alias:build_no
l_class_code = cppfarmliab_alias:class_code
While cppfarmliab_ALIAS:policy_NO = G_policy_NO and
      cppfarmliab_alias:pol_year = g_year and
      cppfarmliab_alias:end_sequence = g_end_sequence
    Begin
    If L_PREM_NO = cppfarmliab_ALIAS:PREM_NO And
       L_BUILD_NO = cppfarmliab_ALIAS:BUILD_NO and
       l_class_code = cppfarmliab_alias:class_code Then
        L_FIRST = "Y"
    Else
        L_FIRST = "N"

    Access sfpNAME, Set sfpNAME:policy_NO = cppfarmliab_ALIAS:policy_NO,
                        sfpname:pol_year = cppfarmliab_alias:pol_year,
                        sfpname:end_sequence = cppfarmliab_alias:end_sequence, Generic

        access sfsline, set sfsline:company_id = sfpname:company_id,
                            sfsline:line_of_business = sfpname:line_of_business,
                            sfsline:lob_subline = "00", generic

        l_line_of_business = sfsline:rating_line_of_business

    access sfscompany, set sfscompany:company_id = sfpname:company_id, generic

    Access cppfarmlimits, Set cppfarmlimits:policy_NO = cppfarmliab_ALIAS:policy_NO,
                              cppfarmlimits:pol_year = cppfarmliab_alias:pol_year,
                              cppfarmlimits:end_sequence = cppfarmliab_alias:end_sequence, Generic

    L_STATE = cppfarmliab_ALIAS:STATE
    Do TERRITORY_FACTOR
    If L_TERRITORY_FACTOR = 0 Then
        L_TERRITORY_FACTOR = 1.00

    Change cppfarmliab_ALIAS
        Begin
        cppfarmliab_ALIAS:TERRITORY_FACTOR = L_TERRITORY_FACTOR
        End

    do company_deviation
    Do PACKAGE_MOD
    l_fire_legal_limit = cppfarmlimits:fire_legal
    Do AGGREGATE_SURCHARGE
    do medical_payments
    do additional_charges

    if l_first = "Y" then
        begin
        if cppfarmlimits:Fire_legal <> cpsliabdefault:fire_legal then
            begin
            if sfscompany:boiler_rating = 2 then
                begin
                change cppfarmliab_alias
                    begin
                    cppfarmliab_alias:fire_legal_premium = l_fire_legal_charge
                    end
                end
            else
                do update_fire_legal
            end
        else
            change cppfarmliab_alias
                begin
                cppfarmliab_alias:fire_legal_premium = 0
                end
        end
    else
        begin
        change cppfarmliab_alias
            begin
            cppfarmliab_alias:fire_legal_premium = 0
            end
        end

    Change cppfarmliab_ALIAS
        Begin
        if cppfarmliab_alias:additional_Premises[1] <> 0 then
            cppfarmliab_alias:additional_premises_premium[1] = ((cppfarmliab_alias:additional_premises[1] divide
                                                               l_additional_premises_per) *
                                                               l_additional_premises)
        else
            cppfarmliab_alias:additional_premises_premium[1] = 0
        if cppfarmliab_alias:additional_Premises[2] <> 0 then
            cppfarmliab_alias:additional_premises_premium[2] = ((cppfarmliab_alias:additional_premises[2] divide
                                                               l_additional_premises_per) *
                                                               l_additional_premises)
        else
            cppfarmliab_alias:additional_premises_premium[2] = 0
        if cppfarmliab_alias:additional_Premises[3] <> 0 then
            cppfarmliab_alias:additional_premises_premium[3] = ((cppfarmliab_alias:additional_premises[3] divide
                                                               l_additional_premises_per) *
                                                               l_additional_premises)
        else
            cppfarmliab_alias:additional_premises_premium[3] = 0
        if cppfarmliab_alias:additional_Premises[4] <> 0 then
            cppfarmliab_alias:additional_premises_premium[4] = ((cppfarmliab_alias:additional_premises[4] divide
                                                               l_additional_premises_per) *
                                                               l_additional_premises)
        else
            cppfarmliab_alias:additional_premises_premium[4] = 0
        if cppfarmliab_alias:custom_farming_receipts > l_custom_farming_receipts then
            cppfarmliab_alias:custom_farming_premium = (((cppfarmliab_alias:custom_farming_receipts -
                                                       l_custom_farming_receipts) divide
                                                       l_custom_farming_per) *
                                                       l_custom_farming)
        else
            cppfarmliab_alias:custom_farming_premium = 0
        if cppfarmliab_alias:farm_stands_receipts <> 0 then
            cppfarmliab_alias:farm_stands_premium = ((cppfarmliab_alias:farm_stands_receipts divide
                                                    l_farm_stands_per) *
                                                    l_farm_stands)
        else
            cppfarmliab_alias:farm_stands_premium = 0
        if cppfarmliab_alias:animals_grazing <> 0 then
            cppfarmliab_alias:animals_grazing_premium = ((cppfarmliab_alias:animals_grazing divide
                                                        l_off_premises_grazing_per) *
                                                        l_off_premises_grazing)
        else
            cppfarmliab_alias:animals_grazing_premium = 0
        if cppfarmliab_alias:multi_family_dwellings <> 0 then
            cppfarmliab_alias:multi_family_dwellings_premium = ((cppfarmliab_alias:multi_family_dwellings divide
                                                               l_multi_family_per) *
                                                               l_multi_family)
        else
            cppfarmliab_alias:multi_family_dwellings_premium = 0
        if cppfarmliab_alias:pick_your_own_receipts[1] <> 0 then
            cppfarmliab_alias:pick_your_own_premium[1] = ((cppfarmliab_alias:pick_your_own_receipts[1] divide
                                                         l_pick_own_per) *
                                                         l_pick_own_offground)
        else
            cppfarmliab_alias:pick_your_own_premium[1] = 0
        if cppfarmliab_alias:pick_your_own_receipts[2] <> 0 then
            cppfarmliab_alias:pick_your_own_premium[2] = ((cppfarmliab_alias:pick_your_own_receipts[2] divide
                                                         l_pick_own_per) *
                                                         l_pick_own_not_offground)
        else
            cppfarmliab_alias:pick_your_own_premium[2] = 0
        cppfarmliab_alias:medical_payment_surcharge = l_medical_surcharge
        if cppfarmliab_alias:medical_payment_surcharge = 0 then
            cppfarmliab_alias:medical_payment_surcharge = 1.00
        cppfarmliab_ALIAS:AGGREGATE_SURCHARGE[1] = L_EMPLOY_ACT_FACTOR *
                                                    L_CONTRACT_FACTOR_1 *
                                                    L_CONTRACT_FACTOR_2 *
                                                    L_CONTRACT_FACTOR_3 *
                                                    L_EMPLOYEE_INSURED_FACTOR *
                                                    L_FIRE_LEGAL_FACTOR *
                                                    L_MED_PAY_FACTOR *
                                                    L_ACQUIRED_ENTITY_FACTOR *
                                                    L_PERSONAL_INJURY_FACTOR
        If cppfarmliab_ALIAS:AGGREGATE_SURCHARGE[1] = 0 Then
            cppfarmliab_ALIAS:AGGREGATE_SURCHARGE[1] = 1.00
        cppfarmliab_ALIAS:AGGREGATE_SURCHARGE[2] = 1.00
        End

    Do LIABILITY_DEDUCTIBLE
    Change cppfarmliab_ALIAS
        Begin
        cppfarmliab_ALIAS:DEDUCTIBLE_FACTOR[1] = L_DEDUCTIBLE_FACTOR_1
        cppfarmliab_ALIAS:DEDUCTIBLE_FACTOR[2] = L_DEDUCTIBLE_FACTOR_2
        End

    Do INCREASE_LIMITS
    If L_PREM_IL_FACTOR = 0 Then
        L_PREM_IL_FACTOR = 1.00
    If L_PROD_IL_FACTOR = 0 Then
        L_PROD_IL_FACTOR = 1.00

    Change cppfarmliab_ALIAS
        Begin
        cppfarmliab_ALIAS:INCREASE_LIMITS_FACTOR[1] =  L_PREM_IL_FACTOR
        if cppfarmlimits:products <> 0 then
            cppfarmliab_ALIAS:INCREASE_LIMITS_FACTOR[2] = L_PROD_IL_FACTOR
        End

    Access CPSLIABMINIMUM, Set CPSLIABMINIMUM:COMPANY_ID = sfpNAME:COMPANY_ID,
                               CPSLIABMINIMUM:STATE = L_STATE,
                               CPSLIABMINIMUM:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS, Generic

    While CPSLIABMINIMUM:COMPANY_ID = sfpNAME:COMPANY_ID And
          CPSLIABMINIMUM:STATE = L_STATE And
          CPSLIABMINIMUM:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS
            Begin
            If sfpNAME:EFF_DATE >= CPSLIABMINIMUM:EFF_DATE Then
                Begin
                Switch(cppfarmliab_ALIAS:FORM)
                  Case 1  : L_PREM_MINIMUM = CPSLIABMINIMUM:MINIMUM_SUBLINE[1]
                  Case 2  : L_PREM_MINIMUM = CPSLIABMINIMUM:MINIMUM_SUBLINE[2]
                  Default : L_PREM_MINIMUM = CPSLIABMINIMUM:MINIMUM_SUBLINE[3]
                  End
                L_PROD_MINIMUM = CPSLIABMINIMUM:MINIMUM_SUBLINE[4]
                End

            Next CPSLIABMINIMUM
            End

    if cppfarmliab_alias:rating_territory_factor = 0 then
        change cppfarmliab_alias
            begin
            cppfarmliab_alias:rating_territory_factor = 1.00
            end

    Change cppfarmliab_ALIAS
        Begin
    --prem/ops
        if cppfarmliab_alias:premium[1] <> 0 then
            cppfarmliab_alias:prem[1] = cppfarmliab_alias:premium[1]
        else
            begin
            cppfarmliab_ALIAS:ADJUSTED_RATE[1] = cppfarmliab_ALIAS:BASE_RATE[1] *
                                                 cppfarmliab_ALIAS:INCREASE_LIMITS_FACTOR[1] *
                                                 cppfarmliab_ALIAS:AGGREGATE_SURCHARGE[1] *
                                                 cppfarmliab_alias:medical_payment_surcharge *
                                                 l_PACKAGE_MOD *
                                                 l_DEVIATION

            if l_first = "Y" then
                begin
                cppfarmliab_ALIAS:PREM[1] = --((cppfarmliab_ALIAS:EXPOSURE[1] Divide
                                             --cppfarmliab_ALIAS:RATES_PER[1]) *
                                             ((cppfarmliab_ALIAS:ADJUSTED_RATE[1] *
                                             cppfarmliab_alias:rating_territory_factor) +
                                             cppfarmliab_alias:fire_legal_premium)
                end
            else
                cppfarmliab_ALIAS:PREM[1] = --((cppfarmliab_ALIAS:EXPOSURE[1] Divide
                                             --cppfarmliab_ALIAS:RATES_PER[1]) *
                                             (cppfarmliab_ALIAS:ADJUSTED_RATE[1] *
                                             cppfarmliab_alias:rating_territory_factor)
            end

    -- products
        If cppfarmlimits:PRODUCTS <> 0 Then
            Begin
            If cppfarmliab_ALIAS:PRODUCTS_FLAT = 0 Then
                Begin
                -- Flemington does not apply company deviation to products
                if sfscompany:special_territory_rating = 1 then
                    cppfarmliab_ALIAS:ADJUSTED_RATE[2] = cppfarmliab_ALIAS:BASE_RATE[2] *
                                                         cppfarmliab_ALIAS:INCREASE_LIMITS_FACTOR[2] *
                                                         l_PACKAGE_MOD
                else
                    cppfarmliab_ALIAS:ADJUSTED_RATE[2] = cppfarmliab_ALIAS:BASE_RATE[2] *
                                                         cppfarmliab_ALIAS:INCREASE_LIMITS_FACTOR[2] *
                                                         l_PACKAGE_MOD *
                                                         l_deviation
                End
            Else
                Begin
                if sfscompany:special_territory_rating = 1 then
                    cppfarmliab_ALIAS:ADJUSTED_RATE[2] = cppfarmliab_ALIAS:BASE_RATE[2] *
                                                         cppfarmliab_ALIAS:INCREASE_LIMITS_FACTOR[2] *
                                                         l_PACKAGE_MOD
                else
                    cppfarmliab_ALIAS:ADJUSTED_RATE[2] = cppfarmliab_ALIAS:BASE_RATE[2] *
                                                         cppfarmliab_ALIAS:INCREASE_LIMITS_FACTOR[2] *
                                                         l_PACKAGE_MOD *
                                                         l_DEVIATION
                End


            if cppfarmliab_alias:premium[2] <> 0 then
                cppfarmliab_alias:prem[2] = cppfarmliab_alias:premium[2]
            else
            If cppfarmliab_ALIAS:PRODUCTS_FLAT = 1 Then
                cppfarmliab_ALIAS:PREM[2] = cppfarmliab_ALIAS:ADJUSTED_RATE[2]
            Else
                cppfarmliab_ALIAS:PREM[2] = ((cppfarmliab_ALIAS:EXPOSURE[2] Divide
                                             cppfarmliab_ALIAS:RATES_PER[2]) *
                                             cppfarmliab_ALIAS:ADJUSTED_RATE[2] *
                                             cppfarmliab_alias:rating_territory_factor)

            End
        Else
            Begin
            cppfarmliab_ALIAS:ADJUSTED_RATE[2] = 1.00
            cppfarmliab_ALIAS:PREM[2] = 0
            End

        L_TOTAL_PREM = L_TOTAL_PREM + cppfarmliab_ALIAS:PREM[1]
        L_TOTAL_PROD = L_TOTAL_PROD + cppfarmliab_ALIAS:PREM[2]
        cppfarmliab_ALIAS:TOTAL_PREMIUM = cppfarmliab_ALIAS:PREM[1] +
                                           cppfarmliab_ALIAS:PREM[2]
        End

    L_PREM_NO = cppfarmliab_ALIAS:PREM_NO
    L_BUILD_NO = cppfarmliab_ALIAS:BUILD_NO

    change cppfarmliab_alias
        begin
        l_optional_premium                 = cppfarmliab_alias:additional_premises_premium[1] +
                                             cppfarmliab_alias:additional_premises_premium[2] +
                                             cppfarmliab_alias:additional_premises_premium[3] +
                                             cppfarmliab_alias:additional_premises_premium[4] +
                                             cppfarmliab_alias:business_pursuits_premium +
                                             cppfarmliab_alias:custom_farming_premium +
                                             cppfarmliab_alias:farm_stands_premium +
                                             cppfarmliab_alias:animals_grazing_premium +
                                             cppfarmliab_alias:multi_family_dwellings_premium +
                                             cppfarmliab_alias:pick_your_own_premium[1] +
                                             cppfarmliab_alias:pick_your_own_premium[2] +
                                             cppfarmliab_alias:chemical_drift_premium
        cppfarmliab_alias:optional_premium = l_optional_premium
        l_total_prem = l_total_prem + l_optional_premium
        end

    Next cppfarmliab_ALIAS
    End

Access sfpEND_alias, Set sfpEND_alias:policy_NO = G_policy_NO,
                         sfpend_alias:pol_year = g_year,
                         sfpend_alias:end_sequence = g_end_sequence, generic

L_END_PREMIUM = 0
L_UPDATE_SFPEND_PREMIUM = 0
while sfpEND_alias:policy_NO = G_policy_NO and
      sfpend_alias:pol_year = g_year and
      sfpend_alias:end_sequence = g_end_sequence
        begin
        If sfpEND_alias:LOB_END_CODE = "L" Then
            begin
            l_policy_no = sfpend_alias:policy_no
            l_year = sfpend_alias:pol_year
            l_end_sequence = sfpend_alias:end_sequence
            l_prem_no = sfpend_alias:prem_no
            l_build_no = sfpend_alias:build_no
            L_UPDATE_SFPEND_PREMIUM = 0
            L_CODE = sfpEND_alias:CODE
            l_sub_code = sfpend_alias:sub_Code
            if sfpend_alias:manual_premium = 0 then
                begin
                Do RATE_ENDORSEMENTS
                Change sfpend_alias
                    Begin
                    sfpEND_alias:PREMIUM = L_UPDATE_SFPEND_PREMIUM
                    End
                L_END_PREMIUM = L_END_PREMIUM + L_UPDATE_SFPEND_PREMIUM
                end
            else
                l_end_premium = l_end_premium + sfpend_alias:manual_premium
            end

        Next sfpEND_alias
        End

Access sfpMISC, Set sfpMISC:policy_NO = G_policy_NO,
                    sfpmisc:pol_year = g_year,
                    sfpmisc:end_sequence = g_end_sequence, Generic

L_MISC_PREMIUM = 0
If L_MISC <> "Y" Then
    Begin
    Repeat Begin
        Exit If sfpMISC:policy_NO <> G_policy_NO or
                sfpmisc:pol_year <> g_year or
                sfpmisc:end_sequence <> g_end_sequence

        If sfpMISC:LOB_END_CODE = "L" Then
            Begin
            L_MISC_PREMIUM = L_MISC_PREMIUM + sfpMISC:PREMIUM
            L_MISC = "Y"
            End

        L_supplemental_PREMIUM = L_supplemental_PREMIUM + L_MISC_PREMIUM

        Next sfpMISC
        End
    End

Access cppfarmliab_ALIAS, Set cppfarmliab_ALIAS:policy_NO = G_policy_NO,
                              cppfarmliab_alias:pol_year = g_year,
                              cppfarmliab_alias:end_sequence = g_end_sequence, Generic

change cppfarmliab_alias
    begin
    cppfarmliab_ALIAS:TOTAL_ENDORSEMENTS = L_END_PREMIUM
    cppfarmliab_ALIAS:TOTAL_MISC = L_SUPPLEMENTAL_PREMIUM
    end

L_PREM_MINIMUM = (L_PREM_MINIMUM * (cppfarmliab_ALIAS:INCREASE_LIMITS_FACTOR[1] -
                 cppfarmliab_ALIAS:DEDUCTIBLE_FACTOR[1]))
L_PROD_MINIMUM = (L_PROD_MINIMUM * (cppfarmliab_ALIAS:INCREASE_LIMITS_FACTOR[2] -
                 cppfarmliab_ALIAS:DEDUCTIBLE_FACTOR[2]))

l_total_policy = l_total_prem + l_total_prod + l_supplemental_premium +
                 l_end_premium

if l_total_minimum < l_prem_minimum then
    l_total_minimum = l_prem_minimum
if l_total_minimum < l_prod_minimum and
   l_total_prod <> 0 then
    l_total_minimum = l_prod_minimum

If L_TOTAL_POLICY < L_TOTAL_MINIMUM Then
    Begin
    access cppfarmliab_alt, set cppfarmliab_alt:policy_no = g_policy_no,
                                cppfarmliab_alt:pol_year = g_year,
                                cppfarmliab_alt:end_sequence = g_end_sequence, generic

    while cppfarmliab_alt:policy_no = g_policy_no and
          cppfarmliab_alt:pol_year = g_year and
          cppfarmliab_alt:end_sequence = g_end_sequence
        begin
        Change cppfarmliab_ALT
            Begin
            cppfarmliab_ALT:MINIMUM_PREMIUM[1] = L_TOTAL_MINIMUM
            cppfarmliab_alt:minimum_premium[2] = 0
            End

        next cppfarmliab_alt
        end
    End
Else
    Begin
    access cppfarmliab_alt, set cppfarmliab_alt:policy_no = g_policy_no,
                                cppfarmliab_alt:pol_year = g_year,
                                cppfarmliab_alt:end_sequence = g_end_sequence, generic

    while cppfarmliab_alt:policy_no = g_policy_no and
          cppfarmliab_alt:pol_year = g_year and
          cppfarmliab_alt:end_sequence = g_end_sequence
        begin
        Change cppfarmliab_ALT
            Begin
            cppfarmliab_ALT:MINIMUM_PREMIUM[1] = 0
            cppfarmliab_alt:minimum_premium[2] = 0
            end

        next cppfarmliab_alt
        End
    End

End

Procedure RATE_ENDORSEMENTS
Begin
access sfpname, set sfpname:policy_no = g_policy_no,
                    sfpname:pol_year = g_Year,
                    sfpname:end_sequence = g_end_sequence, generic

Access SFSOPTEND, Set SFSOPTEND:COMPANY_ID = sfpNAME:COMPANY_ID,
                      SFSOPTEND:STATE = L_STATE,
                      SFSOPTEND:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS,
                      SFSOPTEND:CODE = L_CODE, Generic

Repeat Begin
    Exit If SFSOPTEND:COMPANY_ID <> sfpNAME:COMPANY_ID Or
            SFSOPTEND:STATE <> l_STATE Or
            SFSOPTEND:LINE_OF_BUSINESS <> l_LINE_OF_BUSINESS Or
            SFSOPTEND:CODE <> L_CODE

    If (sfpNAME:EFF_DATE >= SFSOPTEND:EFF_DATE and
       (sfpname:eff_date <= sfsoptend:exp_date or
       sfsoptend:exp_date = 0)) Then
        Begin
        L_END_FACTOR = SFSOPTEND:PREMIUM_1[1]
        l_end_factor_1 = sfsoptend:premium_1[2]
        L_END_LIMIT = SFSOPTEND:LIMIT[1]
        L_END_PREMIUM1 = SFSOPTEND:PREMIUM_1[1]
        l_end_premium2 = sfsoptend:premium_1[2]
        l_end_limit_1 = sfsoptend:limit[2]

        if l_code one of "MCL420" then
            begin
            access cppendorse, set cppendorse:policy_no = l_policy_no,
                                   cppendorse:pol_year = l_year,
                                   cppendorse:end_sequence = l_end_sequence,
                                   cppendorse:prem_no = l_prem_no,
                                   cppendorse:build_no = l_build_no,
                                   cppendorse:code = l_code, generic

            l_update_sfpend_premium = 0
            while cppendorse:policy_no = l_policy_no and
                  cppendorse:pol_year = l_year and
                  cppendorse:end_sequence = l_end_sequence and
                  cppendorse:prem_no = l_prem_no and
                  cppendorse:build_no = l_build_no and
                  cppendorse:code = l_code
                    begin
                    l_end_premium1 = 0
                    if cppfarmlimits:occurrence = sfsoptend:limit[1] then
                        l_update_sfpend_premium = cppendorse:no_ministers *
                                                  sfsoptend:premium_1[1]
                    else
                    if cppfarmlimits:occurrence = sfsoptend:limit[2] then
                        l_update_sfpend_premium = cppendorse:no_ministers *
                                                  sfsoptend:premium_1[2]
                    else
                    if cppfarmlimits:occurrence = sfsoptend:limit[3] then
                        l_update_sfpend_premium = cppendorse:no_ministers *
                                                  sfsoptend:premium_1[3]
                    else
                    if cppfarmlimits:occurrence = sfsoptend:limit[4] then
                        l_update_sfpend_premium = cppendorse:no_ministers *
                                                  sfsoptend:premium_1[4]
                    next cppendorse
                    end

            end

        End
    Next SFSOPTEND
    End

if l_end_premium1 <> 0 and
   l_update_sfpend_premium = 0 then
    l_update_sfpend_premium = l_end_premium1

access sfscompany, set sfscompany:company_id = sfpname:company_id, generic

if l_code one of "MCL313", "MCL320", "MCL325" and
   sfscompany:boiler_rating = 1 then
    begin
    access cppendorse, set cppendorse:policy_no = l_policy_no,
                           cppendorse:pol_year = l_year,
                           cppendorse:end_sequence = l_end_sequence,
                           cppendorse:prem_no = l_prem_no,
                           cppendorse:build_no = l_build_no,
                           cppendorse:code = l_code, generic

    l_update_sfpend_premium = 0
    while cppendorse:policy_no = l_policy_no and
          cppendorse:pol_year = l_year and
          cppendorse:end_sequence = l_end_sequence and
          cppendorse:prem_no = l_prem_no and
          cppendorse:build_no = l_build_no and
          cppendorse:code = l_code
            begin
            if cppendorse:total_premium <> 0 then
                begin
                l_update_sfpend_premium = cppendorse:total_premium
                end
            else
            if cppendorse:total_premium = 0 then
                begin
                if sfpend_alias:policy_wide_form = 0 then
                    begin
                    access cppfarmliab_alt, set cppfarmliab_alt:policy_no = cppendorse:policy_no,
                                                cppfarmliab_alt:pol_Year = cppendorse:pol_year,
                                                cppfarmliab_alt:end_sequence = cppendorse:end_sequence,
                                                cppfarmliab_alt:prem_no = cppendorse:prem_no,
                                                cppfarmliab_alt:build_no = cppendorse:build_no, generic

                    if l_end_factor <> 0 then
                        l_add_prem = ((cppfarmliab_alt:prem[1] * l_end_factor) -
                                     cppfarmliab_alt:prem[1])
                    else
                        l_add_prem = 0
                    if l_end_factor_1 <> 0 then
                        l_add_prod = ((cppfarmliab_alt:prem[2] * l_end_factor_1) -
                                     cppfarmliab_alt:prem[2])
                    else
                        l_add_prod = 0
                    end
                else
                    begin
                    access cppfarmliab_alt, set cppfarmliab_alt:policy_no = cppendorse:policy_no,
                                                cppfarmliab_alt:pol_Year = cppendorse:pol_year,
                                                cppfarmliab_alt:end_sequence = cppendorse:end_sequence,  generic

                    l_liability_prem = 0
                    l_liability_prod = 0
                    while cppfarmliab_alt:policy_no = cppendorse:policy_no and
                          cppfarmliab_alt:pol_Year = cppendorse:pol_year and
                          cppfarmliab_alt:end_sequence = cppendorse:end_sequence
                        begin
                        l_liability_prem = cppfarmliab_alt:prem[1]
                        l_liability_prod = cppfarmliab_alt:prem[2]

                        next cppfarmliab_alt
                        end

                    if l_end_factor <> 0 then
                        l_add_prem = ((l_liability_prem * l_end_factor) -
                                 l_liability_prem)
                    else
                        l_add_prem = 0
                    if l_end_factor_1 <> 0 then
                        l_add_prod = ((l_liability_prod * l_end_factor_1) -
                                     l_liability_prod)
                    else
                        l_add_prod = 0
                    end

                l_update_sfpend_premium = l_update_sfpend_premium +
                                          l_add_prem + l_add_prod
                end

            next cppendorse
            end
    end

if l_code one of "MCL315", "MCL316", "MCL317", "MCL324", "MCL326" and
   sfscompany:boiler_rating = 1 then
    begin
    access cppendorse, set cppendorse:policy_no = sfpend_alias:policy_no,
                           cppendorse:pol_year = sfpend_alias:pol_year,
                           cppendorse:end_sequence = sfpend_alias:end_sequence,
                           cppendorse:prem_no = sfpend_alias:prem_no,
                           cppendorse:build_no = sfpend_alias:build_no,
                           cppendorse:code = l_code, generic

    l_update_sfpend_premium = 0
    while cppendorse:policy_no = sfpend_alias:policy_no and
          cppendorse:pol_year = sfpend_alias:pol_year and
          cppendorse:end_sequence = sfpend_alias:end_sequence and
          cppendorse:prem_no = sfpend_alias:prem_no and
          cppendorse:build_no = sfpend_alias:build_no and
          cppendorse:code = l_code
            begin
            if sfpend_alias:policy_wide_form = 0 then
                begin
                access cppfarmliab_alt, set cppfarmliab_alt:policy_no = cppendorse:policy_no,
                                            cppfarmliab_alt:pol_year = cppendorse:pol_year,
                                            cppfarmliab_alt:end_sequence = cppendorse:end_sequence,
                                            cppfarmliab_alt:prem_no = cppendorse:prem_no,
                                            cppfarmliab_alt:build_no = cppendorse:build_no, generic

                if l_end_factor <> 0 then
                    l_add_prem = ((cppfarmliab_alt:prem[1] * l_end_factor) -
                                 cppfarmliab_alt:prem[1])
                else
                    l_add_prem = 0
                if l_end_factor_1 <> 0 then
                    l_add_prod = ((cppfarmliab_alt:prem[2] * l_end_factor_1) -
                                cppfarmliab_alt:prem[2])
                else
                    l_add_prod = 0
                end
            else
                begin
                access cppfarmliab_alt, set cppfarmliab_alt:policy_no = cppendorse:policy_no,
                                            cppfarmliab_alt:pol_year = cppendorse:pol_year,
                                            cppfarmliab_alt:end_sequence = cppendorse:end_sequence, generic

                l_liability_prem = 0
                l_liability_prod = 0
                while cppfarmliab_alt:policy_no = cppendorse:policy_no and
                      cppfarmliab_alt:pol_year = cppendorse:pol_year and
                      cppfarmliab_alt:end_sequence = cppendorse:end_sequence
                    begin
                    l_liability_prem = cppfarmliab_alt:prem[1]
                    l_liability_prod = cppfarmliab_alt:prem[2]

                    next cppfarmliab_alt
                    end

                if l_end_factor <> 0 then
                    l_add_prem = ((l_liability_prem * l_end_factor) -
                                 l_liability_prem)
                else
                    l_add_prem = 0
                if l_end_factor_1 <> 0 then
                    l_add_prod = ((l_liability_prod * l_end_factor_1) -
                                l_liability_prod)
                else
                    l_add_prod = 0
                end

            l_update_sfpend_premium = l_update_sfpend_premium +
                                      l_add_prem + l_add_prod

            next cppendorse
            end
    end

if l_code one of "MCL300", "MCL301", "MCL302", "MCL303", "MCL304", "MCL305",
                 "MCL309", "MCL310", "MCL311", "MCL312", "MCL313", "MCL314",
                 "MCL315", "MCL316", "MCL317", "MCL318", "MCL319", "MCL320",
                 "MCL321", "MCL322", "MCL323", "MCL324", "MCL325", "MCL326",
                 "MCL327", "MCL328", "MCL330", "MCL350"  and
                 sfscompany:boiler_rating not one of 1 then
    begin
    access cppendorse, set cppendorse:policy_no = sfpend_alias:policy_no,
                           cppendorse:pol_year = sfpend_alias:pol_year,
                           cppendorse:end_sequence = sfpend_alias:end_sequence,
                           cppendorse:prem_no = sfpend_alias:prem_no,
                           cppendorse:build_no = sfpend_alias:build_no,
                           cppendorse:code = l_code, generic

    l_update_sfpend_premium = 0
    while cppendorse:policy_no = sfpend_alias:policy_no and
          cppendorse:pol_Year = sfpend_alias:pol_year and
          cppendorse:end_sequence = sfpend_alias:end_sequence and
          cppendorse:prem_no = sfpend_alias:prem_no and
          cppendorse:build_no = sfpend_alias:build_no and
          cppendorse:code = l_code
            begin
            if cppendorse:total_premium <> 0 then
                l_update_sfpend_premium = cppendorse:total_premium
            else
                l_update_sfpend_premium = l_update_sfpend_premium +
                                          l_end_premium1

            next cppendorse
            end

    end

If L_CODE one of "MCL410", "MCL411", "MCL412" then
    Begin
    access cppendorse, set cppendorse:policy_no = sfpend_alias:policy_no,
                           cppendorse:pol_year = sfpend_alias:pol_year,
                           cppendorse:end_sequence = sfpend_alias:end_sequence,
                           cppendorse:prem_no = sfpend_alias:prem_no,
                           cppendorse:build_no = sfpend_alias:build_no,
                           cppendorse:code = l_code, generic

    access cpsliabhired, set cpsliabhired:company_id = sfpname:company_id,
                             cpsliabhired:state = l_state,
                             cpsliabhired:line_of_business = l_line_of_business, generic

    if sfpname:eff_date >= cpsliabhired:eff_date then
        begin
        l_hired_premium = ((cppendorse:limit[1] divide cpsliabhired:hired_per) *
                          cpsliabhired:hired_rate)
        if l_hired_premium < cpsliabhired:hired_minimum then
            l_hired_premium = cpsliabhired:hired_minimum
        if cppendorse:no_employees <= cpsliabhired:nonowned_employees[1] then
            l_nonowned_premium = cpsliabhired:nonowned_premium[1]
        if cppendorse:no_employees > cpsliabhired:nonowned_employees[1] and
           cppendorse:no_employees <= cpsliabhired:nonowned_employees[2] then
            l_nonowned_premium = cpsliabhired:nonowned_premium[2]
        if cppendorse:no_employees > cpsliabhired:nonowned_employees[2] and
           cppendorse:no_employees <= cpsliabhired:nonowned_employees[3] then
            l_nonowned_premium = cpsliabhired:nonowned_premium[3]
        if cppendorse:no_employees > cpsliabhired:nonowned_employees[3] and
           cppendorse:no_employees <= cpsliabhired:nonowned_employees[4] then
            l_nonowned_premium = cpsliabhired:nonowned_premium[4]
        if cppendorse:no_employees > cpsliabhired:nonowned_employees[4] and
           cppendorse:no_employees <= cpsliabhired:nonowned_employees[5] then
            l_nonowned_premium = cpsliabhired:nonowned_premium[5]
        end

    access cppfarmliab_alt, set cppfarmliab_alt:policy_no = sfpend_alias:policy_no,
                                cppfarmliab_alt:pol_year = sfpend_alias:pol_year,
                                cppfarmliab_alt:end_sequence = sfpend_alias:end_sequence, generic

    while cppfarmliab_alt:policy_no = sfpend_alias:policy_no and
          cppfarmliab_alt:pol_year = sfpend_alias:pol_year and
          cppfarmliab_alt:end_sequence = sfpend_alias:end_sequence
            begin
            if l_il_factor < cppfarmliab_alt:increase_limits_factor[1] then
                l_il_factor = cppfarmliab_alt:increase_limits_factor[1]
            if l_il_factor < cppfarmliab_alt:increase_limits_factor[2] then
                l_il_factor = cppfarmliab_alt:increase_limits_factor[2]

            next cppfarmliab_alt
            end

    l_nonowned_premium = l_nonowned_premium * l_il_factor
    l_hired_premium = l_hired_premium * l_il_factor
    l_update_sfpend_premium = l_nonowned_premium + l_hired_premium
    end

if l_code one of "MGK011" then
    begin
    access cppendorse, set cppendorse:policy_no = sfpend_alias:policy_no,
                           cppendorse:pol_year = sfpend_alias:pol_year,
                           cppendorse:end_sequence = sfpend_alias:end_sequence,
                           cppendorse:prem_no = sfpend_alias:prem_no,
                           cppendorse:build_no = sfpend_alias:build_no,
                           cppendorse:code = l_code, generic

    while cppendorse:policy_no = sfpend_alias:policy_no and
          cppendorse:pol_year = sfpend_alias:pol_year and
          cppendorse:end_sequence = sfpend_alias:end_sequence and
          cppendorse:prem_no = sfpend_alias:prem_no and
          cppendorse:build_no = sfpend_alias:build_no and
          cppendorse:code = l_code
            begin
            access cppfarmliab_alias, set cppfarmliab_alias:policy_no = cppendorse:policy_no,
                                          cppfarmliab_alias:pol_year = cppendorse:pol_year,
                                          cppfarmliab_alias:end_sequence = cppendorse:end_sequence,
                                          cppfarmliab_alias:prem_no = cppendorse:prem_no,
                                          cppfarmliab_alias:build_no = cppendorse:build_no, generic

            l_limit = cppendorse:limit[1]
            l_state = cppfarmliab_alias:state
            access cpsgaragekeepers, set cpsgaragekeepers:company_id = sfpname:company_id,
                                         cpsgaragekeepers:state = l_state,
                                         cpsgaragekeepers:line_of_business = l_line_of_business,
                                         cpsgaragekeepers:limit = l_limit, generic

            l_comp_charge = 0
            while cpsgaragekeepers:company_id = sfpname:company_id and
                  cpsgaragekeepers:state = l_state and
                  cpsgaragekeepers:line_of_business = l_line_of_business and
                  cpsgaragekeepers:limit = l_limit
                    begin
                    if sfpname:eff_date >= cpsgaragekeepers:rate_date then
                        begin
                        if cppendorse:direct_primary = 1 then
                            begin
                            l_comp_charge = cpsgaragekeepers:charge[2]
                            end
                        else
                        if cppendorse:direct_excess = 1 then
                            begin
                            l_comp_charge = cpsgaragekeepers:charge[1] *
                                            cpsgaragekeepers:comp_rate
                            end
                        else
                            begin
                            l_comp_charge = cpsgaragekeepers:charge[1]
                            end
                        end

                    next cpsgaragekeepers
                    end

            l_limit = cppendorse:limit[2]
            l_state = cppfarmliab_alias:state
            access cpsgaragekeepers, set cpsgaragekeepers:company_id = sfpname:company_id,
                                         cpsgaragekeepers:state = l_state,
                                         cpsgaragekeepers:line_of_business = l_line_of_business,
                                         cpsgaragekeepers:limit = l_limit, generic

            l_coll_charge = 0
            while cpsgaragekeepers:company_id = sfpname:company_id and
                  cpsgaragekeepers:state = l_state and
                  cpsgaragekeepers:line_of_business = l_line_of_business and
                  cpsgaragekeepers:limit = l_limit
                    begin
                    if sfpname:eff_date >= cpsgaragekeepers:rate_date then
                        begin
                        if cppendorse:direct_primary = 1 then
                            begin
                            l_coll_charge = cpsgaragekeepers:charge[4]
                            end
                        else
                        if cppendorse:direct_excess = 1 then
                            begin
                            l_coll_charge = cpsgaragekeepers:charge[3] *
                                            cpsgaragekeepers:coll_rate
                            end
                        else
                            begin
                            l_coll_charge = cpsgaragekeepers:charge[3]
                            end
                        end

                    next cpsgaragekeepers
                    end

            l_deductible = cppendorse:deductible[1]
            access cpsgaragededuct, set cpsgaragededuct:company_id = sfpname:company_id,
                                        cpsgaragededuct:state = l_state,
                                        cpsgaragededuct:line_of_business = l_line_of_business,
                                        cpsgaragededuct:deductible = l_deductible, generic

            l_comp_deductible = 1.00
            while cpsgaragededuct:company_id = sfpname:company_id and
                  cpsgaragededuct:state = l_state and
                  cpsgaragededuct:line_of_business = l_line_of_business and
                  cpsgaragededuct:deductible = l_deductible
                    begin
                    if sfpname:eff_date >= cpsgaragededuct:rate_date then
                        begin
                        l_comp_deductible = cpsgaragededuct:factor[1]
                        end

                    next cpsgaragededuct
                    end

            l_deductible = cppendorse:deductible[2]
            access cpsgaragededuct, set cpsgaragededuct:company_id = sfpname:company_id,
                                        cpsgaragededuct:state = l_state,
                                        cpsgaragededuct:line_of_business = l_line_of_business,
                                        cpsgaragededuct:deductible = l_deductible, generic

            l_coll_deductible = 1.00
            while cpsgaragededuct:company_id = sfpname:company_id and
                  cpsgaragededuct:state = l_state and
                  cpsgaragededuct:line_of_business = l_line_of_business and
                  cpsgaragededuct:deductible = l_deductible
                    begin
                    if sfpname:eff_date >= cpsgaragededuct:rate_date then
                        begin
                        l_coll_deductible = cpsgaragededuct:factor[2]
                        end

                    next cpsgaragededuct
                    end

            l_comp_premium = l_comp_charge * l_comp_deductible
            l_coll_premium = l_coll_charge * l_coll_deductible
            change cppendorse
                begin
                cppendorse:premium[1] = l_comp_premium
                cppendorse:premium[2] = l_coll_premium
                end

            next cppendorse
            end

    l_update_sfpend_premium = l_comp_premium + l_coll_premium
    end

if l_code one of "MCL589" then
    begin
    if sfpend_alias:policy_wide_form = 0 then
        begin
        access cppfarmliab_alt, set cppfarmliab_alt:policy_no = sfpend_alias:policy_no,
                                    cppfarmliab_alt:pol_year = sfpend_alias:pol_year,
                                    cppfarmliab_alt:end_sequence = sfpend_alias:end_sequence,
                                    cppfarmliab_alt:prem_no = sfpend_alias:prem_no,
                                    cppfarmliab_alt:build_no = sfpend_alias:build_no, generic

        while cppfarmliab_alt:policy_no = sfpend_alias:policy_no and
              cppfarmliab_alt:pol_year = sfpend_alias:pol_year and
              cppfarmliab_alt:end_sequence = sfpend_alias:end_sequence and
              cppfarmliab_alt:prem_no = sfpend_alias:prem_no and
              cppfarmliab_alt:build_no = sfpend_alias:build_no
                begin
                l_mcl589_premium = cppfarmliab_alt:prem[1] + l_mcl589_premium

                next cppfarmliab_alt
                end
        end
    else
        begin
        access cppfarmliab_alt, set cppfarmliab_alt:policy_no = sfpend_alias:policy_no,
                                    cppfarmliab_alt:pol_year = sfpend_alias:pol_year,
                                    cppfarmliab_alt:end_sequence = sfpend_alias:end_sequence, generic

        while cppfarmliab_alt:policy_no = sfpend_alias:policy_no and
              cppfarmliab_alt:pol_Year = sfpend_alias:pol_year and
              cppfarmliab_alt:end_sequence = sfpend_alias:end_sequence
                begin
                l_mcl589_premium = cppfarmliab_alt:prem[1] + l_mcl589_premium

                next cppfarmliab_alt
                end
        end

    l_update_sfpend_premium= ((l_mcl589_premium *
                             l_end_factor) - l_mcl589_premium)
    if l_update_sfpend_premium < l_end_premium2 then
        l_update_sfpend_premium = l_end_premium2
    end
end

Procedure COMPANY_DEVIATION
Begin
access sfpname, set sfpname:policy_no = cppfarmliab_alias:policy_no,
                    sfpname:pol_year = cppfarmliab_alias:pol_year,
                    sfpname:end_sequence = cppfarmliab_alias:end_sequence, generic

access cpsdefault, set cpsdefault:company_id = sfpname:company_id,
                       cpsdefault:line_of_business = l_line_of_business, generic

access cppdeviation, set cppdeviation:policy_no = cppfarmliab_alias:policy_no,
                         cppdeviation:pol_year = cppfarmliab_alias:pol_year,
                         cppdeviation:end_sequence = cppfarmliab_alias:end_sequence, generic

if cppdeviation:company_deviation = 0 then
    l_deviation = 1.00
else
    if cpsdefault:deviation_number_not_factor = 1 and
       cppdeviation:company_deviation <> 1.00 then
        l_deviation = (1 + (cppdeviation:company_deviation * 0.01))
    else
        l_deviation = cppdeviation:company_deviation

End

Procedure PACKAGE_MOD
Begin
access cppdeviation, set cppdeviation:policy_no = cppfarmliab_alias:policy_no,
                         cppdeviation:pol_year = cppfarmliab_alias:pol_year,
                         cppdeviation:end_sequence = cppfarmliab_alias:end_sequence, generic

if cppdeviation:package_mod = 0 then
    l_package_mod = 1.00
else
    begin
    if cpsdefault:deviation_number_not_factor = 1 and
       cppdeviation:package_mod <> 1.00 then
        l_package_mod = (1 + (cppdeviation:package_mod * 0.01))
    else
        l_package_mod = cppdeviation:package_mod
    end

End

procedure additional_charges
begin
l_state = cppfarmliab_alias:state
access cpsfarmliab, set cpsfarmliab:company_id = sfpname:company_id,
                        cpsfarmliab:state = l_state,
                        cpsfarmliab:line_of_business = l_line_of_business, generic

while cpsfarmliab:company_id = sfpname:company_id and
      cpsfarmliab:state = l_state and
      cpsfarmliab:line_of_business = l_line_of_business
        begin
        if sfpname:eff_date >= cpsfarmliab:reff_date then
            begin
            l_additional_premises = cpsfarmliab:additional_premises
            l_additional_premises_per = cpsfarmliab:additional_premises_per
            l_custom_farming = cpsfarmliab:custom_farming
            l_custom_farming_per = cpsfarmliab:custom_farming_per
            l_custom_farming_receipts = cpsfarmliab:custom_farming_receipts
            l_farm_stands = cpsfarmliab:farm_stands
            l_farm_stands_per = cpsfarmliab:farm_stands_per
            l_off_premises_grazing = cpsfarmliab:off_premises_grazing
            l_off_premises_grazing_per = cpsfarmliab:off_premises_grazing_per
            l_multi_family = cpsfarmliab:multi_family
            l_multi_family_per = cpsfarmliab:multi_family_per
            l_pick_own_offground = cpsfarmliab:pick_own_offground
            l_pick_own_not_offground = cpsfarmliab:pick_own_not_offground
            l_pick_own_per = cpsfarmliab:pick_own_per
            end

        next cpsfarmliab
        end


end

Procedure LIABILITY_DEDUCTIBLE
Begin
L_COMPANY_ID = sfpNAME:COMPANY_ID
L_STATE = cppfarmliab_ALIAS:STATE
L_LIMITS_TABLE = cppfarmliab_ALIAS:LIMITS_TABLE
l_eff_date = sfpname:eff_date

Access cppLIABDEDUCT, Set cppLIABDEDUCT:policy_NO = cppfarmliab_ALIAS:policy_NO,
                          cppliabdeduct:pol_year = cppfarmliab_alias:pol_year,
                          cppliabdeduct:end_sequence = cppfarmliab_alias:end_sequence, generic

If cppLIABDEDUCT:DEDUCTIBLE[1] <> 0 Or
   cppLIABDEDUCT:DEDUCTIBLE[2] <> 0 Then
    Begin
    If cppLIABDEDUCT:DEDUCTIBLE[1] <> 0 Then
        L_DEDUCTIBLE = cppLIABDEDUCT:DEDUCTIBLE[1]
    Else
        L_DEDUCTIBLE = cppLIABDEDUCT:DEDUCTIBLE[2]
    L_DEDUCTIBLE_TYPE = "BI"
    End

If cppLIABDEDUCT:DEDUCTIBLE[3] <> 0 Or
   cppLIABDEDUCT:DEDUCTIBLE[4] <> 0 Then
    Begin
    If cppLIABDEDUCT:DEDUCTIBLE[3] <> 0 Then
        L_DEDUCTIBLE = cppLIABDEDUCT:DEDUCTIBLE[3]
    Else
        L_DEDUCTIBLE = cppLIABDEDUCT:DEDUCTIBLE[4]
    L_DEDUCTIBLE_TYPE = "PD"
    End

If cppLIABDEDUCT:DEDUCTIBLE[5] <> 0 Or
   cppLIABDEDUCT:DEDUCTIBLE[6] <> 0 Then
    Begin
    If cppLIABDEDUCT:DEDUCTIBLE[5] <> 0 Then
        L_DEDUCTIBLE = cppLIABDEDUCT:DEDUCTIBLE[5]
    Else
        L_DEDUCTIBLE = cppLIABDEDUCT:DEDUCTIBLE[6]
    L_DEDUCTIBLE_TYPE = "BO"
    End

Include "cpsliabdeduct.pro"

End

Procedure TERRITORY_FACTOR
Begin
L_STATE = cppfarmliab_ALIAS:STATE
L_COUNTY = cppfarmliab_ALIAS:COUNTY
Access CPSLIABTERRCODE, Set CPSLIABTERRCODE:COMPANY_ID = sfpNAME:COMPANY_ID,
                            CPSLIABTERRCODE:STATE = L_STATE,
                            CPSLIABTERRCODE:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS,
                            CPSLIABTERRCODE:COUNTY = L_COUNTY, Generic

While CPSLIABTERRCODE:COMPANY_ID = sfpNAME:COMPANY_ID And
      CPSLIABTERRCODE:STATE = L_STATE And
      CPSLIABTERRCODE:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS And
      CPSLIABTERRCODE:COUNTY = L_COUNTY
        Begin
        If sfpNAME:EFF_DATE >= CPSLIABTERRCODE:EFF_DATE Then
            Begin
            L_FORM_1 = cppfarmliab_ALIAS:FORM
            L_SUB = 0
            Access CPSLIABDEFAULT, Set CPSLIABDEFAULT:COMPANY_ID = sfpNAME:COMPANY_ID,
                                       CPSLIABDEFAULT:STATE = L_STATE,
                                       CPSLIABDEFAULT:LIABILITY_FORM = L_FORM_1, Generic

            If CPSLIABDEFAULT:SPECIAL_TERRITORY_FACTORS = 1 Then
                Begin
                L_COUNTY = CPSLIABTERRCODE:COUNTY_CODE
                L_SUB = 1
                L_CLASS_CODE = 0
                While L_SUB <= 20 And
                      CPSLIABTERRCODE:CLASS_CODE[L_SUB] <> 0 And
                      L_CLASS_CODE = 0
                    Begin
                    If cppfarmliab_ALIAS:CLASS_CODE = CPSLIABTERRCODE:CLASS_CODE[L_SUB] Then
                        Begin
                        L_CLASS_CODE = CPSLIABTERRCODE:CLASS_CODE[L_SUB]
                        L_SUB = 21
                        End
                    Else
                    If CPSLIABTERRCODE:CLASS_CODE[L_SUB] = 99999 And
                       L_CLASS_CODE = 0 Then
                         Begin
                         L_CLASS_CODE = CPSLIABTERRCODE:CLASS_CODE[L_SUB]
                         L_SUB = 21
                         End
                    L_SUB = L_SUB + 1
                    End
                End
            Else
                Begin
                L_COUNTY = CPSLIABTERRCODE:COUNTY_CODE
                If CPSLIABTERRCODE:CLASS_CODE[1] <> 0 Then
                    L_CLASS_CODE = CPSLIABTERRCODE:CLASS_CODE[1]
                End
            End
        Next CPSLIABTERRCODE
        End

L_FORM = cppfarmliab_ALIAS:FORM
L_EXPOSURE_BASE = cppfarmliab_ALIAS:EXPOSURE_BASE[1]
Access CPSLIABTERRITORY, Set CPSLIABTERRITORY:COMPANY_ID = sfpNAME:COMPANY_ID,
                             CPSLIABTERRITORY:STATE = L_STATE,
                             CPSLIABTERRITORY:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS,
                             CPSLIABTERRITORY:FORM = L_FORM,
                             CPSLIABTERRITORY:EXPOSURE = L_EXPOSURE_BASE,
                             CPSLIABTERRITORY:COUNTY = L_COUNTY,
                             CPSLIABTERRITORY:CLASS_CODE = L_CLASS_CODE, Generic

While CPSLIABTERRITORY:COMPANY_ID = sfpNAME:COMPANY_ID And
      CPSLIABTERRITORY:STATE = L_STATE And
      CPSLIABTERRITORY:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS And
      CPSLIABTERRITORY:FORM = L_FORM And
      CPSLIABTERRITORY:EXPOSURE = L_EXPOSURE_BASE And
      CPSLIABTERRITORY:COUNTY = L_COUNTY And
      CPSLIABTERRITORY:CLASS_CODE = L_CLASS_CODE
        Begin
        If sfpNAME:EFF_DATE >= CPSLIABTERRITORY:EFF_DATE Then
            Begin
            Switch(cppfarmliab_ALIAS:TERRITORY_TABLE)
              Case "A" : L_TERRITORY_FACTOR = CPSLIABTERRITORY:FACTOR[1]
              Case "B" : L_TERRITORY_FACTOR = CPSLIABTERRITORY:FACTOR[2]
              Case "C" : L_TERRITORY_FACTOR = CPSLIABTERRITORY:FACTOR[3]
              Case "D" : L_TERRITORY_FACTOR = CPSLIABTERRITORY:FACTOR[4]
              Case "E" : L_TERRITORY_FACTOR = CPSLIABTERRITORY:FACTOR[5]
              Case "F" : L_TERRITORY_FACTOR = CPSLIABTERRITORY:FACTOR[6]
              Case "G" : L_TERRITORY_FACTOR = CPSLIABTERRITORY:FACTOR[7]
              Case "H" : L_TERRITORY_FACTOR = CPSLIABTERRITORY:FACTOR[8]
              Default  : L_TERRITORY_FACTOR = CPSLIABTERRITORY:FACTOR[1]
              End
            End
        Next CPSLIABTERRITORY
        End

End

Procedure MCL030_FACTOR
Begin
L_GROUP_NO = cppfarmliab_ALIAS:GROUP_NO
L_SUB_GROUP  = cppfarmliab_ALIAS:SUB_GROUP
L_CLASS_CODE = cppfarmliab_ALIAS:CLASS_CODE
Access CPSLIABMCL030, Set CPSLIABMCL030:COMPANY_ID = sfpNAME:COMPANY_ID,
                          CPSLIABMCL030:STATE = L_STATE,
                          CPSLIABMCL030:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS,
                          CPSLIABMCL030:GROUP_NO = L_GROUP_NO,
                          CPSLIABMCL030:SUB_GROUP = L_SUB_GROUP,
                          CPSLIABMCL030:CLASS_CODE = L_CLASS_CODE, Generic

If CPSLIABMCL030:CLASS_CODE <> cppfarmliab_ALIAS:CLASS_CODE Then
    L_CLASS_CODE = 99999
Else
    L_CLASS_CODE = cppfarmliab_ALIAS:CLASS_CODE

Access CPSLIABMCL030, Set CPSLIABMCL030:COMPANY_ID = sfpNAME:COMPANY_ID,
                          CPSLIABMCL030:STATE = L_STATE,
                          CPSLIABMCL030:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS,
                          CPSLIABMCL030:GROUP_NO = L_GROUP_NO,
                          CPSLIABMCL030:SUB_GROUP = L_SUB_GROUP,
                          CPSLIABMCL030:CLASS_CODE = L_CLASS_CODE, Generic

While CPSLIABMCL030:COMPANY_ID = sfpNAME:COMPANY_ID And
      CPSLIABMCL030:STATE = L_STATE And
      CPSLIABMCL030:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS And
      CPSLIABMCL030:GROUP_NO = L_GROUP_NO And
      CPSLIABMCL030:SUB_GROUP = L_SUB_GROUP And
      CPSLIABMCL030:CLASS_CODE = L_CLASS_CODE
        Begin
        If sfpNAME:EFF_DATE >= CPSLIABMCL030:EFF_DATE Then
            Begin
            L_MCL030_FACTOR = CPSLIABMCL030:FACTOR
            End
        Next CPSLIABMCL030
        End

End

Procedure INCREASE_LIMITS
Begin
L_PRODUCTS = 0
L_OCCURRENCE = cppfarmlimits:OCCURRENCE
L_AGGREGATE = cppfarmlimits:GENERAL_AGGREGATE
Access CPSLIABINCLIMITS, Set CPSLIABINCLIMITS:COMPANY_ID = sfpNAME:COMPANY_ID,
                             CPSLIABINCLIMITS:STATE = L_STATE,
                             CPSLIABINCLIMITS:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS,
                             CPSLIABINCLIMITS:PRODUCTS = L_PRODUCTS,
                             CPSLIABINCLIMITS:OCCURRENCE = L_OCCURRENCE,
                             CPSLIABINCLIMITS:GENERAL_AGGREGATE = L_AGGREGATE, Generic

While CPSLIABINCLIMITS:COMPANY_ID = sfpNAME:COMPANY_ID And
      CPSLIABINCLIMITS:STATE = L_STATE And
      CPSLIABINCLIMITS:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS And
      CPSLIABINCLIMITS:PRODUCTS = L_PRODUCTS And
      CPSLIABINCLIMITS:OCCURRENCE = L_OCCURRENCE And
      CPSLIABINCLIMITS:GENERAL_AGGREGATE = L_AGGREGATE
        Begin
        If sfpNAME:EFF_DATE >= CPSLIABINCLIMITS:EFF_DATE Then
            Begin
            Switch(cppfarmliab_ALIAS:LIMITS_TABLE)
              Case 1  : L_PREM_IL_FACTOR = CPSLIABINCLIMITS:FACTOR[1]
              Case 2  : L_PREM_IL_FACTOR = CPSLIABINCLIMITS:FACTOR[2]
              Default : L_PREM_IL_FACTOR = CPSLIABINCLIMITS:FACTOR[3]
              End
            End
        Next CPSLIABINCLIMITS
        End

L_PRODUCTS = 1
L_OCCURRENCE = cppfarmlimits:OCCURRENCE
L_AGGREGATE = cppfarmlimits:GENERAL_AGGREGATE
Access CPSLIABINCLIMITS, Set CPSLIABINCLIMITS:COMPANY_ID = sfpNAME:COMPANY_ID,
                             CPSLIABINCLIMITS:STATE = L_STATE,
                             CPSLIABINCLIMITS:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS,
                             CPSLIABINCLIMITS:PRODUCTS = L_PRODUCTS,
                             CPSLIABINCLIMITS:OCCURRENCE = L_OCCURRENCE,
                             CPSLIABINCLIMITS:GENERAL_AGGREGATE = L_AGGREGATE, Generic

While CPSLIABINCLIMITS:COMPANY_ID = sfpNAME:COMPANY_ID And
      CPSLIABINCLIMITS:STATE = L_STATE And
      CPSLIABINCLIMITS:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS And
      CPSLIABINCLIMITS:PRODUCTS = L_PRODUCTS And
      CPSLIABINCLIMITS:OCCURRENCE = L_OCCURRENCE And
      CPSLIABINCLIMITS:GENERAL_AGGREGATE = L_AGGREGATE
        Begin
        If sfpNAME:EFF_DATE >= CPSLIABINCLIMITS:EFF_DATE Then
            Begin
            Switch(cppfarmliab_ALIAS:LIMITS_TABLE)
              Case 1  : L_PROD_IL_FACTOR = CPSLIABINCLIMITS:FACTOR[1]
              Case 2  : L_PROD_IL_FACTOR = CPSLIABINCLIMITS:FACTOR[2]
              Default : L_PROD_IL_FACTOR = CPSLIABINCLIMITS:FACTOR[3]
              End
            End
        Next CPSLIABINCLIMITS
        End

End

procedure medical_payments
begin
access sfpname, set sfpname:policy_no = g_policy_no,
                    sfpname:pol_year = g_year,
                    sfpname:end_sequence = g_end_sequence, generic

access cppfarmlimits, set cppfarmlimits:policy_no = g_policy_no,
                          cppfarmlimits:pol_year = g_year,
                          cppfarmlimits:end_sequence = g_end_sequence, generic

l_limit = cppfarmlimits:medical_payments
access cpsliabmedpay, set cpsliabmedpay:company_id = sfpname:company_id,
                          cpsliabmedpay:state = l_state,
                          cpsliabmedpay:line_of_business = l_line_of_business,
                          cpsliabmedpay:limit = l_limit, generic

while cpsliabmedpay:company_id = sfpname:company_id and
      cpsliabmedpay:state = l_state and
      cpsliabmedpay:line_of_business = l_line_of_business and
      cpsliabmedpay:limit = l_limit
        begin
        if sfpname:eff_date >= cpsliabmedpay:eff_date then
            l_medical_surcharge = cpsliabmedpay:rate

        next cpsliabmedpay
        end

end

Procedure AGGREGATE_SURCHARGE
Begin
Access CPSLIABCOVMOD, Set CPSLIABCOVMOD:COMPANY_ID = sfpNAME:COMPANY_ID ,
                          CPSLIABCOVMOD:STATE = L_STATE,
                          CPSLIABCOVMOD:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS, Generic

While CPSLIABCOVMOD:COMPANY_ID = sfpNAME:COMPANY_ID And
      CPSLIABCOVMOD:STATE = L_STATE And
      CPSLIABCOVMOD:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS
        Begin
        If sfpNAME:EFF_DATE >= CPSLIABCOVMOD:EFF_DATE Then
            Begin
            If cppfarmlimits:EMPLOYMENT_RELATED_ACTS = 1 Then
                L_EMPLOY_ACT_FACTOR = CPSLIABCOVMOD:EMPLOYMENT_RELATED_ACTS
            Else
                L_EMPLOY_ACT_FACTOR = 1.00
            If cppfarmlimits:CONTRACT_COVERAGE[1] = 1 Then
                L_CONTRACT_FACTOR_1 = CPSLIABCOVMOD:CONTRACT_COVERAGE[1]
            Else
                L_CONTRACT_FACTOR_1 = 1.00
            If cppfarmlimits:CONTRACT_COVERAGE[2] = 1 Then
                L_CONTRACT_FACTOR_2 = CPSLIABCOVMOD:CONTRACT_COVERAGE[2]
            Else
                L_CONTRACT_FACTOR_2 = 1.00
            If cppfarmlimits:CONTRACT_COVERAGE[3] = 1 Then
                L_CONTRACT_FACTOR_3 = CPSLIABCOVMOD:CONTRACT_COVERAGE[3]
            Else
                L_CONTRACT_FACTOR_3 = 1.00
            If cppfarmlimits:DELETE_EMPLOYEES_INSURED = 1 Then
                L_EMPLOYEE_INSURED_FACTOR = CPSLIABCOVMOD:EMPLOYEES_AS_INSURED
            Else
                L_EMPLOYEE_INSURED_FACTOR = 1.00
            If cppfarmlimits:FIRE_LEGAL = 0 and
               cppfarmlimits:form not one of 2 Then
                L_FIRE_LEGAL_FACTOR = CPSLIABCOVMOD:FIRE_LEGAL
            Else
                L_FIRE_LEGAL_FACTOR = 1.00
            If cppfarmlimits:MEDICAL_PAYMENTS = 0 and
               cppfarmlimits:form not one of 2 Then
                L_MED_PAY_FACTOR = CPSLIABCOVMOD:MEDICAL_PAYMENTS
            Else
                L_MED_PAY_FACTOR = 1.00
            If cppfarmlimits:NEWLY_ACQUIRED_ENTITIES = 1 Then
                L_ACQUIRED_ENTITY_FACTOR = CPSLIABCOVMOD:NEW_ACQUIRED_ENTITIES
            Else
                L_ACQUIRED_ENTITY_FACTOR = 1.00
            If cppfarmlimits:ADVERTISING_PERSONAL_INJURY = 0 And
               cppfarmliab_ALIAS:FORM not one of 2, 3 Then
                L_PERSONAL_INJURY_FACTOR = CPSLIABCOVMOD:PERSONAL_INJURY
            Else
                L_PERSONAL_INJURY_FACTOR = 1.00
            If cppfarmlimits:GENERAL_AGGREGATE = 0 Then
                L_DELETE_AGGREGATE_FACTOR = CPSLIABCOVMOD:DELETE_GENERAL_AGGREGATE
            Else
                L_DELETE_AGGREGATE_FACTOR = 1.00
            L_FIRE_LEGAL_RATE_1 = CPSLIABCOVMOD:FIRE_LEGAL_RATE[1]
            L_FIRE_LEGAL_RATE_2 = CPSLIABCOVMOD:FIRE_LEGAL_RATE[2]
            L_FIRE_LEGAL_PER_1 = CPSLIABCOVMOD:FIRE_LEGAL_PER[1]
            L_FIRE_LEGAL_PER_2 = CPSLIABCOVMOD:FIRE_LEGAL_PER[2]
            L_FIRE_LEGAL_FLAT = CPSLIABCOVMOD:FIRE_LEGAL_FLAT
            l_fire_legal_code = cpsliabcovmod:fire_legal_code
            if l_fire_legal_limit = cpsliabcovmod:fire_legal_limit[1] then
                l_fire_legal_charge = cpsliabcovmod:fire_legal_charge[1]
            if l_fire_legal_limit = cpsliabcovmod:fire_legal_limit[2] then
                l_fire_legal_charge = cpsliabcovmod:fire_legal_charge[2]
            if l_fire_legal_limit = cpsliabcovmod:fire_legal_limit[3] then
                l_fire_legal_charge = cpsliabcovmod:fire_legal_charge[3]
            if l_fire_legal_limit = cpsliabcovmod:fire_legal_limit[4] then
                l_fire_legal_charge = cpsliabcovmod:fire_legal_charge[4]
            if l_fire_legal_limit = cpsliabcovmod:fire_legal_limit[5] then
                l_fire_legal_charge = cpsliabcovmod:fire_legal_charge[5]
            End

        Next CPSLIABCOVMOD
        End

End

procedure update_fire_legal
begin
access sfpend, set sfpend_alias:policy_no = g_policy_no,
                   sfpend_alias:pol_year = g_year,
                   sfpend_alias:end_sequence = g_end_sequence,
                   sfpend_alias:prem_no = cppfarmliab_alias:prem_no,
                   sfpend_alias:build_no = cppfarmliab_alias:build_no, generic

l_Fire_code = "N"
while sfpend_alias:policy_no = g_policy_no and
      sfpend_alias:pol_year = g_year and
      sfpend_alias:end_sequence = g_end_sequence and
      sfpend_alias:prem_no = cppfarmliab_alias:prem_no and
      sfpend_alias:build_no = cppfarmliab_alias:build_no
        begin
        if sfpend_alias:code = l_Fire_legal_code then
            l_fire_code = "Y"

        next sfpend
        end

change cppfarmliab_alias
    begin
    if l_fire_code = "N" then
        begin
        l_rate = cppfarmlimits:fire_legal_property_rate * l_Fire_legal_rate_1
        cppfarmliab_alias:fire_legal_premium = (((cppfarmlimits:fire_legal -
                                                cpsliabdefault:fire_legal) divide
                                                l_fire_legal_per_1) *
                                                l_rate)
        end
    if l_Fire_code = "Y" then
        begin
        l_rate = cppfarmlimits:fire_legal_property_rate * l_Fire_legal_rate_2
        cppfarmliab_alias:fire_legal_premium = ((((cppfarmlimits:fire_legal -
                                                cpsliabdefault:fire_legal) divide
                                                l_fire_legal_per_2) *
                                                l_rate) + l_fire_legal_flat)
        end
    end

end

End
