%%
Screen
        Name            = "cppmtmso200a" ;
        Type            = "Detail" ;
        Padcharacter    = Space ;
        Highlite        = Underscore ;
        Screensize      = "dynamic" ;
        Windowtitle= "%a     %s Optional Coverages - MCP015    Ver 7.00 %m" ;
        Domain          = "cppPROPERTY" ;

        Global Unsigned Ascii Number G_policy_NO[9] ;
        global unsigned ascii number g_year[4];
        global unsigned ascii number g_end_sequence[4] ;
        Global Unsigned Ascii Number G_PREM_NO[4] ;
        Global Unsigned Ascii Number G_BUILD_NO[4] ;

        Local Unsigned Ascii Number L_SUB_CODE[4],
                                    L_STATE[2] ,
                                    L_LIMIT[8]=0,
                                    l_max_glass_limit[8]=0,
                                    l_glass_pane[4]=0,
                                    l_glass_max_per_pane[4]=0,
                                    l_deductible[5],
                                    l_signs_limit[8]=0,
                                    l_line_of_business[4],
                                    L_WATER_BKUP_LIMIT[8] ;

        Local String L_CODE[7],
                     L_CODE_1[7],
                     L_CODE_2[7],
                     L_CODE_3[7],
                     L_CODE_4[7],
                     L_CODE_5[7],
                     L_code_6[7],
                     l_code_7[7],
                     l_code_8[7],
                     L_ADD_ENDORSEMENT[1] ,
                     L_FORM_EDITION[18],
                     L_DESCRIPTION[55] ;

        Access cppPROPERTY,
           Set cppPROPERTY:policy_NO = G_policy_NO ,
               cppproperty:pol_year = g_year,
               cppproperty:end_sequence = g_end_sequence,
               cppPROPERTY:PREM_NO = G_PREM_NO ,
               cppPROPERTY:BUILD_NO = G_BUILD_NO ;

        Include "STDKEYS7.INC"

style definition

        include "styles.inc"

Functions

        Include "STDFUNC7.INC"

menu definition

        include "stdmenu7.inc"

}

toolbar definition

        include "stdtoolbar7.inc"

}

screen entry
access sfpname, set sfpname:policy_no = g_policy_no,
                    sfpname:pol_year = g_year,
                    sfpname:end_sequence = g_end_sequence, generic

access sfscompany, set sfscompany:company_id = sfpname:company_id, generic

Access Validation
If cppPROPERTY:policy_NO <> G_policy_NO Or
   cppproperty:pol_Year <> g_year or
   cppproperty:end_sequence <> g_end_sequence or
   cppPROPERTY:PREM_NO <> G_PREM_NO Or
   cppPROPERTY:BUILD_NO <> G_BUILD_NO Then
    Error 1000 ;

screen at 1,1 to 20,80
Properties
        {
        Layouttype = column
        }
{
Panel
Properties
        {
        Borderstyle     = raised
        Scrollbarpolicy = asneeded
        }
{
%%
                                                        _______________
*------------------------------------------------------------------------------*
| Policy No:   _________  ____  ____                                           |
| Location No: ____                                                            |
| Building No: ____                                                            |
*------------------------------------------------------------------------------*
| Inflation              __           Outdoor property Limit:   ________       |
| Glass:                 ________     Outdoor property Per:     ______         |
| Glass Per Pane:        ____         Personal Effects:         ________       |
| Signs Not Attached:    ________     Property of Others:       ________       |
| -Entirely Metal:      _             Valuable Papers:          ________       |
| Signs Attached:        ________     Limit Water Backup:       _              |
| -Delete Ded (MCP108): _   _____     Water Backup:             ________       |
| Building Code/Law:     ___          Boilers:                  _              |
| -ACV Basis MCP506:     _                                                     |
| Debris Removal:        ________                                              |
| Off Premises Property                                                        |
| -At Other Locations:   ________                                              |
| -In Transit:           ________                                              |
| -Override Premium:     ________                                              |
| Weather Related Coverage [R  _~Deductible      _~No~Deductible R]            |
*------------------------------------------------------------------------------*
%%

components

Fields
101     FUNCTION/noecho/showasguidetext ;
301     Begin
        If FUNCTION One Of "ADD", "CHANGE" Then
            Begin
            cppPROPERTY:policy_NO = G_policy_NO
            cppproperty:pol_year = g_Year
            cppproperty:end_sequence = g_End_sequence
            cppPROPERTY:PREM_NO = G_PREM_NO
            cppPROPERTY:BUILD_NO = G_BUILD_NO
            End
        access sfsline, set sfsline:company_id = sfpname:company_id,
                            sfsline:line_of_business = sfpname:line_of_business,
                            sfsline:lob_subline = "00", generic

        l_line_of_business = sfsline:rating_line_of_business

        End
        cppPROPERTY:policy_NO/displayonly                   Mandatory;
302     cppproperty:pol_year/displayonly ;
303     cppproperty:end_sequence/displayonly ;
401     cppPROPERTY:PREM_NO/displayonly                      Mandatory;
501     cppPROPERTY:BUILD_NO/displayonly                     Mandatory;

701     cppPROPERTY:INFLATION_GUARD[1];
801     begin
            do max_glass_limit
        end
        cppPROPERTY:GLASS_LIMIT
        if cppproperty:glass_limit <> l_max_glass_limit and
           cppproperty:glass_limit <> l_limit then
            error "You entered a limit over the maximum allowed"
        if cppproperty:glass_limit = l_max_glass_limit then
            cppproperty:glass_per_pane = l_glass_max_per_pane
        if cppproperty:glass_limit = l_limit then
            cppproperty:glass_per_pane = l_glass_pane ;
901     cppPROPERTY:GLASS_PER_PANE/default;
1001    cppPROPERTY:SIGNS_NOT_ATTACHED ;
1101    cppproperty:signs_metal/checkbox/values="0,1"
        do signs_not_attached_limit
        hide if cppproperty:signs_not_attached = l_signs_limit ;
1201    cppPROPERTY:SIGNS_ATTACHED;
1301    cppPROPERTY:DELETE_SIGNS_DEDUCTIBLE/checkbox/values="0,1" ;
1302    begin
        access cppgeneral, set cppgeneral:policy_no = cppproperty:policy_no,
                               cppgeneral:pol_year = cppproperty:pol_year,
                               cppgeneral:end_sequence = cppproperty:end_sequence,
                               cppgeneral:prem_no = cppproperty:prem_no,
                               cppgeneral:build_no = cppproperty:build_no, generic

        l_state = cppgeneral:state
        access sfsdeductible_alias, set sfsdeductible_alias:company_id = sfpname:company_id,
                                        sfsdeductible_alias:state = l_state,
                                        sfsdeductible_alias:line_of_business = l_line_of_business, generic

        end
        cppproperty:signs_deductible/mask="ZZZZZ"/default
        l_deductible = cppproperty:signs_deductible
        access sfsdeductible, set sfsdeductible:company_id = sfpname:company_id,
                                  sfsdeductible:state = l_state,
                                  sfsdeductible:line_of_business = l_line_of_business,
                                  sfsdeductible:deductible = l_deductible, generic

        if cppproperty:signs_deductible <> sfsdeductible:deductible then
            error "Invalid Deductible"

        activehelp sfsdeductible_alias:deductible  ;

1401    cppPROPERTY:BUILDING_CODE_PERCENT;
1501    cppproperty:building_code_acv/checkbox/values="0,1" ;
1601    cppPROPERTY:DEBRIS_REMOVAL;
1801    cppPROPERTY:OFF_PREM_OTHER_LOCATION;
1901    cppPROPERTY:OFF_PREM_IN_TRANSIT;
2001    cppproperty:off_prem_in_transit_manual ;
2101    cppproperty:weather_related/values="1,2"
        hide if sfscompany:boiler_rating <> 4
        hide if cppgeneral:condo = 0 or
                cppgeneral:unit_owner = 0 ;


702     cppPROPERTY:OUTDOOR_PROPERTY ;
802     cppPROPERTY:OUTDOOR_PROPERTY_PER;
902     cppPROPERTY:PERSONAL_EFFECTS;
1002    cppproperty:personal_property_of_others ;
1102    cppPROPERTY:VALUABLE_PAPERS;
1202    cppPROPERTY:WATER_BACKUP_LIMITED/checkbox/values="0,1" ;
1303    Begin
        If FUNCTION = "ADD" Or
           FUNCTION = "CHANGE" And
           cppPROPERTY:WATER_BACKUP_LIMITED = 1 Then
            Begin
            Do GET_WATER_BACKUP_BASIC_LIMIT
            cppPROPERTY:WATER_BACKUP = L_WATER_BKUP_LIMIT
            End
        End
        cppPROPERTY:WATER_BACKUP/default
        Hide If cppPROPERTY:WATER_BACKUP_LIMITED = 0 ;
1402    cppPROPERTY:BOILER/checkbox/values="0,1";

}

}

Update
If UPDATEOK = "YES" And
   Abort = "NO" Then
    Begin
    L_STATE = cppGENERAL:STATE
    Access cpsproprate, Set cpsproprate:COMPANY_ID = sfpNAME:COMPANY_ID,
                            cpsproprate:STATE = L_STATE,
                            cpsproprate:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS, Generic

    l_code_1 = ""
    l_code_2 = ""
    l_code_3 = ""
    l_code_4 = ""
    l_code_5 = ""
    l_code_6 = ""
    l_code_7 = ""
    l_code_8 = ""
    While cpsproprate:COMPANY_ID = sfpNAME:COMPANY_ID And
          cpsproprate:STATE = L_STATE And
          cpsproprate:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS
            Begin
            If sfpNAME:EFF_DATE >= cpsproprate:EFF_DATE Then
                Begin
                L_CODE_1 = cpsproprate:signs_delete_ded_code          -- signs delete deductible
                L_CODE_2 = cpsproprate:building_law_acv_code          -- ACV building code
                L_CODE_3 = cpsproprate:water_backup_code              -- water backup limted
                L_CODE_4 = cpsproprate:water_backup_policy_limit_code -- water backup up to policy limits
                L_CODE_5 = cpsproprate:boiler_code                    -- boilers
                l_code_6 = cpsproprate:building_law_excl_code         -- delete building code
                l_code_7 = cpsproprate:weather_related_code[1]
                l_code_8 = cpsproprate:weather_related_code[2]
                End
            Next cpsproprate
            End

    If L_CODE_1 <> "" Then
        Begin
        L_CODE = L_CODE_1
        Do ACCESS_sfpEND
        If L_ADD_ENDORSEMENT = "Y" And
           cppPROPERTY:DELETE_SIGNS_DEDUCTIBLE = 1 Then
            Do ADD_sfpEND
        If L_ADD_ENDORSEMENT = "N" And
           cppPROPERTY:DELETE_SIGNS_DEDUCTIBLE = 0 Then
            Do DELETE_sfpEND
        End

    If L_CODE_2 <> "" Then
        Begin
        L_CODE = L_CODE_2
        Do ACCESS_sfpEND
        If L_ADD_ENDORSEMENT = "Y" And
           cppPROPERTY:BUILDING_CODE_ACV = 1 Then
            Do ADD_sfpEND
        If L_ADD_ENDORSEMENT = "N" And
           cppPROPERTY:BUILDING_CODE_ACV = 0 Then
            Do DELETE_sfpEND
        End

    If L_CODE_3 <> "" Then
        Begin
        L_CODE = L_CODE_3
        Do ACCESS_sfpEND
        If L_ADD_ENDORSEMENT = "Y" And
           cppPROPERTY:WATER_BACKUP_LIMITED = 1 And
           cppPROPERTY:WATER_BACKUP = L_WATER_BKUP_LIMIT Then
            Do ADD_sfpEND
        If (L_ADD_ENDORSEMENT = "N" And
           (cppPROPERTY:WATER_BACKUP_LIMITED = 0 Or
           cppPROPERTY:WATER_BACKUP <> L_WATER_BKUP_LIMIT)) Then
            Do DELETE_sfpEND
        End

    If L_CODE_4 <> "" Then
        Begin
        L_CODE = L_CODE_4
        Do ACCESS_sfpEND
        If L_ADD_ENDORSEMENT = "Y" And
           cppPROPERTY:WATER_BACKUP <> L_WATER_BKUP_LIMIT And
           cppPROPERTY:WATER_BACKUP <> 0 Then
            Do ADD_sfpEND
        If (L_ADD_ENDORSEMENT = "N" And
           (cppPROPERTY:WATER_BACKUP = L_WATER_BKUP_LIMIT Or
           cppPROPERTY:WATER_BACKUP = 0)) Then
            Do DELETE_sfpEND
        End

    If L_CODE_5 <> "" and
       sfscompany:boiler_rating <> 4 Then
        Begin
        L_CODE = L_CODE_5
        Do ACCESS_sfpEND
        If L_ADD_ENDORSEMENT = "Y" And
           cppPROPERTY:BOILER = 1 Then
            Do ADD_sfpEND
        If L_ADD_ENDORSEMENT = "N" And
           cppPROPERTY:BOILER = 0  Then
            Do DELETE_sfpEND
        End

    If L_CODE_6 <> "" Then
        Begin
        L_CODE = L_CODE_6
        Do ACCESS_sfpEND
        If L_ADD_ENDORSEMENT = "Y" And
           cppPROPERTY:building_code_percent = 0 Then
            Do ADD_sfpEND
        If L_ADD_ENDORSEMENT = "N" And
           cppPROPERTY:building_code_percent <> 0 Then
            Do DELETE_sfpEND
        End

    If L_CODE_7 <> "" Then
        Begin
        L_CODE = L_CODE_7
        Do ACCESS_sfpEND
        If L_ADD_ENDORSEMENT = "Y" And
           cppproperty:weather_related = 1 Then
            Do ADD_sfpEND
        else
        If L_ADD_ENDORSEMENT = "N" And
           cppproperty:weather_related <> 1 Then
            Do DELETE_sfpEND
        End

    If L_CODE_8 <> "" Then
        Begin
        L_CODE = L_CODE_8
        Do ACCESS_sfpEND
        If L_ADD_ENDORSEMENT = "Y" And
           cppproperty:weather_related = 2 Then
            Do ADD_sfpEND
        else
        If L_ADD_ENDORSEMENT = "N" And
           cppproperty:weather_related <> 2 Then
            Do DELETE_sfpEND
        End

if sfscompany:boiler_rating = 4 then
    begin
    g_prem_no = cppgeneral:prem_no
    g_build_no = cppgeneral:build_no
    Access CPSPROPRATE, Set CPSPROPRATE:COMPANY_ID = sfpNAME:COMPANY_ID,
                            CPSPROPRATE:STATE = L_STATE,
                            CPSPROPRATE:LINE_OF_BUSINESS = l_LINE_OF_BUSINESS, Generic

    l_code_1 = ""
    l_code_2 = ""
    l_code_3 = ""
    While CPSPROPRATE:COMPANY_ID = sfpNAME:COMPANY_ID And
          CPSPROPRATE:STATE = L_STATE And
          CPSPROPRATE:LINE_OF_BUSINESS = l_LINE_OF_BUSINESS
            Begin
            If (sfpNAME:EFF_DATE >= CPSPROPRATE:EFF_DATE and
               (sfpname:eff_date <= cpsproprate:exp_date or
               cpsproprate:exp_date = 0)) Then
                Begin
                L_CODE_1 = CPSPROPRATE:boiler_code
                L_CODE_2 = CPSPROPRATE:boiler_code_1
                L_CODE_3 = CPSPROPRATE:condo_code
                End

            Next CPSPROPRATE
            End

    If L_CODE_1 <> "" then
        Begin
        L_CODE = L_CODE_1
        Do ACCESS_sfpEND
        If L_ADD_ENDORSEMENT = "Y" And
           cppPROPERTY:BOILER = 1 Then
            begin
            if cppgeneral:condo = 0 and
               cppgeneral:unit_owner = 0 and
               cppgeneral:res_condo = 0 then
                Do ADD_sfpEND
            end

        If L_ADD_ENDORSEMENT = "N" And
           cppPROPERTY:BOILER = 0 Then
            Do DELETE_sfpEND

        if cppgeneral:condo = 1 or
           cppgeneral:unit_owner = 1 or
           cppgeneral:res_condo = 1 Then
            Do DELETE_sfpEND
        End

    If L_CODE_2 <> "" Then
        Begin
        L_CODE = L_CODE_2
        Do ACCESS_sfpEND_1
        If L_ADD_ENDORSEMENT = "Y" And
           cppPROPERTY:BOILER = 1 Then
            Do ADD_sfpEND_1
        If L_ADD_ENDORSEMENT = "N" And
           cppPROPERTY:BOILER = 0 Then
            Do DELETE_sfpEND_1
        End

    If L_CODE_3 <> "" then
        Begin
        L_CODE = L_CODE_3
        Do ACCESS_sfpEND
        If L_ADD_ENDORSEMENT = "Y" And
           cppPROPERTY:BOILER = 1 Then
            begin
            if cppgeneral:condo = 1 or
               cppgeneral:unit_owner = 1 or
               cppgeneral:res_condo = 1 Then
                Do ADD_sfpEND
            end

        If L_ADD_ENDORSEMENT = "N" And
           cppPROPERTY:BOILER = 0 Then
           Do DELETE_sfpEND

        if cppgeneral:condo = 0 and
           cppgeneral:unit_owner = 0 and
           cppgeneral:res_condo = 0 then
            Do DELETE_sfpEND
        End

    end

    End

Procedure Definition

Procedure GET_WATER_BACKUP_BASIC_LIMIT
Begin
L_STATE = cppGENERAL:STATE
Access CPSPROPRATE, Set CPSPROPRATE:COMPANY_ID = sfpNAME:COMPANY_ID,
                        CPSPROPRATE:STATE = L_STATE,
                        CPSPROPRATE:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS, Generic

L_WATER_BKUP_LIMIT = 0
While CPSPROPRATE:COMPANY_ID = sfpNAME:COMPANY_ID And
      CPSPROPRATE:STATE = L_STATE And
      CPSPROPRATE:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS
        Begin
        If sfpNAME:EFF_DATE >= CPSPROPRATE:EFF_DATE Then
            L_WATER_BKUP_LIMIT = CPSPROPRATE:WATER_BACKUP_BASIC_LIMIT

        Next CPSPROPRATE
        End

End

Procedure ACCESS_sfpEND
Begin
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = G_PREM_NO,
                   sfpEND:BUILD_NO = G_BUILD_NO, Generic

L_ADD_ENDORSEMENT = "Y"
Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> G_PREM_NO Or
            sfpEND:BUILD_NO <> G_BUILD_NO

    If sfpEND:CODE = L_CODE Then
        L_ADD_ENDORSEMENT = "N"

    Next sfpEND
    End

End

Procedure ACCESS_sfpEND_1
Begin
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = 0,
                   sfpEND:BUILD_NO = 0, Generic

L_ADD_ENDORSEMENT = "Y"
Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> 0 Or
            sfpEND:BUILD_NO <> 0

    If sfpEND:CODE = L_CODE Then
        L_ADD_ENDORSEMENT = "N"

    Next sfpEND
    End

End

Procedure ADD_sfpEND
Begin
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = G_PREM_NO,
                   sfpEND:BUILD_NO = G_BUILD_NO, Generic

L_SUB_CODE = 0
Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> G_PREM_NO Or
            sfpEND:BUILD_NO <> G_BUILD_NO

    L_SUB_CODE = sfpEND:SUB_CODE

    Next sfpEND
    End

L_SUB_CODE = L_SUB_CODE + 10

Access cppGENERAL_ALIAS, Set cppGENERAL_ALIAS:policy_NO = G_policy_NO,
                             cppgeneral_alias:pol_year = g_year,
                             cppgeneral_alias:end_sequence = g_end_sequence,
                             cppGENERAL_ALIAS:PREM_NO = G_PREM_NO,
                             cppGENERAL_ALIAS:BUILD_NO = G_BUILD_NO, Generic

L_STATE = cppGENERAL_ALIAS:STATE
Access SFSOPTEND, Set SFSOPTEND:COMPANY_ID = sfpNAME:COMPANY_ID,
                      SFSOPTEND:STATE = L_STATE,
                      SFSOPTEND:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS,
                      SFSOPTEND:CODE = L_CODE, Generic

Repeat Begin
    Exit If SFSOPTEND:COMPANY_ID <> sfpNAME:COMPANY_ID Or
            SFSOPTEND:STATE <> L_STATE Or
            SFSOPTEND:LINE_OF_BUSINESS <> L_LINE_OF_BUSINESS Or
            SFSOPTEND:CODE <> L_CODE

    If sfpNAME:EFF_DATE >= SFSOPTEND:EFF_DATE Then
        Begin
        L_FORM_EDITION = SFSOPTEND:FORM_EDITION
        L_DESCRIPTION = SFSOPTEND:DESCRIPTION
        End

    Next SFSOPTEND
    End

Add sfpEND
    Begin
    sfpEND:policy_NO            =       G_policy_NO
    sfpend:pol_year             =       g_year
    sfpend:end_sequence         =       g_end_sequence
    sfpEND:PREM_NO              =       G_PREM_NO
    sfpEND:BUILD_NO             =       G_BUILD_NO
    sfpEND:SUB_CODE             =       L_SUB_CODE
    sfpEND:CODE                 =       L_CODE
    sfpEND:FORM_EDITION         =       L_FORM_EDITION
    sfpEND:DESCRIPTION          =       L_DESCRIPTION
    sfpEND:PREMIUM              =       0
    sfpEND:LOB_END_CODE         =       "P"
    End

End

Procedure ADD_sfpEND_1
Begin
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = 0,
                   sfpEND:BUILD_NO = 0, Generic

L_SUB_CODE = 0
Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> 0 Or
            sfpEND:BUILD_NO <> 0

    L_SUB_CODE = sfpEND:SUB_CODE

    Next sfpEND
    End

L_SUB_CODE = L_SUB_CODE + 10

Access cppGENERAL_ALIAS, Set cppGENERAL_ALIAS:policy_NO = G_policy_NO,
                             cppgeneral_alias:pol_year = g_year,
                             cppgeneral_alias:end_sequence = g_end_sequence,
                             cppGENERAL_ALIAS:PREM_NO = G_PREM_NO,
                             cppGENERAL_ALIAS:BUILD_NO = G_BUILD_NO, Generic

L_STATE = cppGENERAL_ALIAS:STATE
Access SFSOPTEND, Set SFSOPTEND:COMPANY_ID = sfpNAME:COMPANY_ID,
                      SFSOPTEND:STATE = L_STATE,
                      SFSOPTEND:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS,
                      SFSOPTEND:CODE = L_CODE, Generic

Repeat Begin
    Exit If SFSOPTEND:COMPANY_ID <> sfpNAME:COMPANY_ID Or
            SFSOPTEND:STATE <> L_STATE Or
            SFSOPTEND:LINE_OF_BUSINESS <> L_LINE_OF_BUSINESS Or
            SFSOPTEND:CODE <> L_CODE

    If sfpNAME:EFF_DATE >= SFSOPTEND:EFF_DATE Then
        Begin
        L_FORM_EDITION = SFSOPTEND:FORM_EDITION
        L_DESCRIPTION = SFSOPTEND:DESCRIPTION
        End

    Next SFSOPTEND
    End

Add sfpEND
    Begin
    sfpEND:policy_NO            =       G_policy_NO
    sfpend:pol_year             =       g_year
    sfpend:end_sequence         =       g_end_sequence
    sfpEND:PREM_NO              =       0
    sfpEND:BUILD_NO             =       0
    sfpEND:SUB_CODE             =       L_SUB_CODE
    sfpEND:CODE                 =       L_CODE
    sfpEND:FORM_EDITION         =       L_FORM_EDITION
    sfpEND:DESCRIPTION          =       L_DESCRIPTION
    sfpEND:PREMIUM              =       0
    sfpEND:LOB_END_CODE         =       "P"
    End

End

Procedure DELETE_sfpEND
Begin
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = G_PREM_NO,
                   sfpEND:BUILD_NO = G_BUILD_NO, Generic

Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> G_PREM_NO Or
            sfpEND:BUILD_NO <> G_BUILD_NO

    If sfpEND:CODE = L_CODE Then
        Delete sfpEND

    Next sfpEND
    End

End

Procedure DELETE_sfpEND_1
Begin
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = 0,
                   sfpEND:BUILD_NO = 0, Generic

Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> 0 Or
            sfpEND:BUILD_NO <> 0

    If sfpEND:CODE = L_CODE Then
        Delete sfpEND

    Next sfpEND
    End

End

Procedure signs_not_attached_limit
Begin
L_STATE = cppGENERAL_ALIAS:STATE
Access CPSPROPRATE, Set CPSPROPRATE:COMPANY_ID = sfpNAME:COMPANY_ID,
                        CPSPROPRATE:STATE = L_STATE,
                        CPSPROPRATE:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS, Generic

While CPSPROPRATE:COMPANY_ID = sfpNAME:COMPANY_ID And
      CPSPROPRATE:STATE = L_STATE And
      CPSPROPRATE:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS
        Begin
        If sfpNAME:EFF_DATE >= CPSPROPRATE:EFF_DATE Then
            Begin
            L_signs_LIMIT = CPSPROPRATE:signs_not_attached_limit
            End

        Next CPSPROPRATE
        End

end

Procedure max_glass_limit
Begin
L_STATE = cppGENERAL_ALIAS:STATE
Access CPSPROPRATE, Set CPSPROPRATE:COMPANY_ID = sfpNAME:COMPANY_ID,
                        CPSPROPRATE:STATE = L_STATE,
                        CPSPROPRATE:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS, Generic

While CPSPROPRATE:COMPANY_ID = sfpNAME:COMPANY_ID And
      CPSPROPRATE:STATE = L_STATE And
      CPSPROPRATE:LINE_OF_BUSINESS = L_LINE_OF_BUSINESS
        Begin
        If sfpNAME:EFF_DATE >= CPSPROPRATE:EFF_DATE Then
            Begin
            l_limit = cpsproprate:glass_limit
            l_glass_pane = cpsproprate:glass_pane
            L_MAX_GLASS_LIMIT = CPSPROPRATE:GLASS_MAX
            l_glass_max_per_pane = cpsproprate:glass_max_pane
            End

        Next CPSPROPRATE
        End

end

End
