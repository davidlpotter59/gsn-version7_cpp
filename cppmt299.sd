%%
Screen
        Name = "cppMT299" ;
        Type = "multiline" ;
        repeat LINE_ITEMS, 10 times, 2 times with 13 spaces across ;
        Padcharacter = Space ;
        Highlight = Underscore ;
        Screensize = "dynamic" ;
        Domain = "cppGENERAL";
        Windowtitle = "%a     %s Property Information - Ver. 7.00    %m" ;
--      resizeable = yes ;
        iconline = 0 ;

        Global String G_LIB[10];

        Global Unsigned Ascii Number G_POLICY_NO[9],
                                     G_YEAR[4],
                                     G_END_SEQUENCE[4],
                                     G_QUOTE_NO[8] ,
                                     G_PREM_NO[4] ,
                                     G_BUILD_NO[4] ,
                                     G_NEW_QUOTE_NO[8],
                                     G_LINE_OF_BUSINESS[4],
                                     G_CHECK_REFERENCE[7],
                                     G_AGENT_NO[4],
                                     G_OPT[2];

        Global String G_COMPANY[10] ,
                      G_COMPANY_ID[10] ,
                      G_FUNCTION[10] ,
                      G_FIRST[1],
                      G_FIRST_1[1] ;

        global MMDDYYYY date g_starting_date ,
                             g_ending_date,
                             g_eff_date ,
                             g_exp_date ;

        global string g_lib_1[10] ,
                      g_name[50] ,
                      g_inquiry[1] ,
                      g_fob[1],
                      g_fob_description[75] ,
                      g_que[10] ;

        global unsigned ascii number g_state[2] ,
                                     g_rate_type[2] ;

        global signed ascii number g_company_deviation[5]/dec=3 ;

        global signed ascii number g_total[8],
                                   g_boiler[8],
                                   g_terrorism[8],
                                   g_final_total[8],
                                   g_surcharge[8] ;

        Local String l_desc[50] ,
                     l_coverage[1] ,
                     L_ADD_ENDORSEMENT[1],
                     L_FORM_EDITION[25],
                     L_DESCRIPTION[50] ,
                     l_peril_1[8],
                     l_peril_2[8],
                     l_peril_3[8],
                     l_peril_4[8],
                     l_display_field[1],
                     l_code[7] ,
                     l_code_4[7],
                     l_code_5[7],
                     l_code_6[7],
                     l_code_7[7],
                     l_boiler[1]="N",
                     l_bceg_type[1],
                     l_boiler_added[1]="N",
                     l_company_id[10] ,
                     l_misc[1]="N",
                     l_minimum_applies[1]="N" ;

        local signed ascii number l_boiler_premium[8],
                                  l_surcharge[8],
                                  l_final_total[8] ,
                                  l_misc_premium[8],
                                  l_update_sfpend_premium[6],
                                  l_update_sfpend_premium_1[6],
                                  l_update_sfpend_premium_2[6],
                                  l_update_sfpend_premium_3[6],
                                  l_update_sfpend_premium_4[6],
                                  l_end_premium[8] ,
                                  l_boiler_factor[4]=0/dec=3,
                                  l_factor_1[5]=0/dec=3,
                                  l_factor_2[5]=0/dec=3,
                                  l_factor_3[5]=0/dec=3,
                                  l_factor_4[5]=0/dec=3,
                                  l_factor_5[5]=0/dec=3,
                                  l_factor_6[5]=0/dec=3,
                                  l_boiler_limit[5]=0,
                                  l_boiler_minimum[3]=0,
                                  l_total[8],
                                  l_total_1[8],
                                  l_mp_total[8],
                                  l_days ,
                                  l_irpm[8]=0/dec=4,
                                  l_location_credit[4]=0/dec=2,
                                  l_installment[4]=0 ,
                                  l_boiler_prem_total[8]=0 ;

        Local Unsigned Ascii Number l_prem_no[4],
                                    l_build_no[4],
                                    l_prem_no_1[4],
                                    l_build_no_1[4],
                                    l_class[1]=0,
                                    l_coverages[1]=0,
                                    l_rate[6]=0/dec=4,
                                    l_selling_price[5]=0/dec=3,
                                    l_class_code[5]=0,
                                    l_property_form[1],
                                    l_building_form[1],
                                    l_short_rate[4]=0/dec=2,
                                    l_vmm_exclusion_factor[5]=0/dec=4,
                                    l_wind_exclusion_factor[5]=0/dec=4,
                                    l_peak_factor[5]=0/dec=3,
                                    l_cp0438_premium_1[6]=0/dec=4,
                                    l_cp0438_premium_2[6]=0/dec=4,
                                    l_cp0417_premium_1[6]=0/dec=4,
                                    l_cp0417_premium_2[6]=0/dec=4,
                                    l_peak_group_1[8]=0,
                                    l_peak_group_2[8]=0,
                                    l_peak_group_3[8]=0,
                                    l_peak_group_4[8]=0,
                                    l_bceg_factor[5]=0/dec=3,
                                    l_minimum[4]=0,
                                    l_minimum_boiler[4]=0,
                                    l_terror_line_of_business[4]=0011,
                                    l_pro_rata_premium[8]=0/dec=3,
                                    l_form[1] ,
                                    l_agreed_factor[5]=0/dec=3,
                                    l_end_factor[5]=0/dec=3,
                                    l_end_limit[5]=0,
                                    l_end_premium1[6]=0,
                                    l_surcharge_factor[8]=0/dec=6,
                                    l_surcharge_minimum[2]=0,
                                    l_days_rate[5]=0/dec=3,
                                    l_business_total[8]=0,
                                    l_state[2],
                                    l_line_of_business[4] ,
                                    l_group_i[8]=0/dec=5,
                                    l_group_ii[8]=0/dec=5,
                                    l_group_i_building[8]=0/dec=5,
                                    l_special[8]=0/dec=5,
                                    l_broad[8]=0/dec=5,
                                    l_special_office[3]=0,
                                    l_special_relativities[4]=0,
                                    l_special_theft[8]=0/dec=5,
                                    l_theft_rate[10]=0/dec=5,
                                    l_territory_factor[6]=0/dec=4,
                                    l_protection_factor[5]=0/dec=3,
                                    l_coinsurance_factor[5]=0/dec=3,
                                    l_deductible_factor_1[6]=0/dec=4,
                                    l_deductible_factor_2[6]=0/dec=4,
                                    l_deductible_factor_3[6]=0/dec=4,
                                    l_deductible_factor[6]=0/dec=4,
                                    l_limit[8]=0,
                                    l_limit_1[8]=0,
                                    l_limit_2[8]=0,
                                    l_rate_group[2]=0,
                                    l_adj_rate_1[6]=0/dec=3,
                                    l_adj_rate_2[6]=0/dec=3,
                                    l_adj_rate_3[6]=0/dec=3,
                                    l_adj_rate_4[6]=0/dec=3,
                                    l_adj_rate_5[6]=0/dec=3,
                                    l_adj_rate_6[6]=0/dec=3,
                                    l_adj_rate_7[6]=0/dec=3,
                                    l_adj_rate_8[6]=0/dec=3,
                                    l_premium[8]=0,
                                    l_premium_1[8]=0,
                                    l_premium_2[8]=0,
                                    l_premium_3[8]=0,
                                    l_premium_4[8]=0,
                                    l_premium_5[8]=0,
                                    l_premium_6[8]=0,
                                    l_premium_7[8]=0,
                                    l_premium_8[8]=0,
                                    l_deductible_limit[8]=0,
                                    l_inflation_factor[4]=0/dec=2,
                                    l_loss_cost[6]=0/dec=4 ,
                                    l_base_rate_1[6]=0/dec=3,
                                    l_total_premium[8]=0,
                                    l_building_total[8]=0,
                                    l_contents_total[8]=0;

        Unsigned Ascii Number L_TERRORISM_PREMIUM[8]/decimals =0;
        Unsigned Ascii Number L_general_TERRORISM_PREMIUM[8]/decimals =0;
        Unsigned Ascii Number L_TERROR_PERCENTAGE[5]/decimals=4;
        Unsigned Ascii Number L_TERROR_MINIMUM[3];
        Unsigned Ascii Number L_FOUND[1];
        Unsigned Ascii Number L_SUB_CODE[4];
        Wdate L_TERROR_EFF_DATE;

        local date l_surcharge_date[8] ,
                   i_eff_date[8] ,
                   l_exp_date[8],
                   l_eff_date_1[8] ;

        Local String L_FIRST_TIME[1]="Y";
        Unsigned Ascii Number L_HOLD_PAYMENT_PLAN[4]=0;
        String L_ENTER[1];
        Signed Ascii Number L_SUB_TOTAL[9]=0/decimals=2;
        Unsigned Ascii Number L_BUILD[4];

        include "prorata.var"

        Access cppGENERAL,
           Set cppGENERAL:policy_NO    = G_policy_NO,
               cppgeneral:pol_year     = g_year,
               cppgeneral:end_sequence = g_end_sequence, generic

        scrollmessage = "" ;

        Include "stdkeys7.inc"

Functions

        Include "stdfunc7.inc"

        reaccess ;

EVENT DEFINITION
        default eventhandler {
                             "reload" { function = "reaccess" abort() }
                             }

Toolbar Definition

screen entry
g_final_total = 0
g_total       = 0
g_boiler      = 0
g_surcharge   = 0
g_terrorism   = 0
l_total       = 0
l_total_1     = 0

access sfpmaster, set sfpmaster:policy_no = g_policy_no,
                      sfpmaster:pol_year = g_year,
                      sfpmaster:end_sequence = g_end_sequence, generic

Access Validation
If cppGENERAL:policy_NO    <> G_policy_NO or
   cppgeneral:pol_year     <> g_year or
   cppgeneral:end_sequence <> g_end_sequence then
    Error 1000 ;

screen
{
%%
*------------------------------------------------------------------------------*
|  Prem No    Build No   Premium             Prem No    Build No   Premium     |
|    ____      ____     _________                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
*------------------------------------------------------------------------------*
| Total:                _________  _________                                   |
| Boiler:               _________                                              |
| Terrorism:            _________                                              |
| Final Total:          _________                                              |
*------------------------------------------------------------------------------*
%%

components

fields

0301    cppgeneral:prem_no/displayonly  tagged LINE_ITEMS;
0302    cppgeneral:build_no/displayonly tagged LINE_ITEMS;
0303    begin
        if g_inquiry <> "Y" then
            begin
            do loc_totals
            access cppgeneral_alias,
               set cppgeneral_alias:policy_no    = cppgeneral:policy_no,
                   cppgeneral_alias:pol_year     = cppgeneral:pol_year,
                   cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                   cppgeneral_alias:prem_no      = cppgeneral:prem_no,
                   cppgeneral_alias:build_no     = cppgeneral:build_no,
                   cppgeneral_alias:rate_type    = cppgeneral:rate_type, generic

            change cppgeneral_alias
                begin
                cppgeneral_alias:total_premium[1] = cppgeneral_alias:total_premium[1] +
                                                    cppgeneral_alias:total_endorsements +
                                                    cppgeneral_alias:total_misc
                cppgeneral_alias:premium[1]       = cppgeneral_alias:premium[1] +
                                                    cppgeneral_alias:total_endorsements +
                                                    cppgeneral_alias:total_misc
                end
            l_premium = cppgeneral_alias:total_premium[1]
            l_total = l_total + l_premium
            end
        else
            begin
            l_premium = cppgeneral:total_premium[1]
            l_total   = l_total + cppgeneral:total_premium[1]
            end
        end
        l_premium/displayonly           tagged LINE_ITEMS;

1401    begin
        if g_inquiry <> "Y" then
            begin
--            do minimum_premium
            do boiler_minimum
            do final_total
            If cppgeneral:REMOVE_TERRORISM_FORM = 0 Then
                begin
                L_TERRORISM_PREMIUM = 0
                Do GET_TERRORISM_PREMIUM
                end
            Else
                Begin
                do remove_terrorism_form
                do add_terrorism_exclusion
                End

            l_final_total = l_total +
                            l_boiler_prem_total +
                            l_terrorism_premium
            do update_triggers
            end
        else
            begin
            access sfpmastsupp, set sfpmastsupp:policy_no        = cppgeneral:policy_no,
                                    sfpmastsupp:pol_year         = cppgeneral:pol_year,
                                    sfpmastsupp:end_sequence     = cppgeneral:end_sequence,
                                    sfpmastsupp:line_of_business = cppgeneral:line_of_business, exact

            access sfpmaster, set sfpmaster:policy_no    = g_policy_no,
                                  sfpmaster:pol_year     = g_year,
                                  sfpmaster:end_sequence = g_end_sequence, generic

--            do read_sfpend
            if sfpmastsupp:policy_no        = cppgeneral:policy_no and
               sfpmastsupp:pol_year         = cppgeneral:pol_year and
               sfpmastsupp:end_sequence     = cppgeneral:end_sequence and
               sfpmastsupp:line_of_business = cppgeneral:line_of_business then
                begin
                l_boiler_prem_total = sfpmastsupp:other_totals[4]
                end
            else
                begin
                l_boiler_prem_total = sfpmaster:other_totals[4]
                end
            do check_terrorism
            l_final_total       = l_total + l_boiler_prem_total +
                                  l_terrorism_premium
            end
        end
        l_total/displayonly ;
1402    l_total_1/displayonly
        hide if i_pro_rata = 0 ;
1501    l_boiler_prem_total/displayonly ;
1601    l_terrorism_premium/displayonly ;
1701    l_final_total/displayonly ;

}

Procedure Definition

procedure check_terrorism
begin
Access cppgeneral_alias, Set cppgeneral_alias:policy_NO = G_policy_NO,
                             cppgeneral_alias:pol_year = g_year,
                             cppgeneral_alias:end_sequence = g_end_sequence,
                             cppgeneral_alias:PREM_NO  = G_PREM_NO,
                             cppgeneral_alias:BUILD_NO = G_BUILD_NO, generic

L_STATE = cppgeneral_alias:state
Do ACCESS_SFSMSOTERROR
if l_terror_percentage <> 0 then
    begin
    L_TERRORISM_PREMIUM = L_total * l_terror_PERCENTAGE
    If L_TERRORISM_PREMIUM <= L_TERROR_MINIMUM Then
        L_TERRORISM_PREMIUM = L_TERROR_MINIMUM
    end

end

procedure read_sfpend
begin
access sfpend, set sfpend:policy_no    = g_policy_no,
                   sfpend:pol_year     = g_year,
                   sfpend:end_sequence = g_end_sequence, generic

while sfpend:policy_no    = g_policy_no and
      sfpend:pol_Year     = g_year and
      sfpend:end_sequence = g_end_sequence
        begin
        if sfpend:terrorism_form = 1 and
           sfpend:lob_end_code = "P" then
            l_terrorism_premium = sfpend:premium

        next sfpend
        end

end

procedure update_triggers
begin
Access cpstrigger, Set cpstrigger:COMPANY_ID = sfpNAME:COMPANY_ID,
                       cpstrigger:STATE = cppgeneral:STATE,
                       cpstrigger:LINE_OF_BUSINESS = cppgeneral:rating_LINE_OF_BUSINESS, Generic

While cpstrigger:COMPANY_ID = sfpNAME:COMPANY_ID And
      cpstrigger:STATE = cppgeneral:STATE And
      cpstrigger:LINE_OF_BUSINESS = cppgeneral:rating_LINE_OF_BUSINESS
        Begin
        If sfpNAME:EFF_DATE >= cpstrigger:EFF_DATE Then
            Begin
            l_code_4 = cpstrigger:code[4]
--            l_code_5 = cpstrigger:code[5]
--            l_code_6 = cpstrigger:code[6]
--            l_code_7 = cpstrigger:code[7]
            End

        Next cpstrigger
        End

If L_CODE_4 <> "" Then
    Begin
    l_boiler = "N"
    L_CODE = L_CODE_4
    Do ACCESS_sfpEND_1
    If L_ADD_ENDORSEMENT = "Y" And
       sfpname:bill_plan = "DB" Then
        Do ADD_sfpEND_1
    If L_ADD_ENDORSEMENT = "N" And
       sfpname:bill_plan not one of "DB" Then
        Do DELETE_sfpEND_1
    End

/*access cppgeneral_alias, set cppgeneral_alias:policy_no = g_policy_no,
                             cppgeneral_alias:pol_year = g_year,
                             cppgeneral_alias:end_sequence = g_end_sequence, generic

l_building_form = 0
l_property_form = 0
while cppgeneral_alias:policy_no = g_policy_no and
      cppgeneral_alias:pol_year = g_year and
      cppgeneral_alias:end_sequence = g_end_sequence
        begin
        if cppgeneral_alias:rate_type one of 1, 8, 9, 10 then
            l_building_form = cppgeneral_alias:form
        else
            l_property_form = cppgeneral_alias:form

        next cppgeneral_alias
        end

if l_building_form <> 0 then
    l_form = l_building_form
else
    l_form = l_property_form

If L_CODE_5 <> "" Then
    Begin
    L_CODE = L_CODE_5
    l_boiler = "Y"
    Do ACCESS_sfpEND_1
    If L_ADD_ENDORSEMENT = "Y" And
       l_form = 1 and
       cppgeneral:boilers = 1 Then
        Do ADD_sfpEND_1
    If ((L_ADD_ENDORSEMENT = "N" And
       l_form <> 1) or
       (l_add_endorsement = "N" and
       cppgeneral:boilers = 0)) Then
        Do DELETE_sfpEND_1
    End

If L_CODE_6 <> "" Then
    Begin
    L_CODE = L_CODE_6
    l_boiler = "Y"
    Do ACCESS_sfpEND_1
    If L_ADD_ENDORSEMENT = "Y" And
       l_form = 2 and
       cppgeneral:boilers = 1 Then
        Do ADD_sfpEND_1
    If ((L_ADD_ENDORSEMENT = "N" And
       l_form <> 2) or
       (l_add_endorsement = "N" and
       cppgeneral:boilers = 0)) Then
        Do DELETE_sfpEND_1
    End

If L_CODE_7 <> "" Then
    Begin
    L_CODE = L_CODE_7
    l_boiler = "Y"
    Do ACCESS_sfpEND_1
    If L_ADD_ENDORSEMENT = "Y" And
       l_form = 3 and
       cppgeneral:boilers = 1 Then
        Do ADD_sfpEND_1
    If ((L_ADD_ENDORSEMENT = "N" And
       l_form <> 3) or
       (l_add_endorsement = "N" and
       cppgeneral:boilers = 0)) Then
        Do DELETE_sfpEND_1
    End*/

end


Procedure GET_TERRORISM_PREMIUM
begin
access cppbusiness, set cppbusiness:policy_no    = g_policy_no,
                        cppbusiness:pol_year     = g_year,
                        cppbusiness:end_sequence = g_end_sequence, generic

while cppbusiness:policy_no    = g_policy_no and
      cppbusiness:pol_year     = g_year and
      cppbusiness:end_sequence = g_end_sequence
        begin
        l_business_total = l_business_total + cppbusiness:total_premium

        next cppbusiness
        end

Access cppgeneral_alias,
   Set cppgeneral_alias:policy_NO    = G_policy_NO,
       cppgeneral_alias:pol_year     = g_year,
       cppgeneral_alias:end_sequence = g_end_sequence,
       cppgeneral_alias:PREM_NO      = G_PREM_NO,
       cppgeneral_alias:BUILD_NO     = G_BUILD_NO, generic

L_STATE = cppgeneral_alias:state
Do ACCESS_SFSMSOTERROR
l_general_terrorism_premium = 0
if l_terror_percentage <> 0 then
    begin
    L_TERRORISM_PREMIUM = L_TOTAL * l_terror_PERCENTAGE
    l_general_terrorism_premium = ((l_total +
                                  l_business_total) *
                                  l_terror_percentage)

    If L_TERRORISM_PREMIUM <= L_TERROR_MINIMUM Then
        L_TERRORISM_PREMIUM = L_TERROR_MINIMUM

    Do ADD_TERRORISM_ENDORSEMENT

    end

access sfpend,
   set sfpend:policy_no    = cppgeneral:policy_no,
       sfpend:pol_year     = cppgeneral:pol_year,
       sfpend:end_sequence = cppgeneral:end_sequence,
       sfpend:prem_no      = 0,
       sfpend:build_no     = 0, generic

while sfpend:policy_no    = cppgeneral:policy_no and
      sfpend:pol_year     = cppgeneral:pol_year and
      sfpend:end_sequence = cppgeneral:end_sequence and
      sfpend:prem_no      = 0 and
      sfpend:build_no     = 0
  begin
    if sfpend:terrorism_form = 1 and
       sfpend:code = sfsmsoterror:terrorism_form_to_add then
      begin
        change sfpend
          begin
            sfpend:premium = l_general_terrorism_premium
          end
      end
    next sfpend
  end
end -- procedure

Procedure ADD_TERRORISM_ENDORSEMENT

begin
Access sfpEND,
   Set sfpEND:policy_NO    = cppgeneral:policy_NO,
       sfpend:pol_year     = cppgeneral:pol_year,
       sfpend:end_sequence = cppgeneral:end_sequence,
       sfpend:prem_no      = 0,
       sfpend:build_no     = 0, Generic

While sfpEND:policy_NO    = cppgeneral:policy_NO and
      sfpend:pol_year     = cppgeneral:pol_year and
      sfpend:end_sequence = cppgeneral:end_sequence and
      sfpend:prem_no      = 0 and
      sfpend:build_no     = 0
    begin
    If sfpEND:CODE = SFSMSOTERROR:TERRORISM_FORM_TO_ADD Then
        Delete sfpEND

     Next sfpEND
     end

Access sfpEND,
   Set sfpEND:policy_NO    = cppgeneral:policy_NO,
       sfpend:pol_year     = cppgeneral:pol_year,
       sfpend:end_sequence = cppgeneral:end_sequence, generic

Do SUBCODE
l_sub_code = l_sub_code + 10
L_CODE     = SFSMSOTERROR:TERRORISM_FORM_TO_ADD
Do ACCESS_KEY
Add sfpEND
    Begin
    sfpEND:policy_NO        = cppgeneral:policy_NO
    sfpend:pol_year         = cppgeneral:pol_year
    sfpend:end_sequence     = cppgeneral:end_sequence
    sfpEND:PREM_NO          = 0
    sfpEND:BUILD_NO         = 0
    sfpEND:SUB_CODE         = L_SUB_CODE
    sfpEND:CODE             = SFSMSOTERROR:TERRORISM_FORM_TO_ADD
    sfpEND:FORM_EDITION     = L_FORM_EDITION
    sfpEND:PREMIUM          = L_TERRORISM_PREMIUM
    sfpEND:DESCRIPTION      = L_DESCRIPTION
    sfpEND:MINIMUM_PREMIUM  = Str(SFSMSOTERROR:MINIMUM_PREMIUM)
    sfpend:policy_wide_form = 1
    sfpend:lob_end_code     = "P"
    sfpend:terrorism_form   = 1
    End

do remove_terrorism_exclusion
end

procedure remove_terrorism_form
begin
Access cppgeneral_ALIAS, Set cppgeneral_ALIAS:policy_NO = G_policy_NO,
                             cppgeneral_alias:pol_year = g_year,
                             cppgeneral_alias:end_sequence = g_end_sequence,
                             cppgeneral_ALIAS:PREM_NO  = G_PREM_NO,
                             cppgeneral_ALIAS:BUILD_NO = G_BUILD_NO, generic

L_STATE = cppgeneral_ALIAS:STATE
Do ACCESS_SFSMSOTERROR
Access sfpEND,
   Set sfpEND:policy_NO    = G_policy_NO,
       sfpend:pol_year     = g_year,
       sfpend:end_sequence = g_end_sequence,
       sfpend:prem_no      = 0,
       sfpend:build_no     = 0, Generic

While sfpEND:policy_NO    = G_policy_NO and
      sfpend:pol_year     = g_year and
      sfpend:end_sequence = g_end_sequence and
      sfpend:prem_no      = 0 and
      sfpend:build_no     = 0
  begin
    If sfpEND:CODE = SFSMSOTERROR:TERRORISM_FORM_TO_ADD Then
      begin
        Delete sfpEND
      end

     Next sfpEND
  end
end

procedure remove_terrorism_exclusion
begin
Access cppgeneral_ALIAS, Set cppgeneral_ALIAS:policy_NO = G_policy_NO,
                             cppgeneral_alias:pol_year = g_year,
                             cppgeneral_alias:end_sequence = g_end_sequence,
                             cppgeneral_ALIAS:PREM_NO  = G_PREM_NO,
                             cppgeneral_ALIAS:BUILD_NO = G_BUILD_NO, generic

L_STATE = cppgeneral_ALIAS:STATE
Do ACCESS_SFSMSOTERROR
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpend:prem_no  = 0,
                   sfpend:build_no = 0, Generic

While sfpEND:policy_NO = G_policy_NO and
      sfpend:pol_year = g_year and
      sfpend:end_sequence = g_end_sequence and
      sfpend:prem_no  = 0 and
      sfpend:build_no = 0
    begin
    If sfpEND:CODE = SFSMSOTERROR:TERRORISM_FORM_TO_REMOVE Then
        begin
        Delete sfpEND
        end

     Next sfpEND
     end

end

Procedure ADD_TERRORISM_exclusion
begin
Access cppgeneral_ALIAS, Set cppgeneral_ALIAS:policy_NO = G_policy_NO,
                             cppgeneral_alias:pol_year = g_year,
                             cppgeneral_alias:end_sequence = g_end_sequence,
                             cppgeneral_ALIAS:PREM_NO  = G_PREM_NO,
                             cppgeneral_ALIAS:BUILD_NO = G_BUILD_NO, generic

L_STATE = cppgeneral_ALIAS:STATE
Do ACCESS_SFSMSOTERROR
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpend:prem_no  = 0,
                   sfpend:build_no = 0, Generic

While sfpEND:policy_NO = G_policy_NO and
      sfpend:pol_year = g_year and
      sfpend:end_sequence = g_end_sequence and
      sfpend:prem_no  = 0 and
      sfpend:build_no = 0
    begin
    If sfpEND:CODE = SFSMSOTERROR:TERRORISM_FORM_TO_REMOVE Then
        Delete sfpEND

     Next sfpEND
     end

Access sfpEND, Set sfpEND:policy_NO = G_policy_NO,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence, generic

Do SUBCODE
l_sub_code = l_sub_code + 10
L_CODE     = SFSMSOTERROR:TERRORISM_FORM_TO_REMOVE
Do ACCESS_KEY
Add sfpEND
    Begin
    sfpEND:policy_NO        = G_policy_NO
    sfpend:pol_year         = g_year
    sfpend:end_sequence     = g_end_sequence
    sfpEND:PREM_NO          = 0
    sfpEND:BUILD_NO         = 0
    sfpEND:SUB_CODE         = L_SUB_CODE
    sfpEND:CODE             = SFSMSOTERROR:TERRORISM_FORM_TO_REMOVE
    sfpEND:FORM_EDITION     = L_FORM_EDITION
    sfpEND:PREMIUM          = 0
    sfpEND:DESCRIPTION      = L_DESCRIPTION
    sfpend:terrorism_form   = 1
    sfpend:policy_wide_form = 1
    sfpend:lob_end_code     = "P"
    sfpend:terrorism_form   = 1
    End

Access cppgeneral_ALIAS, Set cppgeneral_ALIAS:policy_NO = G_policy_NO,
                             cppgeneral_alias:pol_year = g_year,
                             cppgeneral_alias:end_sequence = g_end_sequence, generic

while cppgeneral_alias:policy_no = g_policy_no and
      cppgeneral_alias:pol_year = g_year and
      cppgeneral_alias:end_sequence = g_end_sequence
        begin
        change cppgeneral_alias
            begin
            cppgeneral_alias:remove_terrorism_form = 1
            end

        next cppgeneral_alias
        end

end

Procedure ACCESS_SFSMSOTERROR
begin
Access SFSMSOTERROR, Set SFSMSOTERROR:COMPANY_ID       = sfpname:company_id,
                         SFSMSOTERROR:STATE            = cppgeneral:STATE,
                         SFSMSOTERROR:LINE_OF_BUSINESS = l_terror_line_of_business, generic

l_terror_percentage = 0
l_terror_minimum = 0
While SFSMSOTERROR:COMPANY_ID       = sfpname:company_id And
      SFSMSOTERROR:STATE            = cppgeneral:STATE And
      SFSMSOTERROR:LINE_OF_BUSINESS = l_terror_line_of_business
    begin
    if sfpname:eff_date >= sfsmsoterror:eff_date then
        begin
        L_TERROR_EFF_DATE   = SFSMSOTERROR:EFF_DATE
        L_TERROR_PERCENTAGE = SFSMSOTERROR:PERCENTAGE
        L_TERROR_MINIMUM    = SFSMSOTERROR:MINIMUM_PREMIUM
        end

    Next SFSMSOTERROR
    end

Access SFSMSOTERROR, Set SFSMSOTERROR:COMPANY_ID       = sfpname:company_id,
                         SFSMSOTERROR:STATE            = cppgeneral:STATE,
                         SFSMSOTERROR:LINE_OF_BUSINESS = l_terror_line_of_business,
                         SFSMSOTERROR:EFF_DATE         = L_TERROR_EFF_DATE, Exact

end

Procedure ACCESS_KEY
Begin
Access SFSOPTEND, Set SFSOPTEND:COMPANY_ID       = sfpname:company_id ,
                      SFSOPTEND:STATE            = cppgeneral:STATE,
                      SFSOPTEND:LINE_OF_BUSINESS = cppgeneral:rating_line_of_business,
                      SFSOPTEND:CODE             = L_CODE, Generic


While SFSOPTEND:COMPANY_ID       = sfpname:company_id And
      SFSOPTEND:STATE            = cppgeneral:STATE And
      SFSOPTEND:LINE_OF_BUSINESS = cppgeneral:rating_line_of_business And
      SFSOPTEND:CODE             = L_CODE
        Begin
        If (sfpNAME:EFF_DATE >= SFSOPTEND:EFF_DATE and
           (sfpname:eff_date <= sfsoptend:exp_date or
           sfsoptend:exp_date = 0)) Then
            Begin
            L_DESCRIPTION  = SFSOPTEND:DESCRIPTION
            L_FORM_EDITION = SFSOPTEND:FORM_EDITION
            End

        Next SFSOPTEND
        End

End

Procedure SUBCODE
Begin
Access sfpEND_alias, Set sfpEND_alias:policy_NO = G_policy_NO,
                         sfpend_alias:pol_year = g_year,
                         sfpend_alias:end_sequence = g_End_sequence,
                         sfpend_alias:prem_no  = 0,
                         sfpend_alias:build_no = 0, generic

L_SUB_CODE = 0
while sfpEND_alias:policy_NO = G_policy_NO and
      sfpend_alias:pol_year = g_year and
      sfpend_alias:end_sequence = g_end_sequence and
      sfpend_alias:prem_no  = 0 and
      sfpend_alias:build_no = 0
        begin
        L_SUB_CODE = sfpEND_alias:SUB_CODE

        Next sfpEND_alias
        End

End

procedure loc_totals

begin
if cppgeneral:blanket = 0 then
  begin
    l_premium_1 = 0
    l_premium_2 = 0
    l_premium_3 = 0
    l_premium_4 = 0
    if sfsline:lob_code one of "CPORTFOLIO" then
        begin
        l_location_credit = sfpmastsupp:irpm
        if l_location_credit = 0 then
            begin
            l_location_credit = 1.00
            access sfpmastsupp, set sfpmastsupp:policy_no        = cppgeneral:policy_no,
                                    sfpmastsupp:pol_year         = cppgeneral:pol_year,
                                    sfpmastsupp:end_sequence     = cppgeneral:end_sequence,
                                    sfpmastsupp:line_of_business = cppgeneral:line_of_business, exact

            change sfpmastsupp
                begin
                sfpmastsupp:irpm = l_location_credit
                end
            end
        end
    else
        begin
        access sfpmaster, set sfpmaster:policy_no = g_policy_no,
                              sfpmaster:pol_year = g_year,
                              sfpmaster:end_sequence = g_end_sequence, generic

        l_location_credit = sfpmaster:irpm
        if l_location_credit = 0 then
            begin
            l_location_credit = 1.00
            access sfpmaster, set sfpmaster:policy_no    = cppgeneral:policy_no,
                                  sfpmaster:pol_year     = cppgeneral:pol_year,
                                  sfpmaster:end_sequence = cppgeneral:end_sequence, exact

            change sfpmaster
                begin
                sfpmaster:irpm = l_location_credit
                end
            end
        end
    l_limit_1 = cppgeneral:limit[1] divide 100
    switch(cppgeneral:rate_type)
      case 1, 8, 9, 10  : l_coverage = "B"
      default           : l_coverage = "C"
      end
    do base_rate_1
    l_premium_1 = l_adj_rate_1 * l_limit_1
    do base_rate_2
    l_premium_2 = l_adj_rate_2 * l_limit_1
    if l_premium_2 = 0 then
        l_premium_2 = 1.00
    switch(cppgeneral:form)
      case 2  : do broad_rating
      case 3  : do special_rating
      end
    l_limit_1 = cppgeneral:limit[1] divide 100
    if cppgeneral:form = 1 then
        begin
        l_premium_3 = 0
        l_premium_4 = 0
        end
    else
        begin
        l_premium_3 = l_adj_rate_3 * l_limit_1
        if l_premium_3 = 0 then
            l_premium_3 = 1.00
        if l_coverage not one of "B" then
            l_premium_4 = l_theft_rate * l_limit_1
        end

    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    change cppgeneral_alias
        begin
        cppgeneral_alias:premium[1]       = l_premium_1
        cppgeneral_alias:premium[2]       = l_premium_2
        cppgeneral_alias:premium[3]       = l_premium_3
        cppgeneral_alias:premium[4]       = l_premium_4
        cppgeneral_alias:total_premium[1] = l_premium_1 +
                                            l_premium_2 +
                                            l_premium_3 +
                                            l_premium_4
        end
    end

If cppgeneral:BOILERS = 1 then
  begin
    l_boiler_added = "Y"
    Do RATE_BOILERS
    Access cppgeneral_ALIAS, Set cppgeneral_ALIAS:policy_NO    = cppgeneral:policy_NO,
                                 cppgeneral_alias:pol_year     = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no      = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no     = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type    = cppgeneral:rate_type, generic

    If cppgeneral_ALIAS:policy_NO    = cppgeneral:policy_NO and
       cppgeneral_alias:pol_year     = cppgeneral:pol_year and
       cppgeneral_alias:end_sequence = cppgeneral:end_sequence and
       cppgeneral_alias:prem_no      = cppgeneral:prem_no and
       cppgeneral_alias:build_no     = cppgeneral:build_no and
       cppgeneral_alias:rate_type    = cppgeneral:rate_type Then
        Change cppgeneral_ALIAS
            Begin
            cppgeneral_ALIAS:BOILERS_PREMIUM = L_boiler_premium
            end
  end
Else
  Begin
    Access cppgeneral_ALIAS,
       Set cppgeneral_ALIAS:policy_NO    = cppgeneral:policy_NO,
           cppgeneral_alias:pol_year     = cppgeneral:pol_year,
           cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
           cppgeneral_ALIAS:PREM_NO      = cppgeneral:PREM_NO,
           cppgeneral_ALIAS:BUILD_NO     = cppgeneral:BUILD_NO,
           cppgeneral_alias:rate_type    = cppgeneral:rate_Type, Generic

    Change cppgeneral_ALIAS
      Begin
        cppgeneral_ALIAS:BOILERS_PREMIUM = 0
      End
  End

Access sfpEND,
   Set sfpEND:policy_NO    = cppgeneral:policy_NO,
       sfpend:pol_Year     = cppgeneral:pol_year,
       sfpend:end_sequence = cppgeneral:end_sequence,
       sfpend:prem_no      = cppgeneral:prem_no,
       sfpend:build_no     = cppgeneral:build_no, generic

L_END_PREMIUM            = 0
if l_prem_no_1  <> sfpend:prem_no or
   l_build_no_1 <> sfpend:build_no then
  begin
    l_prem_no_1  = sfpend:prem_no
    l_build_no_1 = sfpend:build_no
    while sfpEND:policy_NO    = cppgeneral:policy_NO and
          sfpend:pol_year     = cppgeneral:pol_year and
          sfpend:end_sequence = cppgeneral:end_sequence and
          sfpend:prem_no      = cppgeneral:prem_no and
          sfpend:build_no     = cppgeneral:build_no
        begin
        if sfpend:lob_end_code = "P" then
            begin
            L_UPDATE_SFPEND_PREMIUM  = 0
            L_CODE                   = sfpEND:CODE
            if sfpend:manual_premium <> 0 then
                l_update_sfpend_premium = sfpend:manual_premium
            else
                begin
                Do RATE_ENDORSEMENTS
                end

            if l_update_sfpend_premium <> 0 then
                begin
                Change sfpEND
                    Begin
                    sfpEND:PREMIUM = L_UPDATE_SFPEND_PREMIUM
                    end
                End

            L_END_PREMIUM = L_END_PREMIUM + L_UPDATE_SFPEND_PREMIUM
            end

        Next sfpEND
        end
    end

Access sfpEND,
   Set sfpEND:policy_NO    = cppgeneral:policy_NO,
       sfpend:pol_Year     = cppgeneral:pol_year,
       sfpend:end_sequence = cppgeneral:end_sequence,
       sfpend:prem_no      = 0,
       sfpend:build_no     = 0, generic

while sfpEND:policy_NO    = cppgeneral:policy_NO and
      sfpend:pol_year     = cppgeneral:pol_year and
      sfpend:end_sequence = cppgeneral:end_sequence and
      sfpend:prem_no      = 0 and
      sfpend:build_no     = 0
        begin
        if sfpend:lob_end_code = "P" then
            begin
            L_UPDATE_SFPEND_PREMIUM  = 0
            L_CODE                   = sfpEND:CODE
            if sfpend:manual_premium <> 0 then
                l_update_sfpend_premium = sfpend:manual_premium
            else
                begin
                Do RATE_ENDORSEMENTS
                end

            if l_update_sfpend_premium <> 0 then
                begin
                Change sfpEND
                    Begin
                    sfpEND:PREMIUM = L_UPDATE_SFPEND_PREMIUM
                    end
                End

            L_END_PREMIUM = L_END_PREMIUM + L_UPDATE_SFPEND_PREMIUM
            end

        Next sfpEND
        end

l_code = ""
Access sfpMISC,
   Set sfpMISC:policy_NO = G_policy_NO,
       sfpmisc:pol_year = g_year,
       sfpmisc:end_sequence = g_end_sequence, Generic

L_MISC_PREMIUM = 0
If L_MISC <> "Y" Then
  Begin
    while sfpMISC:policy_NO = G_policy_NO and
          sfpmisc:pol_year = g_year and
          sfpmisc:end_sequence = g_end_sequence
      begin
        L_MISC_PREMIUM = L_MISC_PREMIUM + sfpMISC:PREMIUM
        L_MISC         = "Y"

        Next sfpMISC
      End
  End

access cppgeneral_alias,
   set cppgeneral_alias:policy_no    = cppgeneral:policy_no,
       cppgeneral_alias:pol_year     = cppgeneral:pol_year,
       cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
       cppgeneral_alias:prem_no      = cppgeneral:prem_no,
       cppgeneral_alias:build_no     = cppgeneral:build_no,
       cppgeneral_alias:rate_type    = cppgeneral:rate_type, generic

change cppgeneral_alias
  begin
    cppgeneral_alias:total_endorsements = l_end_premium
    cppgeneral_alias:total_misc         = l_misc_premium
  end
end

procedure base_rate_1
begin
if cppgeneral:perpetual_rated = 0 then
    begin
    access cpsgroupi, set cpsgroupi:company_id       = sfpname:company_id,
                          cpsgroupi:state            = cppgeneral:state,
                          cpsgroupi:line_of_business = cppgeneral:rating_line_of_business,
                          cpsgroupi:class_code       = cppgeneral:class_code, generic

    while cpsgroupi:company_id       = sfpname:company_id and
          cpsgroupi:state            = cppgeneral:state and
          cpsgroupi:line_of_business = cppgeneral:rating_line_of_business and
          cpsgroupi:class_code       = cppgeneral:class_code
            begin
            if sfpname:eff_date >= cpsgroupi:rate_date then
                begin
                switch(l_coverage)
                  case "B" : switch(cppgeneral:construction)
                               case 1  : l_group_i = cpsgroupi:rate[1]
                               case 2  : l_group_i = cpsgroupi:rate[2]
                               case 3  : l_group_i = cpsgroupi:rate[3]
                               case 4  : l_group_i = cpsgroupi:rate[4]
                               default : l_group_i = cpsgroupi:rate[5]
                               end
                  default  : switch(cppgeneral:construction)
                               case 1  : l_group_i = cpsgroupi:rate[6]
                               case 2  : l_group_i = cpsgroupi:rate[7]
                               case 3  : l_group_i = cpsgroupi:rate[8]
                               case 4  : l_group_i = cpsgroupi:rate[9]
                               default : l_group_i = cpsgroupi:rate[10]
                               end
                  end
                end

            next cpsgroupi
            end
    end
else
    begin
    access cpsperpetual, set cpsperpetual:company_id       = sfpname:company_id,
                             cpsperpetual:state            = cppgeneral:state,
                             cpsperpetual:line_of_business = cppgeneral:rating_line_of_business,
                             cpsperpetual:class_code       = cppgeneral:class_code,
                             cpsperpetual:sub_code         = cppgeneral:sub_code, generic

    while cpsperpetual:company_id       = sfpname:company_id and
          cpsperpetual:state            = cppgeneral:state and
          cpsperpetual:line_of_business = cppgeneral:rating_line_of_business and
          cpsperpetual:class_code       = cppgeneral:class_code and
          cpsperpetual:sub_code         = cppgeneral:sub_code
            begin
            if sfpname:eff_date >= cpsperpetual:eff_date then
                begin
                switch(cppgeneral:protection)
                  case 1, 2, 3, 4 : l_group_i = cpsperpetual:fire_factor
                  case 5, 6, 7, 8 : l_group_i = cpsperpetual:ec_factor
                  default         : l_group_i = cpsperpetual:vmm_factor
                  end
                end

            next cpsperpetual
            end
    end

if cppgeneral:vmm_exclusion = 1 then
    begin
    do vmm_exclusion_factor
    l_group_i = l_group_i - l_vmm_exclusion_factor
    end
do loss_cost
do protection
do territory
do coinsurance
do deductible
do inflation_guard
do agreed_factor
do update_rates

if l_coverage = "B" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 0 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    change cppgeneral_alias
        begin
        cppgeneral_alias:theft_territory_factor = l_territory_factor
        if cppgeneral_alias:new_rate[1] = 0 then
            begin
            if cppgeneral_alias:perpetual_rated = 0 then
                begin
                l_group_i_building = l_group_i *
                                     l_protection_factor *
                                     l_territory_factor
                cppgeneral_alias:base_rate[1] = l_group_i *
                                                l_protection_factor *
                                                l_territory_factor
                cppgeneral_alias:adj_rate[1]  = l_group_i *
                                                l_protection_factor *
                                                l_territory_factor *
                                                l_coinsurance_factor *
                                                l_deductible_factor_1 *
                                                l_inflation_factor *
                                                l_agreed_factor *
                                                l_loss_cost *
                                                cppgeneral_alias:company_deviation[1] *
                                                cppgeneral_alias:package_mod[1] *
                                                l_location_credit
                end
            else
                begin
                cppgeneral_alias:base_rate[1] = l_group_i
                cppgeneral_alias:adj_rate[1]  = l_group_i *
                                                l_coinsurance_factor *
                                                l_deductible_factor_1 *
                                                l_inflation_factor *
                                                l_agreed_factor *
                                                l_loss_cost *
                                                cppgeneral_alias:company_deviation[1] *
                                                cppgeneral_alias:package_mod[1] *
                                                l_location_credit
                end
            end
        else
            begin
            if cppgeneral_alias:perpetual_Rated = 0 then
                begin
                cppgeneral_alias:base_rate[1] = l_group_i *
                                                l_protection_factor *
                                                l_territory_factor
                cppgeneral_alias:adj_rate[1]  = cppgeneral_alias:new_rate[1] *
                                                l_coinsurance_factor *
                                                l_deductible_factor_1 *
                                                l_inflation_factor *
                                                l_agreed_factor *
                                                l_loss_cost *
                                                cppgeneral_alias:company_deviation[1] *
                                                cppgeneral_alias:package_mod[1] *
                                                l_location_credit
                end
            else
                begin
                cppgeneral_alias:base_rate[1] = l_group_i
                cppgeneral_alias:adj_rate[1]  = cppgeneral_alias:new_rate[1] *
                                                l_coinsurance_factor *
                                                l_deductible_factor_1 *
                                                l_inflation_factor *
                                                l_agreed_factor *
                                                l_loss_cost *
                                                cppgeneral_alias:company_deviation[1] *
                                                cppgeneral_alias:package_mod[1] *
                                                l_location_credit
                end
            end
        end

    l_adj_rate_1 = cppgeneral_alias:adj_rate[1]
    end
else
if l_coverage = "B" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 1 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    change cppgeneral_alias
        begin
        cppgeneral_alias:theft_territory_factor = l_territory_factor
        end

    l_adj_rate_1 = cppgeneral_alias:adj_rate[1]
    end
else
if l_coverage = "C" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 0 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    change cppgeneral_alias
        begin
        cppgeneral_alias:base_rate[1] = l_group_i *
                                        l_protection_factor *
                                        l_territory_Factor
        if cppgeneral:new_rate[1] = 0 then
            begin
            cppgeneral_alias:adj_rate[1]  = l_group_i *
                                            l_protection_factor *
                                            l_territory_factor *
                                            l_coinsurance_factor *
                                            l_deductible_factor_1 *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1]
            end
        else
            begin
            cppgeneral_alias:adj_rate[1]  = cppgeneral_alias:new_rate[1] *
                                            l_coinsurance_factor *
                                            l_deductible_factor_1 *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1]
            end
        end

    l_adj_rate_1 = cppgeneral_alias:adj_rate[1]
    end
else
if l_coverage = "C" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 1 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    l_adj_rate_1 = cppgeneral_alias:adj_rate[1]
    end

end

procedure base_rate_2
begin
access cpssymbolrates, set cpssymbolrates:company_id       = sfpname:company_id,
                           cpssymbolrates:state            = cppgeneral:state,
                           cpssymbolrates:line_of_business = cppgeneral:rating_line_of_business,
                           cpssymbolrates:symbol           = cppgeneral:symbol, generic

while cpssymbolrates:company_id = sfpname:company_id and
      cpssymbolrates:state      = cppgeneral:state and
      cpssymbolrates:line_of_business = cppgeneral:rating_line_of_business and
      cpssymbolrates:symbol           = cppgeneral:symbol
        begin
        if (sfpname:eff_date >= cpssymbolrates:eff_date and
           (sfpname:eff_date <= cpssymbolrates:exp_date or
           cpssymbolrates:exp_date = 0)) then
            begin
            l_group_ii = cpssymbolrates:factor

            end

        next cpssymbolrates
        end

if cppgeneral:exclusions = 1 then
    begin
    do wind_exclusion_factor
    l_group_ii = l_group_ii * l_wind_exclusion_factor
    end

if cppgeneral:symbol_number <> 0 then
    l_group_ii = l_group_ii * cppgeneral:symbol_number

switch(cppgeneral:bceg_individual)
  case 1  : l_bceg_type = "I"
  default : l_bceg_type = "C"
  end

access sfsisobceg, set sfsisobceg:company_id       = sfpname:company_id,
                       sfsisobceg:state            = cppgeneral:state,
                       sfsisobceg:line_of_business = cppgeneral:rating_line_of_business,
                       sfsisobceg:type             = l_bceg_type,
                       sfsisobceg:bceg             = cppgeneral:bceg, generic

l_bceg_factor = 0
while sfsisobceg:company_id       = sfpname:company_id and
      sfsisobceg:state            = cppgeneral:state and
      sfsisobceg:line_of_business = cppgeneral:rating_line_of_business and
      sfsisobceg:type             = l_bceg_type and
      sfsisobceg:bceg             = cppgeneral:bceg
        begin
        if (sfpname:eff_date >= sfsisobceg:eff_date and
           (sfpname:eff_date <= sfsisobceg:exp_date or
           sfsisobceg:exp_date = 0)) then
            l_bceg_factor = sfsisobceg:factor

        next sfsisobceg
        end

if l_bceg_factor = 0 then
    l_bceg_factor = 1.00

do loss_cost
do coinsurance
do deductible
do inflation_guard
do agreed_factor

if l_coverage = "B" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 0 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    change cppgeneral_alias
        begin
        cppgeneral_alias:base_rate[2] = l_group_ii
        if cppgeneral_alias:new_rate[2] = 0 then
            begin
            cppgeneral_alias:adj_rate[2]  = l_group_ii *
                                            l_coinsurance_factor *
                                            l_deductible_factor_2 *
                                            l_bceg_factor *
                                            l_inflation_factor *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1] *
                                            l_location_credit
            end
        else
            begin
            cppgeneral_alias:adj_rate[2]  = cppgeneral_alias:new_rate[2] *
                                            l_coinsurance_factor *
                                            l_deductible_factor_2 *
                                            l_bceg_factor *
                                            l_inflation_factor *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1] *
                                            l_location_credit
            end
        end

    l_adj_rate_2 = cppgeneral_alias:adj_rate[2]
    end
else
if l_coverage = "B" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 1 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    l_adj_rate_2 = cppgeneral_alias:adj_rate[2]
    end
else
if l_coverage = "C" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 0 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    change cppgeneral_alias
        begin
        cppgeneral_alias:base_rate[2] = l_group_ii
        if cppgeneral_alias:new_rate[2] = 0 then
            begin
            if cppgeneral_alias:rate_type one of 2 then
                cppgeneral_alias:adj_rate[2]  = l_group_ii *
                                                l_coinsurance_factor *
                                                l_deductible_factor_2 *
                                                l_agreed_factor *
                                                l_bceg_factor *
                                                l_loss_cost *
                                                cppgeneral_alias:company_deviation[1] *
                                                cppgeneral_alias:package_mod[1]
            else
                cppgeneral_alias:adj_rate[2]  = l_group_ii *
                                                l_deductible_factor_2 *
                                                l_agreed_factor *
                                                l_bceg_factor *
                                                l_loss_cost *
                                                cppgeneral_alias:company_deviation[1] *
                                                cppgeneral_alias:package_mod[1]
            end
        else
            begin
            if cppgeneral_alias:rate_type one of 2 then
                cppgeneral_alias:adj_rate[2]  = cppgeneral_alias:new_rate[2] *
                                                l_coinsurance_factor *
                                                l_deductible_factor_2 *
                                                l_agreed_factor *
                                                l_bceg_factor *
                                                l_loss_cost *
                                                cppgeneral_alias:company_deviation[1] *
                                                cppgeneral_alias:package_mod[1]
            else
                cppgeneral_alias:adj_rate[2]  = cppgeneral_alias:new_rate[2] *
                                                l_deductible_factor_2 *
                                                l_agreed_factor *
                                                l_bceg_factor *
                                                l_loss_cost *
                                                cppgeneral_alias:company_deviation[1] *
                                                cppgeneral_alias:package_mod[1]
            end
        end

    l_adj_rate_2 = cppgeneral_alias:adj_rate[2]
    end
else
if l_coverage = "C" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 1 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    l_adj_rate_2 = cppgeneral_alias:adj_rate[2]
    end

end

procedure broad_rating
begin
access cpsoption3, set cpsoption3:company_id       = sfpname:company_id,
                       cpsoption3:state            = cppgeneral:state,
                       cpsoption3:line_of_business = cppgeneral:rating_line_of_business, generic

while cpsoption3:company_id       = sfpname:company_id and
      cpsoption3:state            = cppgeneral:state and
      cpsoption3:line_of_business = cppgeneral:rating_line_of_business
        begin
        if sfpname:eff_date >= cpsoption3:eff_date then
            begin
            switch(l_coverage)
              case "B" : switch(cppgeneral:construction)
                           case 5, 6 : l_broad = cpsoption3:rates[2]
                           default   : l_broad = cpsoption3:rates[1]
                           end
              default  : switch(cppgeneral:construction)
                           case 5, 6 : l_broad = cpsoption3:rates[4]
                           default   : l_broad = cpsoption3:rates[3]
                           end
              end

            end

        next cpsoption3
        end

if l_coverage = "B" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 0 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    change cppgeneral_alias
        begin
        cppgeneral_alias:base_rate[3] = l_broad
        if cppgeneral_alias:new_rate[3] = 0 then
            begin
            cppgeneral_alias:adj_rate[3]  = l_broad *
                                            l_coinsurance_factor *
                                            l_deductible_factor_3 *
                                            l_inflation_factor *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1] *
                                            l_location_credit
            end
        else
            begin
            cppgeneral_alias:adj_rate[3]  = cppgeneral_alias:new_rate[3] *
                                            l_coinsurance_factor *
                                            l_deductible_factor_3 *
                                            l_inflation_factor *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1] *
                                            l_location_credit
            end
        end

    l_adj_rate_3 = cppgeneral_alias:adj_rate[3]
    end
else
if l_coverage = "B" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 1 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    l_adj_rate_3 = cppgeneral_alias:adj_rate[3]
    end
else
if l_coverage = "C" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 0 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    change cppgeneral_alias
        begin
        cppgeneral_alias:base_rate[3] = l_broad
        if cppgeneral_alias:new_rate[3] = 0 then
            begin
            cppgeneral_alias:adj_rate[3]  = l_broad *
                                            l_coinsurance_factor *
                                            l_deductible_factor_3 *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1]
            end
        else
            begin
            cppgeneral_alias:adj_rate[3]  = cppgeneral_alias:new_rate[3] *
                                            l_coinsurance_factor *
                                            l_deductible_factor_3 *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1]
            end
        end

    l_adj_rate_3 = cppgeneral_alias:base_rate[3]
    end
else
if l_coverage = "C" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 1 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    l_adj_rate_3 = cppgeneral_alias:base_rate[3]
    end

end

procedure special_rating
begin
if l_code not one of "CP1440", "CP0405" then
    l_limit_1 = cppgeneral:limit[1]
access cpsoption5, set cpsoption5:company_id       = sfpname:company_id,
                       cpsoption5:state            = cppgeneral:state,
                       cpsoption5:line_of_business = cppgeneral:rating_line_of_business, generic

while cpsoption5:company_id       = sfpname:company_id and
      cpsoption5:state            = cppgeneral:state and
      cpsoption5:line_of_business = cppgeneral:rating_line_of_business
        begin
        if sfpname:eff_date >= cpsoption5:eff_date then
            begin
            if l_code not one of "CP1440", "CP0405" then
                l_limit_1 = cppgeneral:limit[1]
            switch(l_coverage)
              case "B" : switch(cppgeneral:theft)
                           case 1  : switch(cppgeneral:construction)
                                       case 5, 6 : l_special = cpsoption5:coverage_a_rates[4]
                                       default   : l_special = cpsoption5:coverage_a_rates[2]
                                       end
                           default : switch(cppgeneral:construction)
                                       case 5, 6 : l_special = cpsoption5:coverage_a_rates[3]
                                       default   : l_special = cpsoption5:coverage_a_rates[1]
                                       end
                           end
              default  : begin
                         l_special = cpsoption5:coverage_b_no_theft
                         if cppgeneral:theft = 0 then
                             begin
                             if cppgeneral:type = "A" then
                                 l_special_theft = cpsoption5:coverage_b_residential
                             else
                             if cppgeneral:type = "O" then
                                 begin
                                 l_special_theft = cpsoption5:coverage_b_charge
                                 end
                             else
                                 do special_other
                             end
                         end
              end

            end

        next cpsoption5
        end

if l_coverage = "B" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 0 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    change cppgeneral_alias
        begin
        cppgeneral_alias:base_rate[3] = l_special
        if cppgeneral_alias:new_rate[3] = 0 then
            begin
            cppgeneral_alias:adj_rate[3]  = l_special *
                                            l_coinsurance_factor *
                                            l_deductible_factor_3 *
                                            l_inflation_factor *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1] *
                                            l_location_credit
            end
        else
            begin
            cppgeneral_alias:adj_rate[3]  = cppgeneral_alias:new_rate[3] *
                                            l_coinsurance_factor *
                                            l_deductible_factor_3 *
                                            l_inflation_factor *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1] *
                                            l_location_credit
            end
        end

    l_adj_rate_3 = cppgeneral_alias:adj_rate[3]
    end
else
if l_coverage = "B" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 1 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    l_adj_rate_3 = cppgeneral_alias:adj_rate[3]
    end
else
if l_coverage = "C" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 0 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    change cppgeneral_alias
        begin
        cppgeneral_alias:base_rate[3] = l_special
        if cppgeneral_alias:new_rate[3] = 0 then
            begin
            cppgeneral_alias:adj_rate[3]  = l_special *
                                            l_coinsurance_factor *
                                            l_deductible_factor_3 *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1]
            end
        else
            begin
            cppgeneral_alias:adj_rate[3]  = cppgeneral_alias:new_rate[3] *
                                            l_coinsurance_factor *
                                            l_deductible_factor_3 *
                                            l_agreed_factor *
                                            l_loss_cost *
                                            cppgeneral_alias:company_deviation[1] *
                                            cppgeneral_alias:package_mod[1]
            end

        if cppgeneral:theft = 0 then
            begin
            if cppgeneral:type not one of "A", "O" then
                begin
                cppgeneral_alias:base_rate[4] = l_special_theft *
                                                l_special_relativities
                end
            else
                begin
                l_special_relativities        = 1.00
                cppgeneral_alias:base_rate[4] = l_special_theft
                end
            end

        if l_code not one of "CP1440", "CP0405" then
            l_limit_1 = cppgeneral:limit[1] divide 100
        if cppgeneral:theft = 0 then
            begin
            if cppgeneral_alias:new_rate[4] = 0 then
                begin
                if cppgeneral:type one of "A" then
                    begin
                    cppgeneral_alias:adj_rate[4]  = l_special_theft *
                                                    l_deductible_factor_3 *
                                                    l_loss_cost *
                                                    cppgeneral_alias:company_deviation[1] *
                                                    cppgeneral_alias:package_mod[1]
                    end
                else
                    begin
                    cppgeneral_alias:adj_rate[4]  = ((l_special_theft *
                                                    l_special_relativities *
                                                    l_deductible_factor_3 *
                                                    l_agreed_factor) divide
                                                    l_limit_1)
                    cppgeneral_alias:adj_rate[4]  = cppgeneral_alias:adj_rate[4] *
                                                    l_loss_cost *
                                                    cppgeneral_alias:company_deviation[1] *
                                                    cppgeneral_alias:package_mod[1]
                    end
                end
            else
                begin
                cppgeneral_alias:adj_rate[4]  = cppgeneral_alias:new_rate[4] *
                                                l_deductible_factor_3 *
                                                l_agreed_factor *
                                                l_loss_cost *
                                                cppgeneral_alias:company_deviation[1] *
                                                cppgeneral_alias:package_mod[1]
                end
            end
        else
            begin
            cppgeneral_alias:adj_rate[4]  = 0
            cppgeneral_alias:base_rate[4] = 0
            cppgeneral_alias:new_rate[4]  = 0
            end
        end

    l_adj_rate_3 = cppgeneral_alias:adj_rate[3]
    l_theft_rate = cppgeneral_alias:adj_rate[4]
    end
else
if l_coverage = "C" and
   l_code not one of "CP0405", "CP1440" and
   cppgeneral:blanket = 1 then
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no  = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                                 cppgeneral_alias:prem_no   = cppgeneral:prem_no,
                                 cppgeneral_alias:build_no  = cppgeneral:build_no,
                                 cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

    l_adj_rate_3 = cppgeneral_alias:adj_rate[3]
    l_theft_rate = cppgeneral_alias:adj_rate[4]
    end

if l_code = "CP1440" then
    begin
    l_theft_rate  = ((l_special_theft *
                    l_special_relativities *
                    l_deductible_factor_3 *
                    l_agreed_factor) divide l_limit_1)
    l_theft_rate  = l_theft_rate *
                    l_loss_cost *
                    cppgeneral_alias:company_deviation[1] *
                    cppgeneral_alias:package_mod[1]
    end

end

procedure special_other
begin
access cpsoption5terr, set cpsoption5terr:company_id       = sfpname:company_id,
                           cpsoption5terr:state            = cppgeneral:state,
                           cpsoption5terr:line_of_business = cppgeneral:rating_line_of_business,
                           cpsoption5terr:county           = cppgeneral:county, generic

while cpsoption5terr:company_id       = sfpname:company_id and
      cpsoption5terr:state            = cppgeneral:state and
      cpsoption5terr:line_of_business = cppgeneral:rating_line_of_business and
      cpsoption5terr:county           = cppgeneral:county
        begin
        if sfpname:eff_date >= cpsoption5terr:eff_date then
            begin
            switch(cppgeneral:type)
              case "M", "MH", "I" : l_special_theft = cpsoption5terr:factors[1]
              default             : l_special_theft = cpsoption5terr:factors[2]
              end
            end

        next cpsoption5terr
        end

l_rate_group = cppgeneral:rate_group
if l_limit_1 > 500000 then
    l_limit_1 = 500000
access cpsspecialrates, set cpsspecialrates:company_id       = sfpname:company_id,
                            cpsspecialrates:state            = cppgeneral:state,
                            cpsspecialrates:line_of_business = cppgeneral:rating_line_of_business,
                            cpsspecialrates:limit            = l_limit_1, approximate

l_limit = cpsspecialrates:limit
access cpsspecialrates, set cpsspecialrates:company_id       = sfpname:company_id,
                            cpsspecialrates:state            = cppgeneral:state,
                            cpsspecialrates:line_of_business = cppgeneral:rating_line_of_business,
                            cpsspecialrates:limit            = l_limit,
                            cpsspecialrates:rate_group       = l_rate_group, generic

while cpsspecialrates:company_id       = sfpname:company_id and
      cpsspecialrates:state            = cppgeneral:state and
      cpsspecialrates:line_of_business = cppgeneral:rating_line_of_business and
      cpsspecialrates:limit            = l_limit and
      cpsspecialrates:rate_group       = l_rate_group
        begin
        if (sfpname:eff_date >= cpsspecialrates:eff_date and
           (sfpname:eff_date <= cpsspecialrates:exp_date or
           cpsspecialrates:exp_date = 0)) then
            begin
            switch(cppgeneral:crime_limit)
              case  5000 : l_special_relativities = cpsspecialrates:charge[1]
              case 15000 : l_special_relativities = cpsspecialrates:charge[2]
              case 25000 : l_special_relativities = cpsspecialrates:charge[3]
              default    : l_special_relativities = cpsspecialrates:charge[4]
              end
            end

        next cpsspecialrates
        end

l_limit_1 = cppgeneral:limit[1] divide 100
end

procedure vmm_exclusion_factor
begin
access cpsvmm, set cpsvmm:company_id       = sfpname:company_id,
                   cpsvmm:state            = cppgeneral:state,
                   cpsvmm:line_of_business = cppgeneral:rating_line_of_business,
                   cpsvmm:class_code       = cppgeneral:class_code, generic

if cpsvmm:class_code <> cppgeneral:class_code then
    l_class_code = 99999
else
    l_class_code = cppgeneral:class_code

access cpsvmm, set cpsvmm:company_id       = sfpname:company_id,
                   cpsvmm:state            = cppgeneral:state,
                   cpsvmm:line_of_business = cppgeneral:rating_line_of_business,
                   cpsvmm:class_code       = l_class_code, generic

while cpsvmm:company_id       = sfpname:company_id and
      cpsvmm:state            = cppgeneral:state and
      cpsvmm:line_of_business = cppgeneral:rating_line_of_business and
      cpsvmm:class_code       = l_class_code
        begin
        if (sfpname:eff_date >= cpsvmm:eff_date and
           (sfpname:eff_date <= cpsvmm:exp_date or
           cpsvmm:exp_date = 0)) then
            begin
            l_vmm_exclusion_factor = cpsvmm:factor

            end

        next cpsvmm
        end

end

procedure wind_exclusion_factor
begin
access cpswind, set cpswind:company_id       = sfpname:company_id,
                    cpswind:state            = cppgeneral:state,
                    cpswind:line_of_business = cppgeneral:rating_line_of_business,
                    cpswind:symbol           = cppgeneral:symbol, generic

while cpswind:company_id       = sfpname:company_id and
      cpswind:state            = cppgeneral:state and
      cpswind:line_of_business = cppgeneral:rating_line_of_business and
      cpswind:symbol           = cppgeneral:symbol
        begin
        if (sfpname:eff_date >= cpswind:eff_date and
           (sfpname:eff_date <= cpswind:exp_date or
           cpswind:exp_date = 0)) then
            begin
            l_wind_exclusion_factor = cpswind:factor

            end

        next cpswind
        end

end

Procedure BOILER_MINIMUM
Begin
Access CPSPROPRATE, Set CPSPROPRATE:COMPANY_ID       = sfpname:COMPANY_ID,
                        CPSPROPRATE:STATE            = cppgeneral:STATE,
                        CPSPROPRATE:LINE_OF_BUSINESS = cppgeneral:rating_LINE_OF_BUSINESS, Generic

while CPSPROPRATE:COMPANY_ID       = sfpname:COMPANY_ID and
      CPSPROPRATE:STATE            = cppgeneral:STATE and
      CPSPROPRATE:LINE_OF_BUSINESS = cppgeneral:rating_LINE_OF_BUSINESS
    begin
    If sfpNAME:EFF_DATE >= CPSPROPRATE:EFF_DATE Then
        Begin
        L_MINIMUM_boiler = cpsproprate:BOILER_MINIMUM
        End

    Next cpsproprate
    End

Access cppgeneral_ALIAS, Set cppgeneral_ALIAS:policy_NO = cppgeneral:policy_NO,
                             cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                             cppgeneral_alias:end_sequence = cppgeneral:end_sequence,  generic

L_BOILER_PREM_TOTAL = 0
while cppgeneral_ALIAS:policy_NO = cppgeneral:policy_NO and
      cppgeneral_alias:pol_year = cppgeneral:pol_year and
      cppgeneral_alias:end_sequence = cppgeneral:end_sequence
    begin
    L_BOILER_PREM_TOTAL = cppgeneral_ALIAS:BOILERS_PREMIUM +
                          L_BOILER_PREM_TOTAL

    Next cppgeneral_ALIAS
    End

If L_BOILER_PREM_TOTAL < L_MINIMUM_boiler And
   L_BOILER_PREM_TOTAL <> 0 Then
    Begin
    l_boiler_prem_total = l_minimum_boiler
    Access cppgeneral_ALIAS, Set cppgeneral_ALIAS:policy_NO = cppgeneral:policy_NO,
                                 cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence, generic

    If cppgeneral_ALIAS:policy_NO = cppgeneral:policy_NO and
       cppgeneral_alias:pol_year = cppgeneral:pol_year and
       cppgeneral_alias:end_sequence = cppgeneral:end_sequence Then
        Change cppgeneral_ALIAS
            Begin
            cppgeneral_ALIAS:BOILERS_PREMIUM = L_MINIMUM_boiler
            L_BOILER_PREM_TOTAL = L_MINIMUM_boiler
            End
    End

End

procedure loss_cost
begin
access sfslosscost, set sfslosscost:company_id       = sfpname:company_id,
                        sfslosscost:state            = cppgeneral:state,
                        sfslosscost:line_of_business = cppgeneral:line_of_business, generic

l_loss_cost = 0
while sfslosscost:company_id       = sfpname:company_id and
      sfslosscost:state            = cppgeneral:state and
      sfslosscost:line_of_business = cppgeneral:line_of_business
        begin
        if sfpname:eff_date >= sfslosscost:eff_date then
            l_loss_cost = sfslosscost:rate

        next sfslosscost
        end

end

procedure protection
begin
access cpsprotfact, set cpsprotfact:company_id       = sfpname:company_id,
                        cpsprotfact:state            = cppgeneral:state,
                        cpsprotfact:line_of_business = cppgeneral:rating_line_of_business,
                        cpsprotfact:protection       = cppgeneral:protection, generic

while cpsprotfact:company_id       = sfpname:company_id and
      cpsprotfact:state            = cppgeneral:state and
      cpsprotfact:line_of_business = cppgeneral:rating_line_of_business and
      cpsprotfact:protection       = cppgeneral:protection
        begin
        if sfpname:eff_date >= cpsprotfact:rate_date then
            begin
            switch(cppgeneral:construction)
              case 1, 2, 3 : l_protection_factor = cpsprotfact:rate[1]
              default      : l_protection_factor = cpsprotfact:rate[2]
              end
            end

        next cpsprotfact
        end
end

procedure territory
begin
access sfsterrfactors, set sfsterrfactors:company_id       = sfpname:company_id,
                           sfsterrfactors:state            = cppgeneral:state,
                           sfsterrfactors:line_of_business = cppgeneral:rating_line_of_business,
                           sfsterrfactors:territory        = cppgeneral:territory, generic

while sfsterrfactors:company_id       = sfpname:company_id and
      sfsterrfactors:state            = cppgeneral:state and
      sfsterrfactors:line_of_business = cppgeneral:rating_line_of_business and
      sfsterrfactors:territory        = cppgeneral:territory
        begin
        if sfpname:eff_date >= sfsterrfactors:eff_date then
            begin
            l_territory_factor = sfsterrfactors:factor[1]
            end

        next sfsterrfactors
        end

end

procedure coinsurance
begin
access cpscoinsurance, set cpscoinsurance:company_id       = sfpname:company_id,
                           cpscoinsurance:state            = cppgeneral:state,
                           cpscoinsurance:line_of_business = cppgeneral:rating_line_of_business,
                           cpscoinsurance:option           = cppgeneral:form,
                           cpscoinsurance:coinsurance      = cppgeneral:coinsurance, generic

while cpscoinsurance:company_id       = sfpname:company_id and
      cpscoinsurance:state            = cppgeneral:state and
      cpscoinsurance:line_of_business = cppgeneral:rating_line_of_business and
      cpscoinsurance:option           = cppgeneral:form and
      cpscoinsurance:coinsurance      = cppgeneral:coinsurance
        begin
        if sfpname:eff_date >= cpscoinsurance:eff_date then
            begin
            l_coinsurance_factor = cpscoinsurance:factor[1]
            end

        next cpscoinsurance
        end
end

procedure deductible
begin
access sfsdeductible, set sfsdeductible:company_id       = sfpname:company_id,
                          sfsdeductible:state            = cppgeneral:state,
                          sfsdeductible:line_of_business = cppgeneral:rating_line_of_business,
                          sfsdeductible:deductible       = cppgeneral:deductible, generic

if sfsdeductible:limit = 0 then
    begin
    while sfsdeductible:company_id       = sfpname:company_id and
          sfsdeductible:state            = cppgeneral:state and
          sfsdeductible:line_of_business = cppgeneral:rating_line_of_business and
          sfsdeductible:deductible       = cppgeneral:deductible
            begin
            if sfpname:eff_date >= sfsdeductible:eff_date then
                begin
                l_deductible_factor_1 = sfsdeductible:rate_1
                l_deductible_factor_2 = sfsdeductible:rate_2
                l_deductible_factor_3 = sfsdeductible:rate_3
                end

            next sfsdeductible
            end
    end
else
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no    = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year     = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence, generic

    l_limit = 0
    while cppgeneral_alias:policy_no    = cppgeneral:policy_no and
          cppgeneral_alias:pol_year     = cppgeneral:pol_year and
          cppgeneral_alias:end_sequence = cppgeneral:end_sequence
        begin
        if cppgeneral_alias:prem_no = cppgeneral:prem_no then
            l_limit = cppgeneral_alias:limit[1] +
                      l_limit

        next cppgeneral_alias
        end

    access sfsdeductible, set sfsdeductible:company_id       = sfpname:company_id,
                              sfsdeductible:state            = cppgeneral:state,
                              sfsdeductible:line_of_business = cppgeneral:rating_line_of_business,
                              sfsdeductible:deductible       = cppgeneral:deductible,
                              sfsdeductible:limit            = l_limit, approximate

    l_deductible_limit = sfsdeductible:limit

    access sfsdeductible, set sfsdeductible:company_id       = sfpname:company_id,
                              sfsdeductible:state            = cppgeneral:state,
                              sfsdeductible:line_of_business = cppgeneral:rating_line_of_business,
                              sfsdeductible:deductible       = cppgeneral:deductible,
                              sfsdeductible:limit            = l_deductible_limit, generic


    while sfsdeductible:company_id       = sfpname:company_id and
          sfsdeductible:state            = cppgeneral:state and
          sfsdeductible:line_of_business = cppgeneral:rating_line_of_business and
          sfsdeductible:deductible       = cppgeneral:deductible and
          sfsdeductible:limit            = l_deductible_limit
            begin
            if sfpname:eff_date >= sfsdeductible:eff_date then
                begin
                l_deductible_factor_1 = sfsdeductible:rate_1
                l_deductible_factor_2 = sfsdeductible:rate_2
                l_deductible_factor_3 = sfsdeductible:rate_3
                end

            next sfsdeductible
            end
    end
end

procedure inflation_guard
begin
access sfsinflation, set sfsinflation:company_id       = sfpname:company_id,
                         sfsinflation:state            = cppgeneral:state,
                         sfsinflation:line_of_business = cppgeneral:rating_line_of_business,
                         sfsinflation:percent          = cppgeneral:inflation_guard, generic

while sfsinflation:company_id       = sfpname:company_id and
      sfsinflation:state            = cppgeneral:state and
      sfsinflation:line_of_business = cppgeneral:rating_line_of_business and
      sfsinflation:percent          = cppgeneral:inflation_guard
        begin
        if sfpname:eff_date >= sfsinflation:eff_date then
            begin
            l_inflation_factor = sfsinflation:factor

            end

        next sfsinflation
        end

end

procedure agreed_factor
begin
Access CPSPROPRATE, Set CPSPROPRATE:COMPANY_ID       = sfpNAME:COMPANY_ID,
                        CPSPROPRATE:STATE            = cppgeneral:STATE,
                        CPSPROPRATE:LINE_OF_BUSINESS = cppgeneral:RATING_LINE_OF_BUSINESS, Generic

while CPSPROPRATE:COMPANY_ID       = sfpname:COMPANY_ID and
      CPSPROPRATE:STATE            = cppgeneral:STATE and
      CPSPROPRATE:LINE_OF_BUSINESS = cppgeneral:RATING_LINE_OF_BUSINESS
    begin
    If sfpNAME:EFF_DATE >= CPSPROPRATE:EFF_DATE Then
        Begin
        l_agreed_factor  = cpsproprate:agreed_value_factor
        End

    Next cpsproprate
    End

if cppgeneral:agreed_value = 0 then
    l_agreed_factor = 1.00

end

procedure update_rates
begin
access cppgeneral_alias, set cppgeneral_alias:policy_no = cppgeneral:policy_no,
                             cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                             cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                             cppgeneral_alias:prem_no  = cppgeneral:prem_no,
                             cppgeneral_alias:build_no = cppgeneral:build_no,
                             cppgeneral_alias:rate_type = cppgeneral:rate_type, generic

change cppgeneral_alias
    begin
    cppgeneral_alias:deductible_factor[1]    = l_deductible_factor_1
    cppgeneral_alias:coinsurance_factor[1]   = l_coinsurance_factor
    cppgeneral_alias:inflation_factor[1]     = l_inflation_factor
    cppgeneral_alias:rating_territory_factor = l_territory_factor
    cppgeneral_alias:protection_factor       = l_protection_factor
    cppgeneral_alias:loss_cost               = l_loss_cost
    end

end

Procedure ACCESS_sfpEND
Begin
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = G_PREM_NO,
                   sfpEND:BUILD_NO = G_BUILD_NO, Generic

L_ADD_ENDORSEMENT = "Y"
Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> G_PREM_NO Or
            sfpEND:BUILD_NO <> G_BUILD_NO

    If sfpEND:CODE = L_CODE Then
        L_ADD_ENDORSEMENT = "N"

    Next sfpEND
    End

End

Procedure ADD_sfpEND
Begin
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = G_PREM_NO,
                   sfpEND:BUILD_NO = G_BUILD_NO, Generic

L_SUB_CODE = 0
Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> G_PREM_NO Or
            sfpEND:BUILD_NO <> g_BUILD_NO

    L_SUB_CODE = sfpEND:SUB_CODE

    Next sfpEND
    End

L_SUB_CODE = L_SUB_CODE + 10

Access cppGENERAL_ALIAS, Set cppGENERAL_ALIAS:policy_NO = G_policy_NO,
                             cppgeneral_alias:pol_year  = cppgeneral:pol_year,
                             cppgeneral_alias:end_sequence = cppgeneral:end_sequence,
                             cppGENERAL_ALIAS:PREM_NO = g_PREM_NO,
                             cppGENERAL_ALIAS:BUILD_NO = g_BUILD_NO, Generic

L_STATE = cppGENERAL_ALIAS:STATE
Access SFSOPTEND, Set SFSOPTEND:COMPANY_ID = sfpNAME:COMPANY_ID,
                      SFSOPTEND:STATE = L_STATE,
                      SFSOPTEND:LINE_OF_BUSINESS = cppgeneral:rating_line_of_business,
                      SFSOPTEND:CODE = L_CODE, Generic

Repeat Begin
    Exit If SFSOPTEND:COMPANY_ID <> sfpNAME:COMPANY_ID Or
            SFSOPTEND:STATE <> L_STATE Or
            SFSOPTEND:LINE_OF_BUSINESS <> cppgeneral:rating_line_of_business Or
            SFSOPTEND:CODE <> L_CODE

    If sfpNAME:EFF_DATE >= SFSOPTEND:EFF_DATE Then
        Begin
        L_FORM_EDITION = SFSOPTEND:FORM_EDITION
        L_DESCRIPTION = SFSOPTEND:DESCRIPTION
        End

    Next SFSOPTEND
    End

Add sfpEND
    Begin
    sfpEND:policy_NO            =       G_policy_NO
    sfpend:pol_year             =       g_year
    sfpend:end_sequence         =       g_end_sequence
    sfpEND:PREM_NO              =       g_PREM_NO
    sfpEND:BUILD_NO             =       g_BUILD_NO
    sfpEND:SUB_CODE             =       L_SUB_CODE
    sfpEND:CODE                 =       L_CODE
    sfpEND:FORM_EDITION         =       L_FORM_EDITION
    sfpEND:DESCRIPTION          =       L_DESCRIPTION
    sfpEND:LOB_END_CODE         =       "P"
    sfpEND:PREMIUM              =       0
    sfpEND:LOB_END_CODE         =       "P"
    End

End

Procedure DELETE_sfpEND
Begin
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = g_PREM_NO,
                   sfpEND:BUILD_NO = g_BUILD_NO, Generic

Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> g_PREM_NO Or
            sfpEND:BUILD_NO <> g_BUILD_NO

    If sfpEND:CODE = L_CODE Then
        Delete sfpEND

    Next sfpEND
    End

End

Procedure ACCESS_sfpEND_1
Begin
l_prem_no = 0000
l_build_no = 0000
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = L_PREM_NO,
                   sfpEND:BUILD_NO = L_BUILD_NO, Generic

L_ADD_ENDORSEMENT = "Y"
Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> L_PREM_NO Or
            sfpEND:BUILD_NO <> L_BUILD_NO

    If sfpEND:CODE = L_CODE Then
        L_ADD_ENDORSEMENT = "N"

    Next sfpEND
    End

End

Procedure ADD_sfpEND_1
Begin
l_prem_no = 0
l_build_no = 0
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpend:prem_no = l_prem_no,
                   sfpend:build_no = l_build_no, generic

L_SUB_CODE = 0
Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpend:prem_no <> l_prem_no or
            sfpend:build_no <> l_build_no

    L_SUB_CODE = sfpEND:SUB_CODE

    Next sfpEND
    End

L_SUB_CODE = L_SUB_CODE + 10

L_STATE = cppGENERAL:STATE
Access SFSOPTEND, Set SFSOPTEND:COMPANY_ID = sfpNAME:COMPANY_ID,
                      SFSOPTEND:STATE = L_STATE,
                      SFSOPTEND:LINE_OF_BUSINESS = cppgeneral:rating_line_of_business,
                      SFSOPTEND:CODE = L_CODE, Generic

Repeat Begin
    Exit If SFSOPTEND:COMPANY_ID <> sfpNAME:COMPANY_ID Or
            SFSOPTEND:STATE <> L_STATE Or
            SFSOPTEND:LINE_OF_BUSINESS <> cppgeneral:rating_line_of_business Or
            SFSOPTEND:CODE <> L_CODE

    If sfpNAME:EFF_DATE >= SFSOPTEND:EFF_DATE Then
        Begin
        L_FORM_EDITION = SFSOPTEND:FORM_EDITION
        L_DESCRIPTION = SFSOPTEND:DESCRIPTION
        End

    Next SFSOPTEND
    End

Add sfpEND
    Begin
    sfpEND:policy_NO            =       G_policy_NO
    sfpend:pol_year             =       g_year
    sfpend:end_sequence         =       g_end_sequence
    sfpEND:PREM_NO              =       0000
    sfpEND:BUILD_NO             =       0000
    sfpEND:SUB_CODE             =       L_SUB_CODE
    sfpEND:CODE                 =       L_CODE
    sfpEND:FORM_EDITION         =       L_FORM_EDITION
    sfpEND:LOB_END_CODE         =       "P"
    sfpEND:DESCRIPTION          =       L_DESCRIPTION
    sfpEND:PREMIUM              =       0
    sfpend:policy_wide_form     =       1
    sfpend:terrorism_form       =       0
    sfpend:manual_premium       =       0
    if l_boiler = "Y" then
        sfpend:boiler_form      =       1
    else
        sfpend:boiler_Form      =       0
    End

End

Procedure DELETE_sfpEND_1
Begin
l_prem_no = 0
l_build_no = 0
Access sfpEND, Set sfpEND:policy_NO = G_policy_NO ,
                   sfpend:pol_year = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO = L_PREM_NO,
                   sfpEND:BUILD_NO = L_BUILD_NO, Generic

Repeat Begin
    Exit If sfpEND:policy_NO <> G_policy_NO Or
            sfpend:pol_year <> g_year or
            sfpend:end_sequence <> g_end_sequence or
            sfpEND:PREM_NO <> L_PREM_NO Or
            sfpEND:BUILD_NO <> L_BUILD_NO

    If sfpEND:CODE = L_CODE Then
        Delete sfpEND

    Next sfpEND
    End

End

Procedure RATE_BOILERS
Begin
Access CPSPROPRATE, Set CPSPROPRATE:COMPANY_ID       = sfpname:COMPANY_ID,
                        CPSPROPRATE:STATE            = cppgeneral:STATE,
                        CPSPROPRATE:LINE_OF_BUSINESS = cppgeneral:rating_LINE_OF_BUSINESS, Generic

while CPSPROPRATE:COMPANY_ID       = sfpname:COMPANY_ID and
      CPSPROPRATE:STATE            = cppgeneral:STATE and
      CPSPROPRATE:LINE_OF_BUSINESS = cppgeneral:rating_LINE_OF_BUSINESS
    begin
    If sfpNAME:EFF_DATE >= CPSPROPRATE:EFF_DATE Then
        Begin
        L_BOILER_FACTOR   = CPSPROPRATE:BOILER_FACTOR
        L_BOILER_LIMIT    = CPSPROPRATE:BOILER_PER
        L_BOILER_MINIMUM  = CPSPROPRATE:BOILER_MINIMUM
        End

    Next CPSPROPRATE
    End

L_LIMIT = cppGENERAL:LIMIT[1]
L_BOILER_PREMIUM = ((L_LIMIT divide
                   L_BOILER_LIMIT) *
                   L_BOILER_FACTOR)
if l_boiler_premium < 1 then
    l_boiler_premium = 1

End

Procedure INSTALLMENT
Begin
Do CALCULATE_PAYMENT_PLAN_OPTION

Access ARSPAYPLAN, Set ARSPAYPLAN:COMPANY_ID       = cppgeneral:company_id,
                       ARSPAYPLAN:LINE_OF_BUSINESS = cppgeneral:line_of_business,
                       ARSPAYPLAN:PAYMENT_PLAN     = L_HOLD_PAYMENT_PLAN

If ARSPAYPLAN:INSTALLMENT_CHARGE_TYPE = "FLAT" And
   ARSPAYPLAN:INSTALLMENT_CHARGE_TIME = "EACH" Then
    L_INSTALLMENT = ARSPAYPLAN:INSTALLMENT_CHARGE_RATE *
                    ARSPAYPLAN:NUMBER_OF_PAYMENTS

If ARSPAYPLAN:INSTALLMENT_CHARGE_TYPE = "FIXED" Then
    L_INSTALLMENT = ARSPAYPLAN:INSTALLMENT_CHARGE_RATE

End

Procedure CALCULATE_PAYMENT_PLAN_OPTION
Begin
L_FIRST_TIME = "Y"
L_HOLD_PAYMENT_PLAN = 1
l_sub_total = l_final_total

Access ARSPAYPLAN, Set ARSPAYPLAN:COMPANY_ID       = cppgeneral:company_id,
                       ARSPAYPLAN:LINE_OF_BUSINESS = cppgeneral:line_of_business, Approximate

While ARSPAYPLAN:COMPANY_ID       = cppgeneral:company_id And
      ARSPAYPLAN:LINE_OF_BUSINESS = cppgeneral:line_of_business
        Begin
        If L_FIRST_TIME = "Y" Then
            Begin
            L_FIRST_TIME = "N"
            L_HOLD_PAYMENT_PLAN = ARSPAYPLAN:PAYMENT_PLAN
            End

        If L_SUB_TOTAL >= ARSPAYPLAN:MINIMUM_PREMIUM  Then
            Begin
            L_HOLD_PAYMENT_PLAN = ARSPAYPLAN:PAYMENT_PLAN
            End

        Next ARSPAYPLAN
        End

Access sfpSUPP, Set sfpSUPP:policy_NO = cppGENERAL:policy_NO,
                    sfpsupp:pol_year = cppgeneral:pol_year,
                    sfpsupp:end_sequence = cppgeneral:end_sequence, generic

While sfpSUPP:policy_NO = cppGENERAL:policy_NO and
      sfpsupp:pol_year = cppgeneral:pol_year and
      sfpsupp:end_sequence = cppgeneral:end_sequence
    Begin
    If sfpSUPP:MORTGAGE_TYPE_1 One Of "B", "C", "F" Then
        begin
        L_HOLD_PAYMENT_PLAN = 1
        end

    Next sfpSUPP
    End

If sfpNAME:BILL_PLAN = "AC" Then
    Begin
    L_HOLD_PAYMENT_PLAN = 1
    End

Access sfpNAME, Set sfpNAME:policy_NO = cppGENERAL:policy_NO,
                    sfpname:pol_year = cppgeneral:pol_year,
                    sfpname:end_sequence = cppgeneral:end_sequence, generic

If sfpNAME:policy_NO = cppGENERAL:policy_NO and
   sfpname:pol_year = cppgeneral:pol_year and
   sfpname:end_sequence = cppgeneral:end_sequence Then
    Begin
    Change sfpNAME
        Begin
        sfpNAME:PAYMENT_PLAN = L_HOLD_PAYMENT_PLAN
        End

    End

Access ARSCHKSU, Set ARSCHKSU:COMPANY_ID      = cppgeneral:company_id,
                     ARSCHKSU:CHECK_REFERENCE = sfpNAME:CHECK_REFERENCE, Generic

If ARSCHKSU:CHECK_AMOUNT >= L_TOTAL Then
    Begin
    L_HOLD_PAYMENT_PLAN = 1
    End

Access sfpNAME, Set sfpNAME:policy_NO = cppGENERAL:policy_NO,
                    sfpname:pol_year = cppgeneral:pol_year,
                    sfpname:end_sequence = cppgeneral:end_sequence, generic

If sfpNAME:policy_NO = cppGENERAL:policy_NO and
   sfpname:pol_year = cppgeneral:pol_year and
   sfpname:end_sequence = cppgeneral:end_sequence Then
    Begin
    Change sfpNAME
        Begin
        sfpNAME:PAYMENT_PLAN = L_HOLD_PAYMENT_PLAN
        End
    End

End

procedure minimum_premium
begin
Access SFSCONTROL, Set SFSCONTROL:COMPANY_ID       = sfpname:company_id,
                       SFSCONTROL:STATE            = cppGENERAL:STATE,
                       SFSCONTROL:LINE_OF_BUSINESS = cppgeneral:line_of_business, Approximate

while SFSCONTROL:COMPANY_ID       = sfpname:company_id and
      SFSCONTROL:STATE            = cppGENERAL:STATE and
      SFSCONTROL:LINE_OF_BUSINESS = cppgeneral:line_of_business
    begin
    If (sfpNAME:EFF_DATE >= SFSCONTROL:EFF_DATE and
       (sfpname:eff_date < sfscontrol:exp_date or
       sfscontrol:exp_date = 0)) Then
        begin
        L_MINIMUM               = SFSCONTROL:MINIMUM_PREMIUM
        end

    Next SFSCONTROL
    End

l_minimum_applies = "N"
if l_total < l_minimum then
    begin
    l_total = l_minimum
    l_minimum_applies = "Y"
    access cppgeneral_alias, set cppgeneral_alias:policy_no    = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year     = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence, generic

    l_mp_total = 0
    while cppgeneral_alias:policy_no    = cppgeneral:policy_no and
          cppgeneral_alias:pol_year     = cppgeneral:pol_year and
          cppgeneral_alias:end_Sequence = cppgeneral:end_sequence
            begin
            l_mp_total = cppgeneral_alias:total_premium[1] +
                         l_mp_total

            next cppgeneral_alias
            end

    access cppgeneral_alias, set cppgeneral_alias:policy_no    = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year     = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence, generic

    change cppgeneral_alias
        begin
        cppgeneral_alias:total_premium[1] = (cppgeneral_alias:total_premium[1] +
                                            (l_minimum -
                                            l_mp_total))
        cppgeneral_alias:premium[12]      = l_minimum -
                                            l_mp_total
        end
    end
else
    begin
    access cppgeneral_alias, set cppgeneral_alias:policy_no    = cppgeneral:policy_no,
                                 cppgeneral_alias:pol_year     = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence, generic

    while cppgeneral_alias:policy_no    = cppgeneral:policy_no and
          cppgeneral_alias:pol_year     = cppgeneral:pol_year and
          cppgeneral_alias:end_Sequence = cppgeneral:end_sequence
        begin
        change cppgeneral_alias
            begin
            cppgeneral_alias:premium[12]      = 0
            end

        next cppgeneral_alias
        end
    end
end

Procedure FINAL_TOTAL
Begin
L_EFF_DATE_1 = Dateadd(sfpNAME:EFF_DATE,0,1)
If sfpNAME:EXP_DATE < L_EFF_DATE_1 Then
    begin
    i_eff_date = dateadd(sfpname:exp_date,0,-1)
    i_total_days = i_eff_date - sfpname:exp_date
    i_cx_days = i_eff_date - sfpname:eff_date

    include "prorata.pro"

    access cppgeneral_alias, set cppgeneral_alias:policy_no = g_policy_no,
                                 cppgeneral_alias:pol_Year = cppgeneral:pol_year,
                                 cppgeneral_alias:end_sequence = cppgeneral:end_sequence, generic

    l_total = 0
    while cppgeneral_alias:policy_no = g_policy_no and
          cppgeneral_alias:pol_year = g_year and
          cppgeneral_alias:end_sequence = g_end_sequence
        begin
        change cppgeneral_alias
            begin
            if cppgeneral_alias:premium[1] <> 0 then
                cppgeneral_alias:premium[5] = cppgeneral_alias:premium[1] * i_pro_rata
            if cppgeneral_alias:premium[2] <> 0 then
                cppgeneral_alias:premium[6] = cppgeneral_alias:premium[2] * i_pro_rata
            if cppgeneral_alias:premium[3] <> 0 then
                cppgeneral_alias:premium[7] = cppgeneral_alias:premium[3] * i_pro_rata
            if cppgeneral_alias:premium[4] <> 0 then
                cppgeneral_alias:premium[8] = cppgeneral_alias:premium[4] * i_pro_rata
            cppgeneral_alias:total_premium[2] = cppgeneral_alias:premium[5] +
                                                cppgeneral_alias:premium[6] +
                                                cppgeneral_alias:premium[7] +
                                                cppgeneral_alias:premium[8]
            end

        l_total = l_total + cppgeneral_alias:total_premium[2]
        l_total_1 = l_total_1 + cppgeneral_alias:total_premium[1]

        next cppgeneral_alias
        end
    end

L_FINAL_TOTAL = L_TOTAL + L_BOILER_PREM_TOTAL

Access sfpMASTER, Set sfpMASTER:policy_NO = G_policy_NO,
                      sfpmaster:pol_year = g_year,
                      sfpmaster:end_sequence = g_end_sequence, Exact

If L_IRPM = 0 Then
    L_IRPM = 1

access sfssurcharge, set sfssurcharge:company_id       = cppgeneral:company_id,
                         sfssurcharge:state            = cppgeneral:state,
                         sfssurcharge:line_of_business = cppgeneral:line_of_business, generic

l_surcharge_date = 0
while sfssurcharge:company_id       = cppgeneral:company_id and
      sfssurcharge:state            = cppgeneral:state and
      sfssurcharge:line_of_business = cppgeneral:line_of_business
        begin
        if (sfpname:eff_date >= sfssurcharge:eff_date and
           (l_surcharge_date < sfssurcharge:eff_date or
           l_surcharge_date = 0)) then
            begin
            l_surcharge_date    = sfssurcharge:eff_date
            l_surcharge_factor  = sfssurcharge:surcharge_factor
            l_surcharge_minimum = sfssurcharge:minimum_premium
            end

        next sfssurcharge
        end

l_minimum_applies = "N"
If L_final_TOTAL <= L_MINIMUM Then
    Begin
    L_final_total = L_MINIMUM
    L_MINIMUM_APPLIES = "Y"
    end

L_SURCHARGE = L_FINAL_TOTAL * L_SURCHARGE_FACTOR
If L_SURCHARGE < L_SURCHARGE_MINIMUM Then
    L_SURCHARGE = L_SURCHARGE_MINIMUM

L_COMPANY_ID = cppgeneral:company_id
Access sfpMASTER, Set sfpMASTER:policy_NO = cppGENERAL:policy_NO,
                      sfpmaster:pol_year = cppgeneral:pol_year,
                      sfpmaster:end_sequence = cppgeneral:end_sequence, Exact

access sfsline, set sfsline:company_id       = sfpname:company_id,
                    sfsline:line_of_business = sfpname:line_of_business,
                    sfsline:lob_subline      = "00", generic

if sfsline:lob_code one of "CPORTFOLIO" then
    begin
    access sfpmastsupp, set sfpmastsupp:policy_no = g_policy_no,
                            sfpmastsupp:pol_year = g_year,
                            sfpmastsupp:end_sequence = g_end_sequence,
                            sfpmastsupp:line_of_business = g_line_of_business, generic

    If sfpmastsupp:policy_NO = G_policy_NO and
       sfpmastsupp:pol_year = g_year and
       sfpmastsupp:end_sequence = g_end_sequence and
       sfpmastsupp:line_of_business = g_line_of_business Then
        begin
        Change sfpmastsupp
            Begin
            sfpmastsupp:TOTAL[17] = L_TOTAL
            sfpmastsupp:TOTAL[18] = L_FINAL_TOTAL
            sfpmastsupp:TOTAL[20] = L_FINAL_TOTAL + L_SURCHARGE
            sfpmastsupp:AMT_DUE_TOTAL[20] = L_FINAL_TOTAL + L_SURCHARGE
            sfpmastsupp:TOTAL[1] = L_FINAL_TOTAL - L_BOILER_PREM_TOTAL
            sfpmastsupp:other_totals[4] = L_BOILER_PREM_TOTAL
            If L_MINIMUM_APPLIES = "Y" Then
                sfpmastsupp:MINIMUM_PREM_APPLIES = "Y"
            else
                sfpmastsupp:minimum_prem_applies = "N"
            sfpmastsupp:SURCHARGE = L_SURCHARGE
            sfpmastsupp:RAW_PREMIUM_AMT_DUE = l_total
            End
        end
    end
else
    begin
    If sfpMASTER:policy_NO = CPPGENERAL:policy_NO and
       sfpmaster:pol_year = cppgeneral:pol_year and
       sfpmaster:end_sequence = cppgeneral:end_sequence Then
        Change sfpMASTER
            Begin
            sfpMASTER:TOTAL[17] = L_TOTAL
            sfpMASTER:TOTAL[18] = L_FINAL_TOTAL
            sfpMASTER:TOTAL[20] = L_FINAL_TOTAL + L_SURCHARGE
            sfpMASTER:AMT_DUE_TOTAL[20] = L_FINAL_TOTAL + L_SURCHARGE
            sfpMASTER:TOTAL[1] = L_FINAL_TOTAL - L_BOILER_PREM_TOTAL
            sfpMASTER:OTHER_TOTALS[4] = L_BOILER_PREM_TOTAL
            sfpMASTER:INSTALLMENT_CHARGE = L_INSTALLMENT
            If L_MINIMUM_APPLIES = "Y" Then
                sfpMASTER:MINIMUM_PREM_APPLIES = "Y"
            else
                sfpmaster:minimum_prem_applies = "N"
            sfpMASTER:SURCHARGE = L_SURCHARGE
            sfpMASTER:RAW_PREMIUM_AMT_DUE = l_total
            End
    end

End

Procedure RATE_ENDORSEMENTS
Begin
Access SFSOPTEND, Set SFSOPTEND:COMPANY_ID       = sfpname:company_id,
                      SFSOPTEND:STATE            = cppGENERAL:STATE,
                      SFSOPTEND:LINE_OF_BUSINESS = cppgeneral:rating_line_of_business,
                      SFSOPTEND:CODE             = L_CODE, Generic

while SFSOPTEND:COMPANY_ID       = sfpname:company_id and
      SFSOPTEND:STATE            = cppGENERAL:STATE and
      SFSOPTEND:LINE_OF_BUSINESS = cppgeneral:rating_line_of_business and
      SFSOPTEND:CODE             =  L_CODE
    begin
    If (sfpNAME:EFF_DATE >= SFSOPTEND:EFF_DATE and
       (sfpname:eff_date <= sfsoptend:exp_date or
       sfsoptend:exp_date = 0)) Then
        Begin
        L_END_FACTOR   = SFSOPTEND:PREMIUM_1[1]
        L_END_LIMIT    = SFSOPTEND:LIMIT[1]
        L_END_PREMIUM1 = SFSOPTEND:PREMIUM_1[1]

        if l_code one of "CP0418" then
            begin
            access cppendorse, set cppendorse:policy_no = sfpend:policy_no,
                                   cppendorse:pol_year = sfpend:pol_year,
                                   cppendorse:end_sequence = sfpend:end_sequence,
                                   cppendorse:prem_no  = sfpend:prem_no,
                                   cppendorse:build_no = sfpend:build_no,
                                   cppendorse:code     = l_code, generic

            if cppendorse:policy_no = sfpend:policy_no and
               cppendorse:pol_year = sfpend:pol_year and
               cppendorse:end_sequence = sfpend:end_sequence and
               cppendorse:prem_no  = sfpend:prem_no and
               cppendorse:build_no = sfpend:build_no and
               cppendorse:code     = l_code then
                begin
                l_end_premium1 = 0
                if cppendorse:limit[1] <> 0 then
                    begin
                    if cppendorse:limit[1] = sfsoptend:limit[1] then
                        begin
                        switch(cppgeneral:form)
                          case 1  : l_end_premium1 = sfsoptend:premium_1[1] * l_loss_cost
                          default : l_end_premium1 = sfsoptend:premium_1[2] * l_loss_cost
                          end
                        end
                    else
                    if cppendorse:limit[1] = sfsoptend:limit[3] then
                        begin
                        switch(cppgeneral:form)
                          case 1  : l_end_premium1 = sfsoptend:premium_1[3] * l_loss_cost
                          default : l_end_premium1 = sfsoptend:premium_1[4] * l_loss_cost
                          end
                        end
                    else
                    if cppendorse:limit[1] = sfsoptend:limit[5] then
                        begin
                        switch(cppgeneral:form)
                          case 1  : l_end_premium1 = sfsoptend:premium_1[5] * l_loss_cost
                          default : l_end_premium1 = sfsoptend:premium_1[6] * l_loss_cost
                          end
                        end
                    else
                    if cppendorse:limit[1] > sfsoptend:limit[5] then
                        begin
                        l_limit_1 = ((cppendorse:limit[1] - sfsoptend:limit[5])
                                    divide sfsoptend:limit[7])
                        switch(cppgeneral:form)
                          case 1  : begin
                                    l_end_premium1 = sfsoptend:premium_1[5] * l_loss_cost
                                    l_end_premium1 = (l_end_premium1 +
                                                     ((sfsoptend:premium_1[7] *
                                                     l_loss_cost) *
                                                     l_limit_1))
                                    end
                          default : begin
                                    l_end_premium1 = sfsoptend:premium_1[6] * l_loss_cost
                                    l_end_premium1 = (l_end_premium1 +
                                                     ((sfsoptend:premium_1[8] *
                                                     l_loss_cost) *
                                                     l_limit_1))
                                    end
                          end
                        end
                    end

                if cppendorse:limit[2] <> 0 then
                    begin
                    l_end_premium1 = (l_end_premium1 +
                                     ((cppendorse:limit[2] divide
                                     sfsoptend:limit[9]) *
                                     (sfsoptend:premium_1[9] *
                                     l_loss_cost)))
                    end
                end
            end

        if l_code one of "CP0415", "CP1430", "CP1450" then
            begin
            access cppendorse, set cppendorse:policy_no = sfpend:policy_no,
                                   cppendorse:pol_year = sfpend:pol_year,
                                   cppendorse:end_sequence = sfpend:end_sequence,
                                   cppendorse:prem_no  = sfpend:prem_no,
                                   cppendorse:build_no = sfpend:build_no,
                                   cppendorse:code     = l_code, generic

            if cppendorse:policy_no = sfpend:policy_no and
               cppendorse:pol_year = sfpend:pol_year and
               cppendorse:end_sequence = sfpend:end_sequence and
               cppendorse:prem_no  = sfpend:prem_no and
               cppendorse:build_no = sfpend:build_no and
               cppendorse:code     = l_code then
                begin
                if l_code = "CP1450" then
                    l_end_premium1 = cppendorse:premium[1]
                else
                    l_end_premium1 = cppendorse:other_premium
                end
            end
        End

    Next SFSOPTEND
    End

if l_code one of "CP0403", "CP0415", "CP0418", "CP1430", "CP1450" then
    begin
    l_update_sfpend_premium = l_end_premium1
    end

if l_code one of "CP0440" then
    begin
    access cppendorse, set cppendorse:policy_no = sfpend:policy_no,
                           cppendorse:pol_year = sfpend:pol_year,
                           cppendorse:end_sequence = sfpend:end_sequence,
                           cppendorse:prem_no  = sfpend:prem_no,
                           cppendorse:build_no = sfpend:build_no,
                           cppendorse:code     = l_code, generic

    if cppendorse:policy_no = sfpend:policy_no and
       cppendorse:pol_year = sfpend:pol_year and
       cppendorse:end_sequence = sfpend:end_sequence and
       cppendorse:prem_no  = sfpend:prem_no and
       cppendorse:build_no = sfpend:build_no and
       cppendorse:code     = l_code then
        begin
        l_state            = cppgeneral:state
        l_line_of_business = cppgeneral:rating_line_of_business
        l_class            = cppendorse:option[1]
        access cpsspoilagerates, set cpsspoilagerates:company_id       = sfpname:company_id,
                                     cpsspoilagerates:state            = l_state,
                                     cpsspoilagerates:line_of_business = l_line_of_business,
                                     cpsspoilagerates:class            = l_class, generic

        while cpsspoilagerates:company_id       = sfpname:company_id and
              cpsspoilagerates:state            = l_state and
              cpsspoilagerates:line_of_business = l_line_of_business and
              cpsspoilagerates:class            = l_class
                begin
                if (sfpname:eff_date >= cpsspoilagerates:eff_date and
                   (sfpname:eff_date <= cpsspoilagerates:exp_date or
                   cpsspoilagerates:exp_date = 0)) then
                    begin
                    switch(cppendorse:coverages[1])
                      case 1  : begin
                                if cppendorse:coverages[2] = 1 and
                                   cppendorse:coverages[3] = 1 then
                                    l_rate = cpsspoilagerates:rate[4]
                                else
                                if cppendorse:coverages[2] = 1 and
                                   cppendorse:coverages[3] = 0 then
                                    begin
                                    l_rate = cpsspoilagerates:rate[1]
                                    end
                                else
                                if cppendorse:coverages[2] = 0 and
                                   cppendorse:coverages[3] = 1 then
                                    l_rate = cpsspoilagerates:rate[3]
                                end
                      default : begin
                                if cppendorse:coverages[2] = 1 and
                                   cppendorse:coverages[3] = 1 then
                                    l_rate = cpsspoilagerates:rate[5]
                                else
                                if cppendorse:coverages[2] = 1 and
                                   cppendorse:coverages[3] = 0 then
                                    l_rate = cpsspoilagerates:rate[2]
                                else
                                if cppendorse:coverages[2] = 0 and
                                   cppendorse:coverages[3] = 1 then
                                    l_rate = cpsspoilagerates:rate[3]
                                end
                      end

                    l_selling_price = cpsspoilagerates:selling_price
                    end

                next cpsspoilagerates
                end

        if cppendorse:coverages[4] = 1 then
            l_update_sfpend_premium = ((cppendorse:limit[1] divide 100) *
                                      (l_rate * l_selling_price))
        else
            l_update_sfpend_premium = ((cppendorse:limit[1] divide 100) *
                                      l_rate)
        end

    end

if l_code = "CP0438" then
    begin
    access cppendorse, set cppendorse:policy_no = sfpend:policy_no,
                           cppendorse:pol_year = sfpend:pol_year,
                           cppendorse:end_sequence = sfpend:end_sequence,
                           cppendorse:prem_no  = sfpend:prem_no,
                           cppendorse:build_no = sfpend:build_no,
                           cppendorse:code     = l_code, generic

    if cppendorse:policy_no = sfpend:policy_no and
       cppendorse:pol_year = sfpend:pol_year and
       cppendorse:end_sequence = sfpend:end_sequence and
       cppendorse:prem_no  = sfpend:prem_no and
       cppendorse:build_no = sfpend:build_no and
       cppendorse:code     = l_code then
        begin
        l_cp0438_premium_1 = l_group_i_building * l_end_factor
        l_cp0438_premium_2 = l_group_i_building
        l_limit = cppendorse:limit[1] divide 100
        l_update_sfpend_premium_1 = ((l_limit * l_cp0438_premium_1) -
                                    (l_limit * l_cp0438_premium_2))
        l_cp0438_premium_1 = l_group_ii * l_end_factor
        l_cp0438_premium_2 = l_group_ii
        l_limit = cppendorse:limit[1] divide 100
        l_update_sfpend_premium_2 = ((l_limit * l_cp0438_premium_1) -
                                    (l_limit * l_cp0438_premium_2))
        if l_broad <> 0 then
            begin
            l_cp0438_premium_1 = l_broad * l_end_factor
            l_cp0438_premium_2 = l_broad
            l_limit = cppendorse:limit[1] divide 100
            l_update_sfpend_premium_3 = ((l_limit * l_cp0438_premium_1) -
                                        (l_limit * l_cp0438_premium_2))
            end
        if l_special <> 0 then
            begin
            l_cp0438_premium_1 = l_special * l_end_factor
            l_cp0438_premium_2 = l_special
            l_limit = cppendorse:limit[1] divide 100
            l_update_sfpend_premium_4 = ((l_limit * l_cp0438_premium_1) -
                                        (l_limit * l_cp0438_premium_2))
            end

        l_update_sfpend_premium = l_update_sfpend_premium_1 +
                                  l_update_sfpend_premium_2 +
                                  l_update_sfpend_premium_3 +
                                  l_update_sfpend_premium_4
        end

    end

if l_code = "CP0417" then
    begin
    access cppendorse, set cppendorse:policy_no    = sfpend:policy_no,
                           cppendorse:pol_year     = sfpend:pol_year,
                           cppendorse:end_sequence = sfpend:end_sequence,
                           cppendorse:prem_no      = sfpend:prem_no,
                           cppendorse:build_no     = sfpend:build_no,
                           cppendorse:code         = l_code, generic

    if cppendorse:policy_no    = sfpend:policy_no and
       cppendorse:pol_year     = sfpend:pol_year and
       cppendorse:end_sequence = sfpend:end_sequence and
       cppendorse:prem_no      = sfpend:prem_no and
       cppendorse:build_no     = sfpend:build_no and
       cppendorse:code         = l_code then
        begin
        l_state            = cppgeneral:state
        l_line_of_business = cppgeneral:rating_line_of_business
        if cppendorse:coverages[2] = 1 or
           cppendorse:coverages[4] = 1 then
            l_coverages = 2
        else
            l_coverages = 1
        access cpsutilityservice, set cpsutilityservice:company_id       = sfpname:company_id,
                                      cpsutilityservice:state            = l_state,
                                      cpsutilityservice:line_of_business = l_line_of_business,
                                      cpsutilityservice:coverages        = l_coverages, generic

        while cpsutilityservice:company_id       = sfpname:company_id and
              cpsutilityservice:state            = l_state and
              cpsutilityservice:line_of_business = l_line_of_business and
              cpsutilityservice:coverages        = l_coverages
                begin
                if sfpname:eff_date >= cpsutilityservice:eff_date then
                    begin
                    if l_coverages = 1 then
                        begin
                        switch(cppendorse:public)
                          case 1  : begin
                                    l_factor_1 = cpsutilityservice:group_1[1]
                                    l_factor_2 = cpsutilityservice:group_2[1]
                                    l_factor_3 = cpsutilityservice:broad[1]
                                    l_factor_4 = cpsutilityservice:special_bld[1]
                                    l_factor_5 = cpsutilityservice:special_pp[1]
                                    l_factor_6 = cpsutilityservice:earthquake[1]
                                    end
                          default : begin
                                    l_factor_1 = cpsutilityservice:group_1[2]
                                    l_factor_2 = cpsutilityservice:group_2[2]
                                    l_factor_3 = cpsutilityservice:broad[2]
                                    l_factor_4 = cpsutilityservice:special_bld[2]
                                    l_factor_5 = cpsutilityservice:special_pp[2]
                                    l_factor_6 = cpsutilityservice:earthquake[2]
                                    end
                          end
                        end
                    else
                        begin
                        l_factor_1 = cpsutilityservice:group_1[1]
                        l_factor_2 = cpsutilityservice:group_2[1]
                        l_factor_3 = cpsutilityservice:broad[1]
                        l_factor_4 = cpsutilityservice:special_bld[1]
                        l_factor_5 = cpsutilityservice:special_pp[1]
                        l_factor_6 = cpsutilityservice:earthquake[1]
                        end
                    end

                next cpsutilityservice
                end

        l_update_sfpend_premium = 0
        if cppendorse:coverages[1] one of 1 or
           cppendorse:coverages[2] one of 1 then
            begin
            l_cp0417_premium_1 = l_group_i_building + l_factor_1
            l_limit = cppendorse:limit[1] divide 100
            l_update_sfpend_premium_1 = l_limit * l_cp0417_premium_1
            l_cp0417_premium_1 = l_group_ii + l_factor_2
            l_update_sfpend_premium_2 = l_limit * l_cp0417_premium_1
            if l_broad <> 0 then
                begin
                l_cp0417_premium_1 = l_broad + l_factor_3
                l_update_sfpend_premium_3 = l_limit + l_cp0417_premium_1
                end
            if l_special <> 0 then
                begin
                if cppgeneral:rate_type one of 1, 8, 9, 10 then
                    begin
                    l_cp0417_premium_1 = l_special + l_factor_4
                    l_update_sfpend_premium_4 = l_limit * l_cp0417_premium_1
                    end
                else
                    begin
                    l_cp0417_premium_1 = l_special + l_factor_5
                    l_update_sfpend_premium_4 = l_limit + l_cp0417_premium_1
                    end
                end
            l_update_sfpend_premium = l_update_sfpend_premium_1 +
                                      l_update_sfpend_premium_2 +
                                      l_update_sfpend_premium_3 +
                                      l_update_sfpend_premium_4
            end

        if cppendorse:coverages[3] one of 1 or
           cppendorse:coverages[4] one of 1 then
            begin
            l_cp0417_premium_1 = l_group_i_building + l_factor_1
            l_limit = cppendorse:limit[1] divide 100
            l_update_sfpend_premium_1 = l_limit * l_cp0417_premium_1

            l_cp0417_premium_1 = l_group_ii + l_factor_2
            l_limit = cppendorse:limit[1] divide 100
            l_update_sfpend_premium_2 = l_limit * l_cp0417_premium_1

            if l_broad <> 0 then
                begin
                l_cp0417_premium_1 = l_broad + l_factor_3
                l_update_sfpend_premium_3 = l_limit * l_cp0417_premium_1
                end

            if l_special <> 0 then
                begin
                if cppgeneral:rate_type one of 1, 8, 9, 10 then
                    begin
                    l_cp0417_premium_1 = l_special + l_factor_4
                    l_update_sfpend_premium_4 = l_limit * l_cp0417_premium_1
                    end
                else
                    begin
                    l_cp0417_premium_1 = l_special + l_factor_5
                    l_update_sfpend_premium_4 = l_limit * l_cp0417_premium_1
                    end
                end

            l_update_sfpend_premium = l_update_sfpend_premium_1 +
                                      l_update_sfpend_premium_2 +
                                      l_update_sfpend_premium_3 +
                                      l_update_sfpend_premium_4 +
                                      l_update_sfpend_premium
            end

        if cppendorse:coverages[5] one of 1 then
            begin
            l_cp0417_premium_1 = l_group_i_building + l_factor_1
            l_limit = cppendorse:limit[1] divide 100
            l_update_sfpend_premium_1 = l_limit * l_cp0417_premium_1

            l_cp0417_premium_1 = l_group_ii + l_factor_2
            l_update_sfpend_premium_2 = l_limit * l_cp0417_premium_1

            if l_broad <> 0 then
                begin
                l_cp0417_premium_1 = l_broad + l_factor_3
                l_update_sfpend_premium_3 = l_limit * l_cp0417_premium_1
                end
            if l_special <> 0 then
                begin
                if cppgeneral:rate_type one of 1, 8, 9, 10 then
                    begin
                    l_cp0417_premium_1 = l_special + l_factor_4
                    l_update_sfpend_premium_4 = l_limit * l_cp0417_premium_1
                    end
                else
                    begin
                    l_cp0417_premium_1 = l_special + l_factor_5
                    l_update_sfpend_premium_4 = l_limit * l_cp0417_premium_1
                    end
                end
            l_update_sfpend_premium = l_update_sfpend_premium_1 +
                                      l_update_sfpend_premium_2 +
                                      l_update_sfpend_premium_3 +
                                      l_update_sfpend_premium_4 +
                                      l_update_sfpend_premium
            end

        end

    end

if l_code = "CP0405" then
    begin
    access cppendorse, set cppendorse:policy_no = sfpend:policy_no,
                           cppendorse:pol_year = sfpend:pol_year,
                           cppendorse:end_sequence = sfpend:end_sequence,
                           cppendorse:prem_no  = sfpend:prem_no,
                           cppendorse:build_no = sfpend:build_no,
                           cppendorse:code     = l_code, generic

    if cppendorse:policy_no = sfpend:policy_no and
       cppendorse:pol_year = sfpend:pol_year and
       cppendorse:end_sequence = sfpend:end_sequence and
       cppendorse:prem_no  = sfpend:prem_no and
       cppendorse:build_no = sfpend:build_no and
       cppendorse:code     = l_code then
        begin
        if cppendorse:limit[3] <> 0 then
            begin
            l_premium_1 = 0
            l_premium_2 = 0
            l_premium_3 = 0
            l_premium_4 = 0
            l_limit_1 = cppendorse:limit[3] divide 100
            l_coverage = "B"
            do base_rate_1
            l_premium_1 = l_adj_rate_1 * l_limit_1
            do base_rate_2
            l_premium_2 = l_adj_rate_2 * l_limit_1
            switch(cppgeneral:form)
              case 2  : do broad_rating
              case 3  : do special_rating
              end
            l_limit_1 = cppendorse:limit[3] divide 100
            if cppgeneral:form = 1 then
                begin
                l_premium_3 = 0
                l_premium_4 = 0
                end
            else
                begin
                l_premium_3 = l_adj_rate_3 * l_limit_1
                end

            l_update_sfpend_premium = l_premium_1 +
                                      l_premium_2 +
                                      l_premium_3
            end
        else
        if cppendorse:limit[1] <> 0 or
           cppendorse:limit[2] <> 0 then
            begin
            l_premium_1 = 0
            l_premium_2 = 0
            l_premium_3 = 0
            l_premium_4 = 0
            if cppendorse:limit[1] <> 0 then
                l_limit_1 = cppendorse:limit[1] divide 100
            else
                l_limit_1 = cppendorse:limit[2] divide 100
            l_coverage = "B"
            do base_rate_1
            l_premium_1 = l_adj_rate_1 * l_limit_1
            do base_rate_2
            l_premium_2 = l_adj_rate_2 * l_limit_1
            switch(cppgeneral:form)
              case 2  : do broad_rating
              case 3  : do special_rating
              end
            if cppendorse:limit[1] <> 0 then
                l_limit_1 = cppendorse:limit[1] divide 100
            else
                l_limit_1 = cppendorse:limit[2] divide 100
            if cppgeneral:form = 1 then
                begin
                l_premium_3 = 0
                l_premium_4 = 0
                end
            else
                begin
                l_premium_3 = l_adj_rate_3 * l_limit_1
                end

            l_update_sfpend_premium = l_premium_1 +
                                      l_premium_2 +
                                      l_premium_3
            end

        end
    end

if l_code = "CP1440" then
    begin
    access cppendorse, set cppendorse:policy_no = sfpend:policy_no,
                           cppendorse:pol_year = sfpend:pol_year,
                           cppendorse:end_sequence = sfpend:end_sequence,
                           cppendorse:prem_no  = sfpend:prem_no,
                           cppendorse:build_no = sfpend:build_no,
                           cppendorse:code     = l_code, generic

    if cppendorse:policy_no = sfpend:policy_no and
       cppendorse:pol_year = sfpend:pol_year and
       cppendorse:end_sequence = sfpend:end_sequence and
       cppendorse:prem_no  = sfpend:prem_no and
       cppendorse:build_no = sfpend:build_no and
       cppendorse:code     = l_code then
        begin
        l_premium_1 = 0
        l_premium_2 = 0
        l_premium_3 = 0
        l_premium_4 = 0
        l_coverage = "C"
        do base_rate_1
        l_limit_1   = cppendorse:limit[1] divide 100
        l_premium_1 = l_adj_rate_1 * l_limit_1
        do base_rate_2
        l_premium_2 = l_adj_rate_2 * l_limit_1
        l_coverage = "C"
        switch(cppgeneral:form)
          case 2  : do broad_rating
          case 3  : do special_rating
          end
        if cppgeneral:form = 1 then
            begin
            l_premium_3 = 0
            l_premium_4 = 0
            end
        else
            begin
            l_limit_1 = cppendorse:limit[1] divide 100
            l_premium_3 = l_adj_rate_3 * l_limit_1
            l_premium_4 = l_theft_rate * l_limit_1
            end

        l_update_sfpend_premium = l_premium_1 +
                                  l_premium_2 +
                                  l_premium_3 +
                                  l_premium_4
        end

    end

if l_code = "CP1230" then
    begin
    access cppendorse, set cppendorse:policy_no = sfpend:policy_no,
                           cppendorse:pol_year = sfpend:pol_year,
                           cppendorse:end_sequence = sfpend:end_sequence,
                           cppendorse:prem_no  = sfpend:prem_no,
                           cppendorse:build_no = sfpend:build_no,
                           cppendorse:code     = l_code, generic

    if cppendorse:policy_no = sfpend:policy_no and
       cppendorse:pol_year = sfpend:pol_year and
       cppendorse:end_sequence = sfpend:end_sequence and
       cppendorse:prem_no  = sfpend:prem_no and
       cppendorse:build_no = sfpend:build_no and
       cppendorse:code     = l_code then
        begin
        access cppgeneral_alias, set cppgeneral_alias:policy_no = sfpend:policy_no,
                                     cppgeneral_alias:pol_year = sfpend:pol_year,
                                     cppgeneral_alias:end_sequence = sfpend:end_sequence,
                                     cppgeneral_alias:prem_no  = sfpend:prem_no,
                                     cppgeneral_alias:build_no = sfpend:build_no, generic

        while cppgeneral_alias:policy_no = sfpend:policy_no and
              cppgeneral_alias:pol_year = sfpend:pol_year and
              cppgeneral_alias:end_sequence = sfpend:end_sequence and
              cppgeneral_alias:prem_no  = sfpend:prem_no and
              cppgeneral_alias:build_no = sfpend:build_no
                begin
--                if cppgeneral_alias:rate_type one of 2 then
--                    begin
                    L_EFF_DATE_1 = cppendorse:EFF_DATE
                    L_EXP_DATE   = cppendorse:EXP_DATE
                    L_DAYS       = ((L_EFF_DATE_1 - L_EXP_DATE) * -1)
                    L_PEAK_FACTOR = cppgeneral_alias:adj_rate[1]
                    L_PEAK_GROUP_1 = (L_PEAK_FACTOR * (L_DAYS Divide 365) *
                                     (cppendorse:LIMIT[1] Divide 100))
                    l_peak_factor = cppgeneral_alias:adj_rate[2]
                    L_PEAK_GROUP_2 = (L_PEAK_FACTOR * (L_DAYS Divide 365) *
                                     (cppendorse:LIMIT[1] Divide 100))
                    l_peak_factor = cppgeneral_alias:adj_rate[3]
                    L_PEAK_GROUP_3 = (L_PEAK_FACTOR * (L_DAYS Divide 365) *
                                     (cppendorse:LIMIT[1] Divide 100))
                    l_peak_factor = 0
                    L_PEAK_GROUP_4 = (L_PEAK_FACTOR * (L_DAYS Divide 365) *
                                     (cppendorse:LIMIT[1] Divide 100))
                    if l_peak_group_4 = 0 then
                        l_peak_group_4 = 1.00

                    l_update_sfpend_premium = l_peak_group_1 +
                                              l_peak_group_2 +
                                              l_peak_group_3 +
                                              l_peak_group_4
--                    end

                next cppgeneral_alias
                end
        end

    end

End

End
